// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xc1\x6e\xf2\x40\x0c\x84\xdf\xc5\xe7\x3d\xfd\xff\x2d\xd7\x9e\x79\x02\x84\x90\xc9\x0e\xd5\xaa\xc1\x46\xb1\x37\x25\x42\xbc\x7b\x05\x4a\xd8\x14\x51\xa0\xaa\x50\xd5\x5b\x24\x7b\xec\x6f\x66\xe3\xf9\x9e\x6a\x15\x73\x16\xa7\xca\xdb\x8c\x40\x49\xb6\xd9\x8d\xaa\xf9\x22\x90\xf0\x06\x54\xd1\x3a\xb5\xe6\x14\x48\xb3\x0f\xb5\xfd\x58\xa2\x40\xde\x6f\x8f\x5f\x1c\x63\x0b\x33\x3a\x2c\x02\x6d\xb9\xe7\x55\x03\xaa\xd6\xdc\x18\x02\x99\xb3\x63\x96\x9d\x57\xa9\x49\xde\x53\x45\x5d\xc2\x7b\xd1\xae\xb3\xd4\x9e\x54\xe8\x10\xa6\x40\x83\xfa\x4c\x74\xde\xba\x14\x8d\x98\xb1\x39\xda\xeb\x00\x43\x5f\x8b\x4e\xdf\xf0\x89\xfc\x21\x3a\x51\x19\x9b\xee\x31\x5e\x84\xf6\x6d\x44\xc1\xee\x37\xa2\xfd\x29\xf6\x2b\xbe\xa0\x6e\x92\x39\x62\xd1\xae\x54\x9b\xd3\xee\xa1\x0e\x89\xda\x9a\x5e\x9b\x5e\x9a\x52\x84\xf8\xd1\x4d\x19\xd3\x3b\xec\xff\xbf\x69\x13\xd7\x9e\x3a\x5c\x6e\x7a\x5a\x44\xc5\x3b\x76\xa8\xb3\x9f\x2c\xfc\x91\x8b\x28\xa1\x2d\x1f\xca\x7f\x79\xe3\x01\x4a\x0e\x1c\xe3\x13\x4e\x8b\x45\xa5\xdf\x68\xb6\x6b\x6e\x93\x44\xec\x10\xc7\xc7\x19\x6f\xe8\x8e\xf7\xb3\x6a\x18\x38\xf9\x81\x54\x6e\x5a\x7c\x61\x89\x29\xb2\x4f\x60\xd1\x41\x9c\x0e\x8b\x8f\x00\x00\x00\xff\xff\x80\x9f\x89\xb4\x3b\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x92\xe2\x3c\x0f\xbc\x52\x4b\xd6\xc3\x3e\x8e\x9f\xf7\x3f\xc2\x5f\x4e\xc2\x00\xc3\x2c\x24\xd9\x85\x7f\xeb\x5b\x52\x0c\x8c\xe2\xd8\x72\xab\x25\xb5\x31\x44\x18\x04\xca\x06\x48\x30\x82\x11\xe0\x51\xdd\x00\x04\xf5\x0a\xc2\xc9\x57\x02\xc4\xc2\xd8\x5e\x64\x11\x16\x42\x1b\xd2\xda\x10\x92\x65\x9d\xa6\x3e\xad\x2e\x39\x0e\x42\x58\xad\x4d\x56\x6b\x2e\x1e\x7a\x20\x5b\xac\x44\xbe\x5a\x2b\x97\xca\x7d\xd4\xd5\x9a\xf2\x66\x0d\x52\x11\xbb\x2e\x56\x16\x5e\xad\xad\x02\x49\x4a\x5c\xad\x29\xa9\x6b\x99\xfb\x8a\x18\x4d\x4b\x90\x08\xd2\xb9\x62\x4c\xeb\x7e\x57\xbb\x2e\x18\x24\x36\x42\x40\x56\x9b\xcf\x08\x94\x22\x22\xfb\xd7\x7e\x5e\xbd\xc8\x8e\x8c\x8d\x34\x23\xc0\x00\x25\x52\x28\x2e\x2b\x26\x42\x48\x18\xe1\xd6\xdb\x8e\x07\x6f\x89\x74\xc6\x2f\x22\x18\x42\x9c\xb8\x20\x22\xce\xf8\x1d\xf0\x21\x61\xf3\x00\x89\x13\x25\xe8\x72\x4d\x14\x0a\x26\x0a\xc0\x8d\x17\xc4\xe1\xd1\x0b\x8d\x6f\xf4\xc2\x29\xfd\x75\xb1\xa0\x6c\x8f\x28\xb4\xf2\x4e\x14\x46\xbc\x43\x41\x69\xbb\xae\x5e\x47\x79\x3f\x32\x31\xcc\x5d\x53\x22\xbb\x7c\xde\xdc\xe3\x47\x9f\x92\x28\x2e\xd7\x13\x3c\x59\xfa\x03\x9e\xac\x6e\x84\x34\x07\xfc\x65\xd1\xe7\xac\x0f\xde\x06\xbc\x21\x07\xfe\xc4\xf3\x97\x38\xfd\x92\x59\x29\xfb\x25\xcb\x97\xda\x8f\x23\x2b\x5a\x18\x04\x47\xaf\x7d\xc3\x8b\x6e\x2b\xff\xef\x74\x11\xf0\x1a\x11\x08\x68\x7a\xfe\xc5\x80\x30\xf1\x5d\xd0\xf7\x88\x50\x48\xb7\xa8\x04\xff\x56\x1f\x35\x0f\xba\xde\x8d\xa2\x1e\xda\x7a\x3f\xf4\xf5\xdb\x36\xee\x86\x9d\xd3\xce\x88\x44\xdb\x53\xb3\xcf\x5c\xe7\xbc\xc6\x55\xe9\x67\x3c\xd3\xfa\x9e\x8c\x9d\xf5\x33\x5e\x19\x7c\x04\xd5\x10\x8e\x8c\x26\x89\x33\x8e\x52\x45\x5d\x0f\xc7\x0f\xdc\xa2\x18\x4a\xe4\x0d\x61\x7e\x47\x04\x3f\x9b\xb9\x3b\xd8\x22\xd1\x9f\xb0\x45\x52\x39\xc1\x16\x29\x74\x8c\x2d\xa4\x5a\x66\xbd\x34\x82\xea\x52\x01\xe7\xac\x3e\x10\x6b\xf0\x94\x4f\x03\x7f\x87\x3b\x2e\xd5\x39\xce\x2c\xe0\x79\x27\xe4\x9b\xaa\x0d\x1f\xc6\xae\x96\xac\xba\x58\xb2\x1e\x32\xc3\xd9\xd4\x69\x5a\x97\x6f\x81\x61\xea\xd1\xd4\x82\xab\x8b\x0d\x67\xae\x8c\xe5\x13\xd6\xaf\xb3\xf9\xb0\x61\x62\xca\xb0\x66\xe4\xc1\xc5\x74\x19\x33\xe6\x73\xf3\xd3\x6c\xce\x65\xdd\x96\x59\x3c\x98\x9a\x7c\xf7\x7d\xc5\xf7\x17\x95\x78\x2a\xb8\x83\x1c\xef\xc9\x08\x05\xf5\x1f\xe3\xb8\x8e\xf4\x84\xe3\x86\x76\x82\xe3\x76\xaf\xff\xf6\x70\x7c\x7d\x2e\xc7\xcf\xf1\x9b\xc2\x2b\x7e\x5b\xb7\xb1\xf0\x71\xb2\x3a\x4d\x9e\x7a\x78\xbe\x9e\xe2\x89\x3a\x98\x48\x1c\xe2\xa4\x8f\x9e\x3a\xe7\x26\x51\x72\xcf\xdd\xb5\x64\x57\xf1\x54\x29\x35\xae\xa5\x78\x94\x92\x62\xe1\xd1\xa5\xb0\xb4\x1a\x91\xa5\xc6\x3a\x48\xb8\x49\x4d\x9c\xe4\x2b\xfa\xf0\xb1\xe4\xa8\xd9\xb0\xf2\x3d\x9b\xf6\xe3\xf9\xb5\xbf\x87\xdd\x65\xd6\xb5\xa3\x9d\x50\x07\xb9\x85\xdc\xac\xb7\xa9\x1b\xff\xa1\xcc\xf3\x62\x4f\x32\xcf\x6b\x3e\x91\x79\x7e\x7f\xfe\xdb\xa9\x45\xd6\xff\xec\x72\xfe\xdd\xd6\x3c\x5a\x3f\xbb\xd9\xd4\xb6\xd1\xfe\x3b\x51\x8c\xaf\xa3\x18\xd3\xb3\xfa\x19\xf3\xee\xfa\x19\xaf\x51\x8c\x75\x77\xfd\xfc\x1d\xdb\xc6\x80\xf0\xed\x4d\x5f\x7f\x4f\xe6\x73\xe2\x4c\x36\x5a\xfe\xbf\xab\xfd\x64\xcf\xf4\x5b\xf2\x33\xfa\x2d\xa5\x83\xfa\xed\x4e\xed\xa7\x3c\x3e\xa3\xf6\xb7\x8e\x9a\x95\x3e\xd8\x51\x5f\x2a\xc6\x07\x7d\xf8\x4d\x43\xfe\xac\xf2\x9e\x75\xd4\x25\x12\x27\xb0\x59\xd0\x29\xb0\xcf\xa1\xc3\x2f\xf5\x86\x9b\x91\x55\x4b\x26\xab\xf6\xf8\x49\x23\x5f\xf1\xba\xd5\xd3\x8f\xd8\x1d\xf7\xfd\x95\x9e\x5e\x90\x3e\x54\x7b\x6f\x91\x4e\xfa\x41\xa4\x71\x08\xe9\xdb\x73\xc6\x8f\x9c\xdc\xcb\x43\x03\x68\xd6\xa8\xcb\xaf\x29\x37\xfb\xaf\xa1\x7c\x70\xff\xb2\x47\xd9\x5a\xe7\x66\x6a\xcd\xe1\xe2\x89\x31\xd1\x98\x58\xcc\x51\xab\xe5\x82\xc3\xdd\xc9\xed\x87\x3c\x3d\xea\xfb\x9f\x3e\xb9\x81\x8b\x59\x35\x8a\x32\xaf\x6d\x3e\x79\x93\xfa\xf8\xc8\xef\xa7\x1f\x58\x83\x7f\xfd\x1b\xed\xec\xff\x97\x0e\xb8\xa3\xcb\x36\xca\x4f\xba\x6c\xe3\x7e\xa2\xcb\x36\x91\x53\x27\xc8\x56\xd3\x07\xfb\x9d\xbf\xcc\x33\xb2\xba\xe4\x0b\xd9\x9a\x63\x4f\x4f\x92\xbb\x4e\x90\xc7\xd4\xef\x1f\x3d\x41\xce\x5d\x2c\x35\xe2\x64\xf6\xef\x38\x41\x2e\xe7\x10\x20\x93\xa9\xb1\x67\xcf\xce\x01\x1a\x19\x62\x4d\xd0\xe6\xfa\xb1\x04\x50\x1e\x3c\x94\xad\xd7\xd2\x42\x81\x92\x51\xa2\x22\x08\xee\x0c\x72\x6d\x83\x5b\xed\x05\x56\x0d\xda\x4b\x90\x00\x70\xfa\x5f\x00\x00\x00\xff\xff\x74\x5c\xf1\x27\xd0\x1c\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x6a\xf3\x40\x0c\x84\xdf\x45\xe7\x3d\xfd\xff\xcd\xf7\x1e\xf3\x04\x21\x14\xd9\x3b\x2e\x4b\x5d\xad\x59\x69\xdd\x98\x90\x77\x2f\x76\xe9\x26\xd4\xc1\x25\xa1\x4d\xe9\xd5\x3b\x42\xdf\x8c\x24\x6f\x0f\xd4\x44\x51\x63\x31\xaa\x5a\xee\x14\x8e\x82\xf4\xd9\x94\xaa\xed\x81\x84\x5f\x40\x15\x49\xf4\xd8\xb0\x1a\x12\x39\xb2\xb1\x9f\xbe\xb1\xf7\x09\xaa\x74\x74\x45\x06\xf1\x31\x69\x5c\x17\x05\x0f\xb1\x60\xe3\x49\x54\x8f\x06\xfd\xff\x8f\x8e\x3b\x57\x1a\xb2\x85\x01\x8f\xec\x3d\x39\x8a\xd9\x3e\x03\x9d\x15\xc7\xd8\xcd\x95\x3d\x8f\x5c\x77\x28\x2e\xd4\xd8\xb0\xc9\xc6\x75\xe8\xa6\x76\x93\x0b\xf9\x10\x95\xf2\x36\x4b\x63\x21\xca\x4c\x78\x4a\xc2\x52\xbe\x3e\x88\x05\x7e\xd0\x87\x39\x11\x7c\xa7\x8b\x21\xe0\xf5\x5a\xfe\x05\x19\xf6\x68\xb2\xcd\x93\x5a\xe5\x3a\xf7\xf6\x33\x68\x37\x46\x2b\xd8\xdb\x2f\xc0\xdf\x76\x21\x0b\xfa\x84\x21\x3e\xe3\x2f\xaf\xf6\x13\xbe\x8c\xff\x1d\xdf\xad\x0d\xe6\xd2\x63\xf9\x1b\x5c\x7c\xbc\xf3\x9d\xb4\x21\xe9\x9d\xf6\x6c\xf7\x16\x00\x00\xff\xff\x59\xe7\x7c\x26\x8b\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x7a\xf2\x38\x0c\xbd\x92\x16\x6b\x3b\x8e\xd7\xfb\x1f\x61\x3e\xc7\x81\x42\xe9\x4f\x09\x74\x99\x99\x3f\xf9\xda\x52\xe1\xc8\xf2\xf3\xd3\x93\x1c\x05\x07\x85\x04\x42\x0a\x90\x58\x11\x14\x01\xf2\x10\x53\x00\x60\xb1\x0a\x08\x4f\x5e\x01\x90\x94\xc7\x7e\xa1\x3a\x28\x83\x8e\xd6\x3a\x30\xa6\x39\x4f\x49\x62\x9b\x35\xa4\x67\x2b\xcb\x8a\x69\xb7\xa2\xa3\x42\x6b\x6d\x59\x73\x2c\x2b\x71\x71\xa3\x93\xb5\xed\x63\x19\xb9\x76\x51\xdb\xac\x24\xfb\x58\x83\x0c\x4e\x8c\xcb\xea\x79\x59\x43\x9a\x47\x49\xbb\xb5\xe3\xb2\xe6\x00\x89\x5a\xca\x66\x65\xdb\xad\xa5\xb0\x98\xf3\x6e\x6d\xba\xac\xcd\x03\x59\xea\x8a\x21\x49\xd9\xad\x4d\xa9\x37\xee\xcb\xea\x2a\x26\x65\xa2\xe8\x30\x9a\x14\x4e\x0e\x28\x73\xd5\x15\x16\xba\xcb\x2e\x1b\xe2\x35\xe6\x33\xa3\x89\xce\x67\x12\x08\xfa\xb6\x33\x04\x80\x4e\x8e\xc0\x4e\x42\xce\x8e\x8e\x32\x7f\x68\x7d\x17\x28\xe0\x20\x18\xfb\xd8\x00\x07\x67\xe7\xe9\x5f\xca\x1c\x8f\x6b\x56\x84\x0d\x13\x27\xd8\x9e\xf7\x04\xbb\x0f\xc7\xf9\xd4\x8a\xa2\xf7\x39\xbf\xc0\xba\x63\xfb\x59\xdf\x2b\xe0\xb6\x83\xcb\x17\xeb\xee\x8b\xe7\xdc\x3a\x63\xe4\x6d\x7e\xde\x66\x02\xc8\xc0\x18\xa8\xd7\x71\x4e\xcf\x41\xcb\xf7\x69\x8d\x81\xc0\x01\x83\x2f\xf0\x99\x23\xdf\xe3\x83\x3e\x26\x3f\x1d\x58\x81\x57\x44\x13\x1f\x16\x3b\xf3\xeb\xb3\x0b\xf5\x0d\xa3\xa0\xd8\x3c\xb0\xbc\xb7\xed\xd1\x21\x08\xe7\xab\xbd\x20\x94\x75\xbf\x5b\xd3\xdd\x95\x14\xb9\x5d\x49\xe9\x33\xc9\xa8\x5c\x7b\x3f\xe2\xb5\xdf\xe2\x43\xfc\x4d\xf8\x7c\x1b\xbe\xda\xf0\x65\x7c\x49\x6f\xf1\x25\x9d\xf8\xba\xca\xb5\x77\x85\x19\xe1\xfa\x7d\x64\x86\xd0\xdb\x19\x6a\xf9\x7a\xac\xcf\xb8\xb8\xf6\xa7\x99\x41\xbd\xdd\x46\x3b\x54\x11\x22\x7d\x9f\xb2\xf0\x59\x0d\xfe\xac\x2c\x8c\xe5\x21\x65\x61\xe5\x6f\x54\x16\xb6\x5b\x7c\xb8\xd4\x1f\x56\x96\xf0\xd7\x95\x85\x3b\xdd\xac\x24\x25\xfc\x8f\x69\x40\xe4\xd7\x35\x20\xa9\xdd\x22\x61\xf3\x77\x51\x7b\x3a\x93\x52\x7c\x80\x6f\xb7\x7f\x1f\xbe\x67\x2c\x2b\xb4\xa3\xab\x55\xd0\xcd\xba\xb2\x7c\xae\x68\x75\x82\x53\x1d\xe0\x22\xc3\x6c\x88\xaa\x48\x52\xd7\x61\xf4\x4c\x27\x38\x7d\x9d\xb2\x7e\x45\x39\x6d\x0b\x5f\xe6\x23\xeb\x3f\x32\xf6\x02\x01\x78\xfb\x3c\x67\x25\xd8\xe6\x3e\x84\xfc\x57\xcd\xec\x73\xd7\x44\xc0\xe9\x88\xc7\x83\x28\x0d\xaf\x52\x3a\x76\xe9\xa5\x57\x6b\x52\x1a\xa6\x61\x98\xc8\x1a\x76\x4f\x83\x5b\x9b\x3d\x78\x85\x61\x85\x28\xb0\x4b\x21\x80\x5c\xbd\x5a\xe5\x12\x24\x9e\x1e\x65\x52\x9e\x15\x61\x63\xe2\x64\xe4\xc6\xc7\x7d\x87\x19\x8e\xc4\xac\x2c\x41\x85\x3d\xea\xee\x1f\x2f\xcf\x0e\xaf\x9c\x43\x60\x5f\x01\xa4\xb9\x07\x74\x8e\xdf\x79\xe6\xf1\xc6\x04\x73\xe0\x82\xb2\x67\xbf\x06\x5e\x67\xbf\xe4\x81\x6f\xdf\x66\x11\xe3\xb6\xb3\xb7\xaf\x4f\xfb\xb8\x8b\x0a\x34\xed\x73\xb7\xf7\x2a\xa9\xa5\x5c\xfa\x7c\xd3\x8f\xcb\x0a\x7b\x99\xd3\x1f\x67\x8b\x1f\xe2\xe1\x57\x66\xcb\xef\xe4\xa9\xa4\x89\xdf\xbc\x15\xc1\xea\xd6\x8d\x4d\x74\x6d\x80\x57\xb6\xc8\x4f\x93\xe2\x8d\x13\x1f\xf5\x43\xb3\x2b\x79\x8b\xc5\xc1\x86\x92\x89\x86\x56\x4b\x1a\xda\x39\x13\xcc\xbf\xc6\x26\x3a\xaf\x50\xd6\x50\xd1\x6e\x89\x40\x51\xab\x56\x1d\x66\x8a\xda\x95\x55\x4e\x1a\x78\x47\x91\x37\x56\xfc\x9d\xbb\xbc\xad\x9a\x9c\x24\x01\xaf\x3e\xee\xa4\x92\xb3\x23\x96\xec\x69\xde\xb3\xca\x05\xef\x19\xb1\x14\x87\x4f\x5d\xdf\x29\x4f\x14\x90\xae\x33\xe7\xa8\x0a\xf5\xae\x3a\xab\xfc\xec\x3b\xb7\xfd\xa1\xef\xd0\x21\x3f\xa8\xff\x4f\x22\xbd\xf3\xec\x01\xcd\x0b\x28\x77\x34\x2f\x70\x3c\xa1\x79\xc1\xf2\x84\xe6\xad\xff\xf4\x93\xfe\x24\x5d\xf7\x27\x92\x92\xa7\xf1\x8a\x16\xbc\x57\xdc\x19\x7f\x18\xf3\x1f\x98\xf7\xbe\xd6\x1d\xca\x1b\x4f\x47\x46\x63\xf2\x19\x4d\x6e\x4d\x4c\x0e\xce\x74\x94\xfd\x20\x11\x02\x3d\x5c\xff\x2a\xf6\x67\xcf\x77\xd8\x9f\xa3\x3f\xc1\xfe\x5c\xd2\x31\xf6\x1f\xe3\x84\x94\xbd\x2a\x16\xc1\x9f\xab\x8a\x04\x9f\x55\x45\x63\x15\xad\xaa\x04\xf3\xb4\x40\xa0\x4d\xd1\xd8\x92\xca\xfc\xcf\x48\xc5\x70\x3e\x33\x3f\x69\x7a\xa4\x2a\x6e\x6b\xac\x8f\xd7\x80\xa3\x9c\x47\xf6\x96\x1a\xfc\x7e\xdf\x59\x6a\xbb\xc3\xc2\xd2\xf1\x09\x16\x96\x61\x2f\xf5\x9d\xab\x36\x1f\xd2\xab\x2f\xed\x0a\x7e\xa9\xeb\xfc\x48\xe3\x1d\x11\x37\x4c\x7b\xce\x62\x47\x59\xc6\xd1\x1b\x78\x13\x4f\xe7\xce\x82\xbf\x49\x5b\x7f\x00\xb3\xab\x53\xe1\xf9\xcd\xdb\x03\x1c\x6f\x3c\xee\x70\xbc\x09\x3f\xc1\xf1\xa6\x71\x8c\xe3\xbb\x72\xb6\xde\x7f\xf0\x3c\xd1\x5e\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x1e\x3b\x4f\x1c\x56\xc2\xda\xdb\xc8\x15\xd7\x7b\xde\xff\x27\x47\xe1\x73\x8e\xf6\xbb\xe7\xff\xfe\xd9\xf9\x7f\x32\xf0\x50\xc4\x07\xdf\xed\xb4\x36\x48\x28\x37\x2c\x9d\xaa\x47\xd1\xa8\x54\x40\x7d\x54\x36\x6f\x39\x87\x50\xc9\x36\x9b\xbf\x9a\x32\xa2\x92\x0f\x91\x9c\xda\x10\xe2\xc2\x7d\x9c\xf7\xf6\x81\x77\x3b\xa7\xca\x0a\x90\x51\x45\xc9\xb2\x65\x23\x06\x71\x82\xec\x2d\xa2\x52\xcd\x4d\x12\x68\xee\x64\x99\x7a\xef\xb5\x43\x49\xb9\x59\x63\x0e\x52\xac\xae\xa3\x0a\x5b\x1a\x1c\x19\xd9\x02\x4b\x36\x91\x14\x1d\x80\xe2\x9f\x00\x00\x00\xff\xff\x7b\x7c\x16\xb6\x80\x1e\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x41\x4b\x03\x31\x10\x85\xff\xcb\x9c\x73\x12\xf4\x90\xa3\x77\x4f\x1e\x4b\x91\xd9\xee\x54\x02\xd9\x99\xb0\xf3\xa6\xb2\x94\xfe\x77\x11\x5c\x4a\xb5\xd8\x15\x45\x7b\x0c\xbc\x17\xbe\x2f\x33\x59\xed\x69\x63\xea\x60\x05\x65\x8c\x21\x89\x8a\xb6\x80\x53\x5e\xed\x49\x79\x10\xca\xc4\x7d\x3f\x52\x22\x4c\x6d\x3e\x89\x3b\x1d\xd6\x69\x0e\x28\xa3\xec\xe4\x69\x60\x87\xbc\x25\x2d\xf0\xf1\x8e\xf3\xfd\xc6\x13\x77\x55\x28\x6f\xb9\xba\x24\x72\x30\xe4\x21\xc0\x5d\xa9\x05\x13\x65\xda\x15\x79\x39\x76\xb7\xa1\x1b\x14\x53\x3a\xa4\x2f\xc0\x3f\x81\xc1\xc0\xf5\x3e\x46\x95\xfe\x12\x5d\x14\xc5\xcd\xed\xdd\x6f\xd2\xbd\xb7\x17\xbf\x6b\x3a\x06\x06\x0b\xc5\x79\xb8\x53\x43\xee\x4f\xcd\x16\xd1\xab\xe9\x1c\xba\x06\x07\x8f\xee\xd2\x74\x3a\xb3\xba\x70\x34\xdf\x90\x5b\xb4\x3e\x8f\xd1\x5a\x9d\xfe\x61\x7d\x7e\xfa\x2b\x9f\x05\x7f\x43\xbd\x7e\x0d\x00\x00\xff\xff\x39\x77\x62\x59\x4d\x04\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xc3\x30\x14\x07\xf0\xef\xf2\xce\x39\x4d\x1d\x92\xa3\xe8\xc1\x83\x20\x6e\xe0\x61\xf4\xf0\xd2\xbe\x4a\x68\x9a\x84\xe4\x65\x2e\x8c\x7d\x77\x69\x99\x5b\x0f\xe2\x2a\xa2\xed\xad\xd0\xfc\x79\x3f\xfe\xbc\xb7\xd9\x43\xe9\x6c\x64\xb4\x0c\x92\x43\x22\x01\xda\xfa\xc4\x11\xe4\xa6\x10\x60\xb1\x25\x90\xc0\x8e\xd1\xac\x92\xf7\x26\x83\x00\x97\xf8\xf8\x62\xff\xf9\x00\x04\x70\xf6\xdd\x57\xd2\x96\x17\x37\x4b\x38\x14\x02\x3c\x66\x54\x86\x40\xd6\x68\x22\x09\x88\x8c\x4c\x4f\x89\x51\x69\xa3\x39\x83\x84\xad\xa6\xf7\x73\xb6\x4e\xb6\x64\xed\x2c\x1c\xc4\x37\xac\xd3\xd0\x0a\x19\xcf\x61\x95\x99\x62\x3f\xf6\xf8\x5b\x19\x6c\x68\xa1\x3a\xcc\x05\x73\x1f\xbd\x5a\xfc\x87\xd9\xa6\xf6\xeb\xae\x4e\x68\x57\x36\x6b\xdd\xd2\x8c\x7a\x1e\x65\x5e\xe9\x37\x4b\xe1\x92\x1a\xab\x2a\x50\x8c\xb3\x51\xaf\xfb\xc5\x2e\x5d\x18\xd5\xf7\xf2\xfa\x0f\xe1\x83\x6b\xdb\x3d\xec\xbc\x0e\xd8\x67\x26\x5f\x83\xa1\xeb\xf1\x7e\xfa\x53\x1a\x7a\x9e\x83\xdb\x52\xf5\xea\x42\x33\x7d\x4f\x3f\x5b\xbc\xb9\x35\x79\xd7\xa1\x5e\xa8\x1e\xa5\xba\xfd\x25\xaa\xf8\x08\x00\x00\xff\xff\x20\x8c\x4d\x0b\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x0d\x52\xeb\x3c\x0c\xbc\xd2\x4a\xb2\x64\xf9\x38\xfe\xbd\xff\x11\xbe\x71\x9c\x02\x6d\xf8\xca\x4b\x1e\xaf\x0c\x61\x18\xe8\xc6\xd6\xcf\x6a\x2d\xb9\x06\x87\x21\x40\xd9\x80\x20\x46\x30\x02\x72\xd0\x68\x00\x44\x63\x05\xe1\xe2\x93\x80\x60\x32\xf6\x87\xcc\x61\x42\x4e\x86\xd6\x1a\x85\xcd\x4f\xd2\x38\x51\x89\x1c\xd4\x29\x2c\xb4\x85\x1d\x2d\x8e\xde\x33\x6f\x28\xe9\xbe\x36\x60\xa4\x91\x47\x5f\x68\xca\x3b\x4a\x23\x21\x32\x6d\x28\x23\x2e\xd4\xa0\x6d\x68\xaa\x0b\xd5\xba\xd0\x94\xab\x4a\x2b\x65\xa1\xbe\xaf\xad\x65\x58\x6b\x75\xd9\xe5\xb2\xdb\x6d\xca\xb1\x4b\x58\x91\x71\xd7\x85\x76\x87\xaa\xcb\xf2\x26\xdc\x35\x6a\x99\x7c\x39\x46\xd3\x22\xc1\x41\x3a\x33\x29\xba\x78\x5c\xb8\x6e\xdc\x96\x3e\xf7\xf8\x50\x9b\x7b\x02\x94\x1c\xce\x4e\xb3\x02\x0c\x50\x22\x85\xe2\xf6\x26\x11\x24\x61\xc8\x47\xab\x1d\x07\xab\x24\xd3\x7f\x70\x88\x41\x7c\xf2\x02\x87\x43\x34\x61\xb7\x0a\x67\xd0\x03\xb2\xd5\x9e\x06\x68\x22\x9b\xaf\x80\x3d\x8a\xe5\x3f\x61\xda\x5a\xfa\x70\x24\x49\x9c\x36\xec\x3d\x5a\x17\x97\x2d\xfe\x20\x71\x7a\x58\xd1\xdf\x7e\x12\x6d\x3b\x38\xed\x9f\x8d\x10\x44\xef\x33\x9f\x99\x50\x22\xbb\xfd\x3d\xc1\x04\xd9\x91\x5f\xf2\xf0\x15\x13\x2b\x8b\xb7\x88\x34\xb4\xcb\xb5\xa0\x6c\xc7\x08\xaa\x9e\x8c\xc0\xc8\xee\x23\x88\x6f\xa7\xe6\xab\x87\xec\xcc\xda\x13\x99\x31\xc9\x21\x33\x16\x3e\x9b\x59\x7b\xac\x76\x3c\x46\xf5\x19\x76\x26\x52\xf3\x63\xa4\x91\x8c\x10\x53\xb8\x5c\x59\x4e\x9f\xe4\x9f\xaa\x11\x3c\xe0\xdb\x14\xcc\xf5\xa8\x1f\xae\x63\x7a\xe9\x76\x3d\xf6\x41\x07\xab\x42\x38\x59\xbb\xe4\xf5\xdb\xf2\x14\xc9\xc7\x88\xb6\x71\x93\x43\x79\xd0\xfe\x41\x0d\x5f\xea\x3a\x91\x5d\xdb\xf5\x75\x06\xdb\x14\xc4\x99\x33\x66\xa2\x89\x8b\x78\xaa\xbb\x35\xfa\x38\x03\xff\x66\x9e\x62\xd7\x00\xc2\xea\xd8\x6f\x9c\xc9\xac\xe8\xc6\x6e\x74\x48\x21\xbd\xb1\x3e\x1e\xfa\xa3\xe6\x41\x6f\x6f\x03\x92\x46\x69\xeb\xbd\xf4\xf5\xdf\xbe\x0e\xef\x6c\x4c\x9c\xe1\x44\xfb\x2e\x1a\x1f\x6d\xbe\x2b\x69\x4e\x8b\xcf\x94\x94\xd6\xaf\x5d\xe3\x32\xc7\x8e\x9c\xd9\x5d\xf6\x6c\xf9\x5f\xb0\xb9\x26\xe1\x36\xcf\xd8\xe7\x74\x66\x65\x97\x6d\xce\xd1\xbd\x46\xee\xf3\x9c\xdc\xcf\xc8\x00\x2d\x73\xfd\x8d\xa3\x32\xe6\x3d\x61\xce\xc3\xb9\xdf\x03\x76\x1b\x8b\xad\x35\x07\xf3\xd6\x9b\xf4\x8e\xa5\xf5\x7e\xce\xe4\x79\x5b\x5a\xb6\x7a\xdd\x6d\xc9\xf4\x6d\xdb\xcc\xdd\xfc\xcf\xd3\x33\xb3\xcf\x90\x4f\xb4\x5c\x14\x89\x6f\x75\xfc\x03\xad\x28\xca\x13\xad\xe8\xac\xfa\x69\xad\xa8\xe8\x05\xad\xac\x4f\x17\xf5\xc2\x92\x7b\xf2\x9a\xfe\xb9\x5e\xee\xec\xde\xdd\x72\x0f\x3d\xe5\x4f\xd8\xaf\xf9\x19\xfb\xad\x5f\x61\x7f\x84\x73\xec\x7f\x36\x87\xbf\xa1\x22\x05\xcd\xc2\xe0\x5f\x56\x11\x7b\x9c\xff\x77\x15\xb1\x1c\x2f\x54\xc4\x4a\x7b\xf5\x79\xf0\xee\x15\x43\xfa\x2f\x63\x3f\x2a\x3f\x61\x3f\x9a\x5d\x60\x3f\xc6\xfa\x6a\xf6\x6b\x2a\xae\x0c\xfd\xf1\x9b\x40\x1c\xcf\xfa\x8b\xe3\x4a\x7f\x71\x3e\xdb\x5f\x3e\x64\xff\x77\xb7\x82\x96\x95\xb4\x87\x9f\xbf\x61\xf9\xe3\xf7\xbf\x7b\x5e\x4b\xbe\xc2\x6b\xc3\x2b\x6f\x58\xe2\x43\x22\x79\xf9\x71\x2e\x53\xa8\x4f\xb8\x4c\x86\x0b\x5c\xa6\x68\xaf\xe4\x92\x63\xc8\x21\xd6\xf8\xcb\xba\x6d\x9e\xdf\x04\xfe\x97\xf9\x4c\xed\x02\xf3\x59\xe4\xd5\xdd\x96\x46\x62\x31\xa1\x1f\x57\x72\x2e\xf4\x8c\xcf\xaa\x57\xf8\x6c\xe5\x9a\x92\x81\x4c\xa6\xc6\x31\xc7\x1c\x59\xa0\xce\xf0\x16\xac\x62\x36\x50\x37\x21\xcf\x30\x2e\x39\x11\x79\x43\x13\xf2\x84\x52\x2a\xc5\x80\x66\x31\x96\x1c\x1d\xd0\xa0\x3e\xa8\x97\xdc\x6a\x97\x04\x70\xfa\x2f\x00\x00\xff\xff\xb1\xdd\x71\x7c\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x4b\xc3\x40\x10\x85\xff\xcb\x9c\xf7\x14\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x32\x49\x26\xb2\x64\x33\xbb\xec\xce\xc6\x86\xd2\xff\x2e\x09\xd5\xa2\x04\x1b\x04\xd3\xdc\x72\x98\x37\xf3\xe5\xf1\xde\x6e\x76\x50\x58\x0e\x82\x2c\x90\x8a\x8f\xa4\x40\xb3\x8b\x12\x20\xdd\x64\x0a\x18\x1b\x82\x14\x18\x45\xb7\xf4\x2a\xdb\x1b\x63\x8b\xfa\x89\x2a\x50\x60\xa3\x1c\xe6\x76\x9f\x63\xa0\x40\x3a\xd7\x7f\xe5\x9d\x50\xb8\x86\x7d\xa6\xc0\x61\x87\xb9\x21\x48\x2b\x34\x81\x14\x04\x41\xa1\x87\x28\x98\x6b\xa3\xa5\x83\x14\x5a\x4d\xef\x47\x69\x15\xb9\x10\x6d\x19\xf6\xea\x17\xb6\xaf\x9b\x1c\x9b\xa3\x36\x6a\x96\x8b\x64\x38\xfb\x9d\x3c\xef\xb9\x9f\x75\x43\xa7\xc0\xfb\x0d\xab\xcb\x85\x81\xdf\xdf\x4e\xf2\xfb\xb0\x60\x39\xdc\x6b\xfd\xc6\xe4\x4f\xb1\x63\x59\x7a\x0a\xe1\x1f\xd9\x47\x82\xfc\xe8\x6d\x4b\xe5\x8b\xf5\xf5\x94\x44\x24\x57\xab\x59\xf1\xac\xa0\x59\x47\xe7\x4c\x77\x7e\xba\x3f\x35\x6d\xf8\x81\xc2\xfa\x05\xf5\xad\x44\xc1\x1f\x85\x19\xc5\xc7\x9a\x92\xbc\xb7\xf4\xec\x95\x1b\x89\xed\xdd\xd6\x69\x8f\x83\x74\x82\xb1\x73\xd3\xcd\xf5\x4e\x65\x1f\x01\x00\x00\xff\xff\x46\xf2\x90\x9d\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\xd1\x71\xc5\x20\x0c\x5b\x49\xc6\x58\x36\xe3\x40\x30\xfb\x8f\xd0\x23\xe4\xf5\xb5\xfd\xe9\x5d\x2b\x7f\x24\xc8\x3a\x90\x44\x04\x88\x0a\x2b\x04\xaa\x52\xf6\xa9\x99\x13\x80\x9a\x5f\x10\xfc\x11\x0d\xa8\xd4\xf5\x40\x18\xa0\xd6\x3e\x87\x7b\x69\x52\x89\x9a\xe6\x9b\x0b\xbf\x74\x8e\xc1\xcd\xb1\x98\xdb\xd8\x6f\x07\xd6\xb4\xa1\x35\x20\x46\xd8\xe3\xe8\xb0\x06\xde\xe3\x34\xda\x00\xde\x3a\xce\x9f\x3a\xaf\x84\xc7\x4b\xb7\xbf\x0a\xff\x74\xf5\x1b\x84\x6f\xcf\x77\x4b\x12\xf2\x35\xd3\x7f\xfa\x41\x09\x39\xad\x43\xb6\xe7\xe7\x7e\x84\x42\xe3\x66\xc2\x03\x3a\xc4\x4e\xb6\x39\xbe\x67\xb3\xbe\xe4\xb5\xcb\x34\xd7\x79\xb6\x9a\xe7\xef\x51\x9d\x21\xd0\x85\xc6\xe2\xdd\xbb\x17\x85\x45\x01\x33\x73\x4e\x40\xa4\x65\x5b\xcb\xda\x48\x5e\x0d\xb9\x04\xac\x6b\xad\xd9\xfb\x88\x71\xc1\x6c\xe4\x5c\xdd\x5a\x89\x64\x9f\x97\x69\x83\xf1\xda\x11\xda\x47\x00\x00\x00\xff\xff\x37\x3e\x41\xaa\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x69\x9a\xeb\x38\x08\xbc\x52\x01\x62\x3b\x8e\xd6\xfb\x1f\x61\x3e\xd9\xce\xf2\xde\xf4\xa4\x3b\x99\xaf\xe5\x1f\x56\x80\xb0\x54\x01\x36\x04\x0c\x05\xca\x06\x14\x31\x82\x11\xa0\xae\x6e\x00\x44\xbd\x83\xf0\xe1\x49\xa0\x98\xac\xeb\x90\x05\x4c\xd8\x65\x95\x2c\xa0\x72\xc4\xe9\xea\x5b\x1a\xb3\x56\xab\xfd\x92\xa6\x9f\xd2\x2e\xa5\x23\xa6\x9e\xd2\xd1\xd5\xb5\xed\xac\x02\x6b\x68\x93\x12\x20\xdd\x1a\x8b\x33\xdb\x53\xae\x47\x05\xa9\xbb\x9e\x80\x18\x24\x08\x94\x08\x04\x64\x4b\x41\x49\x96\x30\xf0\xbe\x22\x39\x0f\xad\xe8\xdf\x32\x3d\x1e\x23\x90\x88\x9a\x36\xe0\x39\x6a\x95\x7f\x47\xed\xf6\x5e\xd4\x7b\x04\x6e\x65\x47\x38\x98\xa0\x40\x70\xd0\x66\xe4\xb0\xa5\xc3\xe6\xd2\x24\x41\x12\x4b\x9e\x33\x99\x5f\xd4\xbf\xc8\x08\x62\xeb\x4f\xaf\x7e\x67\xe3\xbb\x43\xf6\x8e\xed\xf7\xd9\x1e\x28\xb6\x47\x4e\xef\x78\x17\x79\xc7\x9a\x0a\xe9\x81\x0b\x8d\xb1\x71\xd9\x99\xf8\x42\x74\xf1\xac\x9f\xb6\x32\xce\x0a\x51\xb0\x71\xbc\x58\xdc\x2c\x41\x82\xb7\x86\xea\x03\x83\x80\x2f\x63\x57\x4b\xeb\x5e\x2c\x6d\x4a\x65\x98\x7a\x98\x9a\xb8\x7a\xb1\xe5\xcc\x70\x36\x75\xda\x76\xfb\x66\xe5\xef\x78\x8a\x17\x98\xee\x09\xc0\x3b\xb8\x98\x70\x49\xab\x29\x35\x24\xe4\xf2\x26\xcf\xf3\xf9\x7f\x66\x1d\xfc\x07\x42\x72\xeb\xf8\xdb\xfb\x09\x9d\xe7\xde\xe6\x6b\x02\x80\x7b\x7d\x21\x7b\x76\x8e\x7e\xf6\x80\x34\xd2\xab\xcf\x79\x6f\x8b\xe7\x3e\xd7\xba\xe8\xa1\x75\xa8\xcb\x38\xf5\x32\xcf\xdb\x65\x77\x3c\xa7\xcf\x9d\x8b\x2f\x8e\x29\x5c\x6c\x05\x94\x74\x69\xa7\x39\x32\xbc\x91\xc8\x5c\xbc\x28\xa5\x48\x36\xd6\xda\x5b\xb5\xaa\xd3\x72\x31\xe5\x8c\xb4\xd5\x73\x90\x67\xf0\x4f\x27\xb5\x9e\x15\xda\xb9\xb9\xde\x65\xac\x0d\x52\xcc\x59\xef\x7c\xf1\x2f\xf1\xc5\xff\xcd\xd7\xad\x2a\xfe\x9e\x21\xe1\xf1\x82\x21\x29\xf4\x9a\xa1\xd3\xff\x96\x33\x82\xe8\xfa\xd7\xed\x5b\x74\xfa\x7c\x6c\x55\xa5\xaf\xb7\xe9\x7e\x5f\xbf\x3e\x44\x3d\xb9\x92\xad\x51\xaf\x7a\xe9\x37\x30\xff\x19\x9e\x43\x5f\xe1\x39\xf3\x13\x3c\xd7\xfa\x00\x4f\xec\x4f\x58\x25\x53\x63\xaf\x5e\x9d\x05\x1a\x0c\x48\xef\x9e\xde\xca\xf4\xac\x6d\x25\x79\x0a\x97\x3e\x65\xd1\xea\x8d\xc7\x9c\x90\x61\xd1\x74\xe5\x30\xa3\xea\x6a\xdd\x94\xa3\x69\xca\x58\xd9\x00\xce\x7f\x02\x00\x00\xff\xff\x01\x28\xae\xea\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xc1\x8e\xe2\x30\x0c\xfd\x97\x9c\x7b\x62\xb5\x7b\xe0\xb6\x42\xda\x1b\xab\xd5\xae\xf6\x84\x38\xb8\xa9\x61\x22\x52\xa7\x8a\x1d\x50\x85\xe6\xdf\x47\x30\xd0\x66\x86\x8a\xa0\x0a\xa6\xe5\x58\xd5\x4e\xde\xb3\x9f\x5f\xbc\xd8\x2b\xed\x88\x05\x48\xd4\x74\x05\x96\x31\x53\x86\xaa\x20\xac\xa6\x8b\xbd\x22\x28\x51\x4d\x15\xa3\x5d\xa9\x4c\x49\x5d\x1d\xbe\xa0\x28\x3c\x32\xab\xd7\xac\x09\x20\xdc\xcd\x81\x05\x7d\x47\xd4\x32\x6b\x8f\x91\x26\xca\x05\x39\xdd\xb2\xcc\x54\x05\x35\xe4\x16\x1b\x04\x2c\x20\x38\x0f\x02\xb9\xb1\x46\xea\xc3\x05\x8e\xce\x41\xcd\x0d\xab\x40\x5a\x8c\xa3\x23\x90\x96\x85\xf8\xd0\x8f\x44\xe0\x04\x7e\xc3\xff\xf9\x13\xf8\x26\xb9\x4d\xcc\x9d\xb3\xc7\xac\x34\xab\xad\xc1\xdd\xe3\xf8\x6c\xb0\x8e\x50\xd5\x82\xfc\x6d\xf2\xa1\x1d\xe2\x3c\xac\xf1\x97\x4b\x53\x8a\x92\x87\x66\x95\x5b\xa7\x37\xbf\x43\x99\xc7\xcd\x0a\x86\x64\xf2\xfd\x47\xcc\x0e\x09\xfd\xba\x4e\x31\x8b\x13\xef\xc4\xac\xff\x14\x25\x05\xe8\xb1\x74\x5b\xbc\x10\xe1\xc0\x13\xd4\xe2\xd3\xc1\x7b\x24\xf9\x57\x39\xe2\xb4\xaa\xe2\x03\x06\xaf\xbd\xf6\x58\x18\xe9\x10\x46\x1b\xe2\x51\xbb\x2d\xfa\xfa\x2f\x08\x5e\x95\x1e\xa3\xcc\x8e\xc7\xfd\xb1\x40\x0f\xed\x54\x7f\xbe\xfc\xde\xa3\x9f\xa7\x3f\xd7\x6d\xdb\xa2\xee\x6c\xea\x68\xac\xfb\x56\x53\xc8\xc1\x02\x69\x7c\x02\x57\x88\xca\x3f\xbe\xc2\x47\x13\xdf\xad\xf3\xfb\x8e\xd5\xe0\xe6\x90\x34\x66\x28\x8a\xf1\xba\xf2\x0b\xf0\xcc\x15\x49\xd1\x0f\xbc\xb7\xb4\x78\xcb\xcb\x1d\xf1\x6b\x5e\x8f\xc7\x6d\x8e\x87\x80\xd9\x79\x14\x9e\xc7\x7a\x02\x8d\xd0\x7c\x7a\xbd\x61\x86\x6f\x5c\x4a\xee\x30\x05\xcb\xb7\x00\x00\x00\xff\xff\xd4\xdb\x0e\xad\x55\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x09\x92\xa3\x3a\x0c\xbd\x92\x76\xdb\xc7\xf1\x7a\xff\x23\xfc\x32\xd0\xd9\x98\x26\x31\x3d\xe1\xa7\xa6\x49\x6a\x2a\x1d\x8d\xc1\x96\xf4\xf4\x2c\x09\xc7\xc0\x83\x81\x80\x92\x01\x08\x1b\x82\x21\x40\x43\x75\x06\x00\xac\x2e\x03\xc2\xce\x57\x00\x10\xe3\xb6\xbc\xd0\x3c\x18\x03\xb2\xf3\x49\x3d\xca\x34\x8f\xa9\x9b\xa4\x54\x84\x4b\x9e\xa5\xa8\x61\x91\x4a\x75\x51\xd4\xcd\xd2\x22\xb3\x14\x6b\xd0\x54\x45\x27\x29\x09\xce\x52\xa2\x40\xbe\x58\x9a\xa5\x91\x16\x29\x17\x9f\x5d\x99\xa5\x0c\x3a\x4b\xd9\x34\x34\x5f\xcb\x2c\xf5\x7e\x91\x7a\x87\x31\xb4\x65\x6c\x69\xb3\xd4\x8a\xcf\x5e\x43\x9c\xa4\x22\xcb\x7d\x9d\x59\x96\xc6\xf3\xca\x24\xf2\x2c\xf5\x50\x9a\x68\x92\x59\x5a\x17\xdd\x7c\x8e\x9c\x44\x66\xdd\x54\x16\x2d\x82\xb2\xcf\x92\x78\x96\x46\xb7\x48\x6b\x41\xe5\x0c\x93\xd4\x60\x99\x2d\x87\x2c\x2d\x0b\xce\x52\xbf\x68\x91\x4b\xa1\x18\x42\x9b\xa5\x2d\xcf\xd2\xe2\x1d\x33\xc7\x3c\x49\x1d\x37\x75\x9a\xba\x27\x3d\xb4\xa2\x89\xc5\x03\x6a\xb7\x66\xbf\xf7\x55\xae\x30\xd9\xbd\x4b\xc4\x03\x1b\xb0\x47\xc0\x00\x1e\x7c\xc7\xc0\xc5\x87\xcf\x5e\x68\xa1\x2f\x1b\xfa\xb5\x81\xc2\x74\x87\x9f\x5d\xaf\xd3\xbb\xeb\x92\xa2\x9a\x26\x80\x5b\x2d\x4c\xd7\x5a\xa4\xf8\xc1\x5a\x44\xe5\xae\xc5\x14\x71\xe8\xc1\x13\xea\xfc\xf6\xd8\x23\x70\xba\x06\xa7\xb1\xcb\x88\x80\xc0\x01\x1a\xdf\x6a\x5d\x61\xa5\x35\x11\xbf\x47\xeb\x3e\x0f\x86\x0d\x8d\x92\xb9\x7b\x8d\xbe\xae\xf8\xfa\x1c\xd0\x8c\xa4\xac\x35\xf3\xf9\x3d\x9a\x7d\xab\x51\xd6\x07\x8d\x46\x34\x88\x75\xa5\x01\xc3\x9b\x7c\xf3\x57\x10\x59\x24\xad\xe2\x8a\x11\xd7\x5a\x88\xfd\x7d\x2d\xbe\x56\xd1\xc3\xfb\xde\xe6\x23\x77\x1d\x19\x3b\xe0\x4b\x0e\xb2\xb6\x42\x29\xc7\xa0\x71\x0b\xa1\x88\xba\xe6\x42\xae\x69\xb5\x5a\x11\xf8\x5c\xe4\x21\x17\x58\x69\x21\xb2\x8e\x1f\xf1\x07\xd9\xfc\xb2\x32\x07\xb0\x9b\x01\x24\xb6\xb5\x06\x55\xde\x18\x3b\xae\xc9\xda\x8e\x6d\xbd\xbf\x2b\xbd\x61\x7f\xbf\xac\x22\x38\xbd\xb3\x19\x5f\x6d\x76\x67\x3f\x5a\xae\xf8\xde\x82\xaa\xeb\xfd\xad\x03\xfe\x73\x91\x1c\x6d\x8d\x64\x4d\xbc\xd6\xa2\xfa\x37\x7a\xa0\x04\xf8\x71\x6e\x61\xb0\x8e\x3f\x93\x37\xec\x5f\x97\x55\x57\x6b\x1f\xc7\xfc\x16\xd6\xfb\x9f\xd5\x37\xec\x7f\x7f\xcd\x8a\x4d\xea\x6e\xc6\x72\xe0\x57\xda\x3a\x7e\x03\xe7\x7e\xad\x96\xc0\x68\x15\x2f\x4e\xd6\xfb\x97\x8b\x1f\xbc\x7f\x11\xd6\xfd\xb9\x3c\x0f\x21\x77\x28\x26\x50\x7c\xb7\x9d\x6f\xa2\x4e\x61\x6c\x26\x86\x91\xd1\xc6\xa0\x21\x28\xd4\xe0\x65\xd1\x91\x6e\xeb\xfd\x9f\xf4\x0e\x60\x41\x30\x08\x1c\xcc\x0a\x04\xd7\x3d\xac\xa3\x6e\xc2\xa4\xf3\xc0\x09\x75\xc1\xaa\x8f\x0f\xfc\xa0\xb1\xe1\xf5\x7f\x93\xea\x1c\x3f\x1d\x6b\x75\xfe\x6b\x19\x77\xb3\xf7\x75\x39\x81\x47\x5c\xae\xca\x77\xf8\xbf\xa2\x5d\xf1\xcf\x08\x1c\xc3\x84\xa6\x8e\x4c\x43\x08\x36\x45\x7b\x5f\x81\x6b\xe0\x33\xbb\x10\x77\x3b\xe9\xce\x47\x70\xdd\xed\x81\x3d\xcd\x76\xbd\xc9\x02\xc0\x35\x23\xa7\x16\x2c\x3b\xb1\x60\x95\x23\x81\x63\x53\xcb\x66\x04\xd6\x1c\x11\x58\x31\x74\xec\xc4\xb4\x7f\x73\x64\xea\xb0\x5f\xd3\xff\x32\xe9\x77\x53\xd8\x88\xad\xa2\x69\x14\xc3\x18\x7d\xa2\xe8\xc8\xb3\xe7\xe5\x6e\xfc\x26\x14\x0f\xc5\xe2\x3e\x14\x1f\x12\x29\x97\x1c\x0e\x9e\xc7\x4a\x64\xb7\x11\x2b\xb1\xb3\xfe\x56\xac\x4c\x6f\x9b\x7b\x58\xa3\x9e\x65\x34\x46\x08\xc5\xcb\x85\x9f\x4e\xcf\x6e\xce\x71\xf5\xec\x0b\x2c\x98\x48\x36\x3c\x9b\xd8\xef\x60\xc1\x74\x5f\xff\x3d\x67\xc1\xfe\xd9\xbf\xff\x04\x27\x14\x2a\xd7\xd6\xe8\x5f\xc1\xc9\x46\x07\x6e\xc4\xbf\x19\xb7\xfc\x9b\x69\x8f\x7f\x33\xff\x0f\xfe\x45\x2a\x0a\xd4\xfe\x19\x1e\xb8\x5d\xfb\xdd\xf3\x95\x7d\x7e\x2e\x8f\xf9\xff\x9d\x9f\x0b\xe6\x1d\x7e\x2e\x4c\x3f\xf3\xf3\x01\x19\x72\xf5\x7a\x66\xc8\xcf\xc7\xee\xca\x90\x2b\xd3\x06\xa6\x6a\x4f\xef\x86\x31\x55\x35\x1f\x92\x21\xd7\x16\xce\x0c\xf9\x6a\x19\xe3\x90\xbc\xb4\x1c\xd2\x99\x21\xbf\x3a\xc7\x10\xff\xb6\xbc\xc5\xbf\xad\xec\xe1\xdf\xd6\x06\xf9\x77\xc6\x3e\x82\x73\xc7\x61\x1f\xf9\x19\xf6\xad\x5a\x73\x42\x53\xcf\xc8\x69\x8f\x04\x47\xdb\xf3\x3d\xc3\xfe\x4f\xf2\x08\xad\x14\xc5\xc5\x6b\x14\xfc\x0a\x2e\x47\xc4\x0d\x7c\x22\xd2\x0e\x7c\x22\xca\x9e\xfc\x60\xfe\x36\x9e\x1d\x0c\x8d\x9e\xb3\x03\xa4\x70\x64\xff\x4c\x7f\x15\xa2\xa6\x53\x3b\xdf\x22\x8a\x74\x47\xff\x0c\xc9\x0e\xe9\x9f\x21\xc3\xd9\x3f\xbb\xb1\x8c\xb1\x25\x29\x19\x52\xee\xd5\xd5\x25\xcb\x95\x37\xe1\x58\x0e\xc8\x0f\xbe\x7b\x72\xc9\x57\xfc\x3d\xef\x7b\x21\x3f\x3e\xff\xbb\xc3\x38\x67\xf7\x42\xdf\xeb\xa0\x4a\x08\x15\xe2\x59\x09\x3d\x1f\xbb\x8b\xeb\x24\x6d\xf4\x3f\x51\xf2\x93\xfe\xe7\x1f\xb9\x4e\x2a\x1e\xc2\x75\xea\xea\xc9\x75\x57\xcb\x18\x9b\x46\x4b\xc5\xce\x67\x05\x2f\xcf\x31\x52\x09\xa1\x3d\x9e\xff\xbb\x8b\x15\x33\xdc\x11\x2b\xe6\xdc\xae\x4a\x68\x3a\x51\x7b\x58\x25\x64\x43\x95\x10\x3b\xb0\x66\xd5\x71\x8f\x83\xef\xe6\x7b\x67\x25\x94\xa0\xa2\xf7\x12\xcf\x8e\xea\x1f\x71\xec\xd2\x56\x7e\xeb\xf2\x9e\xfc\xd6\x95\xc1\xfc\x76\xd5\x51\x1d\xf4\x71\x0d\x3e\x71\xf3\xe2\x89\x4f\xae\x7b\x69\x8e\x21\x8c\xf8\xbc\x95\x1f\xfa\xf2\x24\x3f\xfc\x23\x46\x7c\x2d\xbb\xb8\x2e\x38\x3a\x90\xeb\xe2\x53\xae\x43\xcb\xd3\x1e\x8e\x26\x2e\x3c\xf2\x5d\xdf\xdb\x1f\xe7\x7b\x81\xeb\xec\xeb\x77\x10\xe3\x5c\x97\x25\x51\xf1\xff\x52\xde\x2a\x13\x26\x36\xd0\x19\x71\xa3\x7f\x8f\x91\x5e\xee\xdf\xcb\x15\x9d\x91\x5f\xee\xdf\x6f\xb0\x1a\xde\xfd\x3b\xa6\x3e\x4a\xe1\xac\x8f\x5e\x18\xbb\xab\x3e\x4a\xb2\x55\x1f\x25\xdd\x53\x1f\x25\x77\x4c\x7d\x94\xe1\xac\x8f\x6e\x2c\x63\xec\x03\x96\xf3\x2c\xd5\xc8\x1c\x43\x39\x43\x2e\x5b\xf5\x51\x6e\x7b\xea\xa3\x02\xfb\xea\xa3\xe2\x3f\xab\x3e\x7a\xc8\x19\xfa\xa7\xc9\x63\xae\x70\x3b\xdf\x5b\x9f\x14\x05\x8b\xad\x25\xfd\x65\x4f\x8a\x2a\x6d\xe1\xb3\xca\x1e\x7c\x56\x1d\xc4\xe7\xfd\x93\xa2\x3d\xde\xbb\xec\xc4\xbf\xcb\x7b\x0d\xf2\x86\xf7\x1a\xc1\x0e\xef\x35\xb6\xa3\xbd\x97\x8b\x34\x22\xf0\xff\x4a\x6f\xe2\xb3\xf6\x20\x02\x6c\xdf\xa3\x84\x80\x79\x1c\x25\x04\x12\x8e\xed\x6d\x80\x44\x57\x8b\xf3\x67\x6f\xe3\xd5\x39\x86\x30\x82\xbc\xd1\xff\x22\x94\x1d\xfd\x2f\x42\x1d\xec\x7f\xcd\x79\x0a\x2d\xbf\x96\xff\x98\x3c\x65\xe9\xe3\x6e\xf7\x34\x6e\xe7\x7b\xbd\xb7\x31\x7e\x9e\xc5\x77\x03\xa5\x93\x29\x5f\x9d\x63\x28\x0a\x28\x6d\x9c\x9f\x26\xca\x3b\xce\x4f\x13\x95\x1f\x9d\x9f\x06\x88\x68\x6a\xe4\xa2\x8b\x8e\x18\xd4\x13\x04\xce\x1a\x6a\x32\xc5\x1c\x28\x34\x57\x5d\xe2\x64\x49\x72\x80\x5a\x2b\x48\x62\x17\xb5\x28\xd7\x5a\x82\x57\x0e\x41\x43\x2c\x25\x80\xd6\x0a\xd1\xa5\x08\x40\xe1\xbf\x00\x00\x00\xff\xff\x24\xd9\x8f\x4a\x46\x46\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x41\x6b\x84\x30\x10\x85\xff\xcb\xd0\x63\x4e\x96\xf6\x90\x6b\xcf\x85\xd2\xd2\x93\x78\x98\x9a\x29\x04\x74\x22\x99\x89\x6d\x10\xff\x7b\xa9\xc8\xae\x8a\xc2\xb2\xbb\xd7\x64\xde\xf7\x3e\x5e\x39\x00\x72\xe0\xdc\x86\x24\x60\xbf\xb1\x11\x32\xe0\xb9\x4b\x2a\x60\xcb\x01\x3c\x3b\xfa\x25\x07\x56\x63\x22\x03\x8c\x2d\x81\x05\xa6\x9f\x57\x14\xa5\x08\x06\x34\x77\xff\x4f\xe8\x5c\x24\x11\x18\xab\xd3\xd5\xc3\xf6\x86\x7a\x62\x85\xd1\x5c\xda\x39\x7f\xcd\xb8\x3a\x92\xf3\x7a\xa6\x25\xcf\x5a\x3c\x3d\x4f\xbc\x83\x48\xa4\x3a\xf4\x14\xf3\x3b\x2a\xed\x04\x17\xaa\x2f\x13\xfc\xad\x41\xbe\x5e\x77\x35\x51\x92\xdd\x75\x8e\x5d\xb1\x56\x1f\x16\xed\x5f\x59\x49\x1e\x8b\x95\xe5\xa7\xdc\x32\xe7\xca\x4f\xba\xc0\x12\xee\xaf\xf8\xb1\xe5\xce\x96\xd5\x5f\x00\x00\x00\xff\xff\x76\x2a\x30\xb8\x6a\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xc0\x01\x01\x44\x21\x08\x03\xd0\x4a\x13\x91\xf1\xe3\x4c\x90\xfe\x11\xae\xc2\x3d\x6e\xfc\x69\x63\x79\x20\x11\x70\x1c\x0b\x00\x89\x69\x40\x2b\x4e\x18\x45\xd1\x36\x4e\x1a\xa4\xb2\xce\x7b\x74\xdb\x4e\xf9\xac\xcd\x92\xa7\xed\xe9\xba\xd1\xf4\x05\xde\x60\xb6\x3f\x2a\xb3\x62\x44\xdd\xb7\x0c\xed\xa3\x2f\x00\xfb\x7e\x01\x00\x00\xff\xff\x18\x59\xb7\x52\x98\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\xeb\x9b\x40\x10\xfd\x2e\x7b\xf6\xf4\x2b\xed\x21\xb7\x36\xd0\x5b\x4a\x69\xe9\x29\x84\x32\xae\x93\x74\xc9\x3a\x2b\x3b\xb3\x06\x09\xfd\xee\xc5\x80\x51\xaa\x54\x4d\xfd\x93\x1c\x85\x99\xf1\x3d\xde\xec\x7b\xb3\xbf\x2a\xed\x88\x05\x48\xd4\xe6\x08\x96\x31\x52\x86\xb2\x20\xac\x36\xfb\xab\x22\x48\x51\x6d\x14\xa3\x3d\xaa\x48\x49\x91\x95\x5f\x90\x24\x1e\x99\xd5\xef\xa8\x2e\xc8\x1c\xb1\xf3\x1d\x35\x87\xa8\xaa\x21\x10\x93\xe3\xcf\x40\x75\xb1\x0b\xf2\xf7\xaf\xea\x11\xb1\x73\xf6\xd6\x9f\x41\x01\xb1\xc5\x3b\x3e\x16\x10\xdc\x05\x81\xd8\x58\x23\x45\x39\xda\x51\x55\x74\x6f\x3f\x06\xd2\x62\x1c\xdd\x60\xd6\x1c\xc5\x87\x31\x14\x5b\xf0\x53\x60\xc1\x5e\xec\xcd\xfe\x7e\xf8\xb9\xc1\xcb\xd4\xc0\x6b\x6d\x62\xeb\xf4\xf9\x4b\x48\x63\x6c\xe8\x13\x0c\xc9\xbb\xb7\x0e\x7e\x48\xe8\x4f\xc5\x47\xf9\x54\x76\xf5\xd1\x2c\xa7\xbc\xbd\xff\x30\x25\xcd\xc7\x77\x90\xf0\xb2\xab\xc4\xe9\x95\x91\x51\x76\x6d\x25\x57\x5e\xb6\x9a\xcb\x19\x8b\xc6\x43\x28\x04\xb9\x53\x2c\x16\xe7\xe1\x84\x9f\x07\x3c\xa6\xc6\x8c\xb5\x17\x32\xf0\x30\x8d\x0c\xff\xe0\xfe\xa7\x36\xc2\x26\xe6\xa0\xd5\x42\xfd\x0b\x78\xeb\x12\x7c\x35\xd8\x3a\x78\x8f\x24\xdf\x87\x79\xf3\x33\xf9\xdb\x88\xec\x31\x3c\x90\xdf\xd4\xea\x2c\x92\xac\x8c\x16\xf5\x50\x05\xe7\x49\xd7\xc7\x79\x6a\x8f\x89\x91\x8e\x68\xa9\x4b\x3c\x6a\x97\xa3\x2f\xbe\x81\x60\x77\x06\xb5\x3c\x7e\x7b\x9b\xfa\xd5\x02\xcd\xea\xf3\x8f\xd3\x1e\xea\x85\x90\x24\x13\x9b\xe1\x53\xd1\xf3\x98\xba\x1c\xd7\x63\xf8\xdf\xee\xd9\xbd\x67\xff\x3a\x99\xa2\x65\xee\xa9\x85\xce\xc6\x18\x2c\x90\xc6\xf5\xee\xc6\xd9\xaf\x91\xb2\x6e\x5b\x99\xd4\xeb\x5c\xc5\x63\xf2\x63\xe1\xe4\x38\xfc\x09\x00\x00\xff\xff\xb1\x59\x01\xf8\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin-runtime": compiledPrototypeeventBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.abi": &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime": &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

