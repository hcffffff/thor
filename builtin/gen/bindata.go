// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x6e\xb3\x30\x10\x84\xdf\x65\xcf\x3e\xfd\xff\x8d\x5b\x1f\xa0\x97\x5e\xa3\x08\x19\xbc\x44\x96\x60\x17\x79\xd7\x14\x14\xe5\xdd\xab\x44\x80\x49\x45\x52\x52\x35\x95\x7a\x4d\x76\x67\xbe\x19\xdb\xec\x8e\x50\x32\x89\x5a\x52\xc8\x2a\x5b\x0b\x1a\xf0\xd4\x46\x15\xc8\x76\x47\x20\xdb\x20\x64\x90\x8b\x3f\x10\x06\x30\xa0\x43\x7b\xfe\xc1\x3a\x17\x50\x04\x4e\x7b\x33\xcd\x04\x6c\xb8\x43\x30\xc0\x51\xc7\xfd\xbd\x81\xd6\x0e\xb6\xa8\x71\xd6\x16\xb5\x8a\xaf\x51\x6d\xe1\x6b\xaf\x03\x64\x40\x4c\xd3\xd0\x2c\x5f\x45\x2a\xd5\x33\xc1\xc9\x2c\xf9\x34\xc4\x25\x5e\xf2\xae\x7c\x10\xbd\xb2\x9e\xd1\xd7\x99\xbf\xc6\xea\x3c\xbe\x3f\x0a\xf4\x50\x5f\x84\xfd\x5f\x43\x3e\xe0\x0d\xe2\xda\x8b\xa2\x4b\xbb\x05\x73\x7d\xf1\x1d\xff\x47\x72\x1c\x84\xd7\xd4\xd3\x90\x77\x48\x7a\x4e\x92\x64\x06\x45\xf9\xff\x6f\x39\x64\x4b\xf5\x1d\x7e\x76\x7a\x5a\x3d\x29\x3b\xf6\x58\x46\xbd\x44\xf8\xed\x23\xfb\xc6\xb3\x4c\x85\xe5\x9b\xba\xcf\xef\x94\x9f\x3a\xb0\xce\x3d\xe1\x7d\x5b\x62\x1a\x1a\x8e\xb2\x96\xd4\x93\xc3\x1e\xdd\x74\x30\x23\xc8\xbd\xdc\xf3\xc6\x28\xb6\xe9\x0a\xde\x58\xda\xd4\xca\x8b\x5b\xdc\x7c\xec\x90\xf4\xc7\x63\x25\xb3\xb7\xe9\x2b\x7b\xed\xb7\xff\x08\x00\x00\xff\xff\xbd\xc0\xe9\x35\xc8\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x0b\x76\xdb\x30\x0e\xbc\x12\x3e\xc4\x00\x3c\x0e\xbf\xf7\x3f\xc2\x3e\x4a\x72\xe2\x34\x8d\x6d\xb9\x6b\x6f\xdf\x56\x7a\x8e\x14\x90\x04\x41\x60\x00\x0e\x05\x0a\x02\x25\x32\x01\x51\x52\x30\x81\x89\x3c\xcc\x41\x44\x6a\xde\x88\xe9\xc9\x2b\x13\x25\xe8\x3c\x2e\x46\x10\x54\x32\x65\xe9\x34\x38\x6d\xf3\x74\xf3\x25\xd5\x3e\x53\xef\x33\xed\xd2\x46\xbb\xb4\x54\xd7\xa1\x8c\x4d\xca\xec\xbb\xb4\x49\x6d\x32\x66\xdb\xa5\xb9\x1c\x52\x4d\x8d\x62\xd8\x26\x95\x24\xbb\xb4\x37\xa2\x9c\x6a\xec\xd2\x9c\xcd\xad\xae\x75\x05\xcd\x6e\x55\x53\x10\xdb\x9a\x31\xf2\xbe\xde\x5d\x6e\x9b\x0f\xea\x58\x1e\x09\x52\x90\xc6\x9a\x89\x82\x62\x79\xe4\x63\x45\xf7\x2e\x46\x26\x90\xd0\x1a\x9b\x25\x73\x26\xdb\x6e\x30\x29\x15\x83\x55\xa2\x6b\x2b\x5a\xfb\x6e\x45\x5f\x2d\x48\xb1\x7a\x6f\x71\xe2\xa0\x90\x33\x36\x9c\xe9\x1b\xbc\x70\xb0\x59\xcc\x9b\xa5\xc7\x8c\x99\x49\x33\x4d\xbd\xb2\x96\x45\xbf\x59\xcb\x16\x2f\xf4\x19\xc6\xf8\xfb\xbc\x50\xf0\xdd\x0b\xbd\xbe\xd0\x0b\xde\xfa\x17\x2f\x18\x1f\xf7\xa7\xd5\x91\x5e\xef\x99\xd0\xb5\x6a\xce\x8c\xcb\xf3\xaa\x4d\xbe\xdb\x94\x93\xd1\xe5\xbe\xe1\x4f\x49\xe3\x9b\x3f\xc5\x1c\x4c\xd1\xf1\xd7\x45\x5f\x8a\x7d\xb3\x56\xe9\x05\x39\xf0\xdf\x18\x7f\x89\xd3\x8f\xc8\xca\xde\x2e\x35\x69\xad\x83\xe5\xd3\xeb\x67\xe6\x56\x3d\xd3\x9b\x53\xac\xb9\x13\x0f\x73\x23\xa5\x33\x63\xa1\x24\x3d\x12\xa8\x86\x1c\x51\x92\xeb\xfd\xe6\x4f\xf6\x2e\x92\x1d\x07\x94\xe8\xcd\x68\x93\x0f\xc4\x85\x2e\x04\x6d\xf8\xf2\x20\xad\x6c\x07\xee\x74\xf0\x57\xdc\x59\x99\xfc\xd9\x3a\xcd\x5c\xfb\xde\xae\x63\x7f\x3b\xfa\x5d\xe5\xdf\x92\x0b\x05\xf3\x3e\x2a\x51\xbd\xd6\xf9\x89\x5c\xe3\xdf\x23\x86\xcd\xea\xca\xf1\x35\xb6\x6e\x7c\x61\x69\xf5\x49\xd1\xd4\x73\x79\xda\xf1\x5f\xfc\x4e\x97\x8a\x12\x4c\x1a\xb2\x5a\xf4\xba\xd2\x91\x4f\x88\x1b\x32\x9a\x27\x64\x0c\x2d\x42\x2e\x30\xe7\x25\xdd\xde\x54\x08\xe6\x01\x83\xba\x79\xc2\x74\x91\x26\xb4\x3d\xc9\xf5\x53\x9b\x4f\x64\x38\x06\x6c\xb5\x60\xae\xde\xeb\x09\x2c\x0d\x18\xd8\xc6\xba\xc2\x90\x7e\xb6\x7d\xf7\xef\x0f\xd5\x63\xb1\x8e\x93\x18\x97\x9a\xa3\x12\xec\x1f\xc3\xb8\x99\xde\xc0\xb8\xc1\x9f\xc0\xb8\x2d\xbe\x79\x0e\xe3\xdb\x38\x6c\x7b\xd0\x9b\xf0\xcd\x7a\x0f\xdf\x18\x98\x1b\x32\x17\xaa\xb3\xab\x27\xd7\xdb\xf3\x19\xdd\xd8\xd1\x96\x27\x4e\x61\xd2\x67\x1d\xde\xbc\x34\x95\x14\x7d\x26\x0b\x5e\xf9\x54\x22\x95\x52\xb5\xd5\x34\xbc\x9b\x70\x35\xcd\x51\x93\x54\xc4\xe2\xee\xd3\xa3\x58\xf1\x9e\x98\xc7\x6e\xc1\x57\x3b\x8a\x18\xed\x3b\x3c\x9d\xde\x07\x26\x93\xd3\x68\x87\xde\xe0\x57\x64\xc8\x43\xa8\x45\x19\x37\x50\x8b\x26\x4f\xa0\x16\x3d\xce\xa1\x36\xef\xbf\x27\x7d\x59\xba\x96\x8e\xd1\x17\xc3\xfb\x87\xea\x8d\x47\xbd\x11\x39\xcf\xf3\x89\xc8\x79\xb5\x27\x22\xb7\xff\x87\xcb\x49\xf5\x98\xf3\x64\x14\xc7\x00\x16\x0b\x0d\xfc\xff\x44\x31\xee\x47\x31\x70\x2b\xff\x22\x1e\xce\xbf\xf8\x8c\x62\xe4\x87\xf3\xef\x4f\x64\x07\x02\xf4\x97\x1f\x7f\xfc\x7d\x32\x9f\xb3\x14\xc6\xec\xe5\x7f\x5e\x1b\xb3\xb6\x1b\xb1\xc9\x46\x4f\x64\x58\x06\x9e\xae\x8d\x4c\x39\xd2\x7b\xce\x38\x07\x8f\x28\x82\x37\xf2\x88\x72\x97\x47\xfc\xca\x8a\x7f\x61\xce\x5f\x59\xee\x23\x3c\x62\x8b\xc4\x69\xdf\x1c\x08\x28\x48\xeb\x0c\xb8\xe9\x38\x55\x55\x96\x8e\xc5\x61\x76\x2d\x1e\x17\x2d\x20\xe2\x85\xd2\xcb\xc9\x77\xef\x77\x89\xc5\x68\x6f\x8c\x05\xdf\x8d\x85\x80\xb1\x38\x1d\xbb\xc0\x6f\xf1\xb9\x47\x63\x71\xfe\x2c\x5d\x81\x06\x8e\xb4\xee\x43\x5f\x7a\xd1\xae\xf1\x96\x2f\x54\x6f\x98\x43\x7e\xfe\x0a\xb6\xea\xf6\xa5\x72\x3d\x50\x1d\x6b\xbb\xc5\x3f\x6a\x7f\x86\x7f\xd4\x79\x92\x7f\x1c\xb9\xd1\xbc\xbc\x31\x37\xfc\x6e\x6e\x30\xda\x56\x8f\x18\xc9\xf3\xbd\x73\xcf\x43\xe7\x9d\x73\xac\x65\xb6\x28\xad\xcf\x20\x1e\xa5\x54\xcb\x2d\xd0\x99\x03\x89\xcc\x7a\xaf\x29\x80\x3e\x8b\x84\xe5\x0e\x35\xf4\x39\x65\xc5\x56\x86\x75\x9d\x68\x82\xd0\x0f\x36\x7d\xb2\x3e\xbe\x00\x97\xf2\xbb\xaf\xb0\xe5\x90\x1a\x88\x0a\xc3\x20\x5e\xbc\xb8\x28\x59\x08\x8d\xaa\xd5\x47\xf2\x24\xa6\xd2\x97\x03\x06\xf9\x28\x5a\x94\x8b\xb9\x06\x65\xb8\x85\x9b\xb8\x8d\x51\x48\x1a\xcf\xd6\x42\xfa\x20\x41\x9f\xd2\x88\x24\xff\x27\x00\x00\xff\xff\xcb\x39\x62\xc3\x6a\x1a\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xc1\x6a\xc3\x40\x0c\x44\xff\x45\xe7\x3d\xb5\x37\xdf\x7b\xec\x17\x84\x50\x64\xaf\x1c\x04\x8e\x64\x56\x5a\x37\x26\xe4\xdf\x4b\x5c\xe2\x84\x3a\xd8\x84\x9a\xd2\x1c\xcd\x8e\xf0\x9b\xd1\x68\x73\x84\x4a\xc5\x1c\xc5\xa1\xa8\xb1\x31\x0a\xc0\xd2\x66\x37\x28\x36\x47\x10\xdc\x13\x14\x60\xbc\x13\x4a\x10\xc0\xfb\xf6\xfc\x8d\x31\x26\x32\x83\x53\x18\x25\x24\x51\x93\xe9\xbc\x88\x23\x89\xb3\xf7\x57\x51\xd9\x3b\xd9\xeb\x0b\x9c\xb6\xe1\x22\x12\x74\xee\xe8\x03\x63\x84\x00\x9a\xfd\x27\xcc\xcd\xb0\x6a\x33\x4c\xb6\xd8\x63\xd9\xd0\xe8\xc0\x1c\x9d\xde\xb3\x63\xc9\xcd\xf9\x77\x05\x88\xca\x45\x34\x8e\xd7\x59\x2a\x67\x95\x81\xf0\x9a\x82\xa7\xfc\x58\x08\x13\x74\xb6\xb7\x21\x0d\x5a\xd3\x41\xc7\xf4\xb9\xc8\xfe\xf8\x06\x27\xf0\x89\xf6\xda\xd1\xbf\x88\x7e\xc2\x46\x07\xaa\xb2\x0f\x25\x9b\xa5\xbb\x75\xb7\x52\xb2\xbf\x6f\x85\xd0\xc1\x9f\x12\x7c\x47\x8b\xdc\xdf\x75\x08\x73\x8e\xee\x3d\x8e\xd7\x7f\xf7\x71\xe5\xdb\x58\x2a\x57\xcd\xc9\xfe\x68\x41\xdb\xaf\x00\x00\x00\xff\xff\x92\x80\xc4\x2e\x77\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x7a\xf2\x38\x0c\xbd\x92\x16\x6b\x3b\x8e\xd7\xfb\x1f\x61\x3e\xc7\x81\x42\xe9\x4f\x09\x74\x99\x99\x3f\xf9\xda\x52\xe1\xc8\xf2\xf3\xd3\x93\x1c\x05\x07\x85\x04\x42\x0a\x90\x58\x11\x14\x01\xf2\x10\x53\x00\x60\xb1\x0a\x08\x4f\x5e\x01\x90\x94\xc7\x7e\xa1\x3a\x28\x83\x8e\xd6\x3a\x30\xa6\x39\x4f\x49\x62\x9b\x35\xa4\x67\x2b\xcb\x8a\x69\xb7\xa2\xa3\x42\x6b\x6d\x59\x73\x2c\x2b\x71\x71\xa3\x93\xb5\xed\x63\x19\xb9\x76\x51\xdb\xac\x24\xfb\x58\x83\x0c\x4e\x8c\xcb\xea\x79\x59\x43\x9a\x47\x49\xbb\xb5\xe3\xb2\xe6\x00\x89\x5a\xca\x66\x65\xdb\xad\xa5\xb0\x98\xf3\x6e\x6d\xba\xac\xcd\x03\x59\xea\x8a\x21\x49\xd9\xad\x4d\xa9\x37\xee\xcb\xea\x2a\x26\x65\xa2\xe8\x30\x9a\x14\x4e\x0e\x28\x73\xd5\x15\x16\xba\xcb\x2e\x1b\xe2\x35\xe6\x33\xa3\x89\xce\x67\x12\x08\xfa\xb6\x33\x04\x80\x4e\x8e\xc0\x4e\x42\xce\x8e\x8e\x32\x7f\x68\x7d\x17\x28\xe0\x20\x18\xfb\xd8\x00\x07\x67\xe7\xe9\x5f\xca\x1c\x8f\x6b\x56\x84\x0d\x13\x27\xd8\x9e\xf7\x04\xbb\x0f\xc7\xf9\xd4\x8a\xa2\xf7\x39\xbf\xc0\xba\x63\xfb\x59\xdf\x2b\xe0\xb6\x83\xcb\x17\xeb\xee\x8b\xe7\xdc\x3a\x63\xe4\x6d\x7e\xde\x66\x02\xc8\xc0\x18\xa8\xd7\x71\x4e\xcf\x41\xcb\xf7\x69\x8d\x81\xc0\x01\x83\x2f\xf0\x99\x23\xdf\xe3\x83\x3e\x26\x3f\x1d\x58\x81\x57\x44\x13\x1f\x16\x3b\xf3\xeb\xb3\x0b\xf5\x0d\xa3\xa0\xd8\x3c\xb0\xbc\xb7\xed\xd1\x21\x08\xe7\xab\xbd\x20\x94\x75\xbf\x5b\xd3\xdd\x95\x14\xb9\x5d\x49\xe9\x33\xc9\xa8\x5c\x7b\x3f\xe2\xb5\xdf\xe2\x43\xfc\x4d\xf8\x7c\x1b\xbe\xda\xf0\x65\x7c\x49\x6f\xf1\x25\x9d\xf8\xba\xca\xb5\x77\x85\x19\xe1\xfa\x7d\x64\x86\xd0\xdb\x19\x6a\xf9\x7a\xac\xcf\xb8\xb8\xf6\xa7\x99\x41\xbd\xdd\x46\x3b\x54\x11\x22\x7d\x9f\xb2\xf0\x59\x0d\xfe\xac\x2c\x8c\xe5\x21\x65\x61\xe5\x6f\x54\x16\xb6\x5b\x7c\xb8\xd4\x1f\x56\x96\xf0\xd7\x95\x85\x3b\xdd\xac\x24\x25\xfc\x8f\x69\x40\xe4\xd7\x35\x20\xa9\xdd\x22\x61\xf3\x77\x51\x7b\x3a\x93\x52\x7c\x80\x6f\xb7\x7f\x1f\xbe\x67\x2c\x2b\xb4\xa3\xab\x55\xd0\xcd\xba\xb2\x7c\xae\x68\x75\x82\x53\x1d\xe0\x22\xc3\x6c\x88\xaa\x48\x52\xd7\x61\xf4\x4c\x27\x38\x7d\x9d\xb2\x7e\x45\x39\x6d\x0b\x5f\xe6\x23\xeb\x3f\x32\xf6\x02\x01\x78\xfb\x3c\x67\x25\xd8\xe6\x3e\x84\xfc\x57\xcd\xec\x73\xd7\x44\xc0\xe9\x88\xc7\x83\x28\x0d\xaf\x52\x3a\x76\xe9\xa5\x57\x6b\x52\x1a\xa6\x61\x98\xc8\x1a\x76\x4f\x83\x5b\x9b\x3d\x78\x85\x61\x85\x28\xb0\x4b\x21\x80\x5c\xbd\x5a\xe5\x12\x24\x9e\x1e\x65\x52\x9e\x15\x61\x63\xe2\x64\xe4\xc6\xc7\x7d\x87\x19\x8e\xc4\xac\x2c\x41\x85\x3d\xea\xee\x1f\x2f\xcf\x0e\xaf\x9c\x43\x60\x5f\x01\xa4\xb9\x07\x74\x8e\xdf\x79\xe6\xf1\xc6\x04\x73\xe0\x82\xb2\x67\xbf\x06\x5e\x67\xbf\xe4\x81\x6f\xdf\x66\x11\xe3\xb6\xb3\xb7\xaf\x4f\xfb\xb8\x8b\x0a\x34\xed\x73\xb7\xf7\x2a\xa9\xa5\x5c\xfa\x7c\xd3\x8f\xcb\x0a\x7b\x99\xd3\x1f\x67\x8b\x1f\xe2\xe1\x57\x66\xcb\xef\xe4\xa9\xa4\x89\xdf\xbc\x15\xc1\xea\xd6\x8d\x4d\x74\x6d\x80\x57\xb6\xc8\x4f\x93\xe2\x8d\x13\x1f\xf5\x43\xb3\x2b\x79\x8b\xc5\xc1\x86\x92\x89\x86\x56\x4b\x1a\xda\x39\x13\xcc\xbf\xc6\x26\x3a\xaf\x50\xd6\x50\xd1\x6e\x89\x40\x51\xab\x56\x1d\x66\x8a\xda\x95\x55\x4e\x1a\x78\x47\x91\x37\x56\xfc\x9d\xbb\xbc\xad\x9a\x9c\x24\x01\xaf\x3e\xee\xa4\x92\xb3\x23\x96\xec\x69\xde\xb3\xca\x05\xef\x19\xb1\x14\x87\x4f\x5d\xdf\x29\x4f\x14\x90\xae\x33\xe7\xa8\x0a\xf5\xae\x3a\xab\xfc\xec\x3b\xb7\xfd\xa1\xef\xd0\x21\x3f\xa8\xff\x4f\x22\xbd\xf3\xec\x01\xcd\x0b\x28\x77\x34\x2f\x70\x3c\xa1\x79\xc1\xf2\x84\xe6\xad\xff\xf4\x93\xfe\x24\x5d\xf7\x27\x92\x92\xa7\xf1\x8a\x16\xbc\x57\xdc\x19\x7f\x18\xf3\x1f\x98\xf7\xbe\xd6\x1d\xca\x1b\x4f\x47\x46\x63\xf2\x19\x4d\x6e\x4d\x4c\x0e\xce\x74\x94\xfd\x20\x11\x02\x3d\x5c\xff\x2a\xf6\x67\xcf\x77\xd8\x9f\xa3\x3f\xc1\xfe\x5c\xd2\x31\xf6\x1f\xe3\x84\x94\xbd\x2a\x16\xc1\x9f\xab\x8a\x04\x9f\x55\x45\x63\x15\xad\xaa\x04\xf3\xb4\x40\xa0\x4d\xd1\xd8\x92\xca\xfc\xcf\x48\xc5\x70\x3e\x33\x3f\x69\x7a\xa4\x2a\x6e\x6b\xac\x8f\xd7\x80\xa3\x9c\x47\xf6\x96\x1a\xfc\x7e\xdf\x59\x6a\xbb\xc3\xc2\xd2\xf1\x09\x16\x96\x61\x2f\xf5\x9d\xab\x36\x1f\xd2\xab\x2f\xed\x0a\x7e\xa9\xeb\xfc\x48\xe3\x1d\x11\x37\x4c\x7b\xce\x62\x47\x59\xc6\xd1\x1b\x78\x13\x4f\xe7\xce\x82\xbf\x49\x5b\x7f\x00\xb3\xab\x53\xe1\xf9\xcd\xdb\x03\x1c\x6f\x3c\xee\x70\xbc\x09\x3f\xc1\xf1\xa6\x71\x8c\xe3\xbb\x72\xb6\xde\x7f\xf0\x3c\xd1\x5e\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x1e\x3b\x4f\x1c\x56\xc2\xda\xdb\xc8\x15\xd7\x7b\xde\xff\x27\x47\xe1\x73\x8e\xf6\xbb\xe7\xff\xfe\xd9\xf9\x7f\x32\xf0\x50\xc4\x07\xdf\xed\xb4\x36\x48\x28\x37\x2c\x9d\xaa\x47\xd1\xa8\x54\x40\x7d\x54\x36\x6f\x39\x87\x50\xc9\x36\x9b\xbf\x9a\x32\xa2\x92\x0f\x91\x9c\xda\x10\xe2\xc2\x7d\x9c\xf7\xf6\x81\x77\x3b\xa7\xca\x0a\x90\x51\x45\xc9\xb2\x65\x23\x06\x71\x82\xec\x2d\xa2\x52\xcd\x4d\x12\x68\xee\x64\x99\x7a\xef\xb5\x43\x49\xb9\x59\x63\x0e\x52\xac\xae\xa3\x0a\x5b\x1a\x1c\x19\xd9\x02\x4b\x36\x91\x14\x1d\x80\xe2\x9f\x00\x00\x00\xff\xff\x7b\x7c\x16\xb6\x80\x1e\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x41\x4b\x03\x31\x10\x85\xff\xcb\x9c\x73\x12\xf4\x90\xa3\x77\x4f\x1e\x4b\x91\xd9\xee\x54\x02\xd9\x99\xb0\xf3\xa6\xb2\x94\xfe\x77\x11\x5c\x4a\xb5\xd8\x15\x45\x7b\x0c\xbc\x17\xbe\x2f\x33\x59\xed\x69\x63\xea\x60\x05\x65\x8c\x21\x89\x8a\xb6\x80\x53\x5e\xed\x49\x79\x10\xca\xc4\x7d\x3f\x52\x22\x4c\x6d\x3e\x89\x3b\x1d\xd6\x69\x0e\x28\xa3\xec\xe4\x69\x60\x87\xbc\x25\x2d\xf0\xf1\x8e\xf3\xfd\xc6\x13\x77\x55\x28\x6f\xb9\xba\x24\x72\x30\xe4\x21\xc0\x5d\xa9\x05\x13\x65\xda\x15\x79\x39\x76\xb7\xa1\x1b\x14\x53\x3a\xa4\x2f\xc0\x3f\x81\xc1\xc0\xf5\x3e\x46\x95\xfe\x12\x5d\x14\xc5\xcd\xed\xdd\x6f\xd2\xbd\xb7\x17\xbf\x6b\x3a\x06\x06\x0b\xc5\x79\xb8\x53\x43\xee\x4f\xcd\x16\xd1\xab\xe9\x1c\xba\x06\x07\x8f\xee\xd2\x74\x3a\xb3\xba\x70\x34\xdf\x90\x5b\xb4\x3e\x8f\xd1\x5a\x9d\xfe\x61\x7d\x7e\xfa\x2b\x9f\x05\x7f\x43\xbd\x7e\x0d\x00\x00\xff\xff\x39\x77\x62\x59\x4d\x04\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xf4\x30\x10\x06\xe0\xff\x32\xe7\x9c\xfa\x7d\x2e\xd2\xa3\xe8\xc1\x83\x20\xee\x82\x87\xa5\xc8\xa4\x9d\x4a\x68\x9a\x84\x64\x52\x37\x2c\xfb\xdf\xa5\x65\xdd\xed\x41\xdc\x8a\x68\x7b\xcb\x61\x5e\xf2\xf0\x32\xb3\xdd\x43\x69\x4d\x60\x34\x0c\x39\xfb\x48\x02\x94\x71\x91\x03\xe4\xdb\x42\x80\xc1\x96\x20\x07\xb6\x8c\x7a\x1d\x9d\xd3\x09\x04\xd8\xc8\xc7\x89\xfd\xc7\x00\x08\xe0\xe4\xfa\x57\x54\x86\xb3\xab\x15\x1c\x0a\x01\x0e\x13\x4a\x4d\x90\xd7\xa8\x03\x09\x08\x8c\x4c\x0f\x91\x51\x2a\xad\x38\x41\x0e\x9d\xa2\xb7\x73\xb6\x8e\xa6\x64\x65\x0d\x1c\xc4\x17\xac\xd3\xa7\x2f\x1d\xea\x48\xe7\xb8\x4c\x4c\x61\xf8\xf8\x38\x20\x35\x36\x94\xc9\x9e\x73\x41\x3d\x44\xff\x65\x7f\xa1\x36\xb1\xfd\xbc\xad\x13\xda\x96\xcd\x46\xb5\xb4\xa0\xa6\x27\x99\xd7\xea\xd5\x90\xbf\xa4\xc6\xaa\xf2\x14\xc2\x62\xd4\x9b\x61\xb5\x4b\xeb\x27\xf5\xbd\xfa\xff\x8b\xf0\xd1\xbd\xed\xee\x76\x4e\x79\x1c\x32\xb3\xaf\xc1\xd8\x75\x7f\x3b\xff\x29\x8d\x3d\x8f\xde\x76\x54\x3d\x5b\xdf\xcc\xdf\xd3\xf7\x16\x6f\x69\x4d\xde\xf4\xa8\x27\xaa\x27\xa9\xae\x7f\x88\x2a\xde\x03\x00\x00\xff\xff\x9e\xad\x27\x0c\x78\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x0b\x52\xe4\x3a\x0c\xbc\x92\xfe\x96\x8f\xe3\xef\xfd\x8f\xf0\xca\x76\x86\x65\xc8\xbc\xb0\x31\xbb\x4b\x11\x8a\x82\x91\x6d\x59\xea\xee\x48\x1a\x03\x07\x03\x01\x25\x03\x10\x36\x04\x43\x80\x24\x1a\x0c\x00\x58\x43\x01\x84\xcd\x27\x02\x88\x71\x3f\x1e\x34\x07\x63\x74\x34\xa8\xb5\xa2\xcc\x7b\xa2\x86\x61\xe5\x40\xa2\x8e\xb2\xac\x55\x0e\x6b\x76\x68\x2d\xd1\xb4\xa2\x1e\x7b\x05\x7a\xec\xa9\xb7\x65\x8d\xe9\xb0\x62\x8f\x10\x08\xa7\x95\x20\x2c\xab\x81\xd6\xae\xb1\x2c\xab\x96\x65\x8d\xa9\x28\xd7\x9c\x97\xd5\x8f\xbd\x25\x77\xab\xb5\x2c\xbf\x94\x0f\xbf\x55\x29\x34\x96\x15\x19\x35\x5d\xd6\xe6\xa0\xea\xbc\x6e\x63\x6a\x1a\x34\x0f\xbc\x1c\x7a\xd5\xcc\xe2\x80\x3a\x32\xc9\xba\x70\x5c\x76\x9d\xd8\xe6\x36\xce\x78\x57\x1b\x67\x04\x14\x1d\x9c\x1c\x07\x03\x04\x80\x11\x15\x14\x1e\x2b\x11\x81\x23\x74\x7e\xef\xb5\xc1\xc9\x2b\xf2\xb8\x5f\x1c\xd8\x80\x7d\xe0\x02\x0e\x0e\xac\x11\x0e\xaf\xe0\x04\xf8\xc1\x32\xb9\xc7\x0e\x38\x2c\xf3\x2e\x81\x23\x8a\x75\x7f\x84\xe1\x6b\xe9\xc3\x21\x72\xa4\x38\x6d\xbf\xa2\x75\x76\x9e\xf1\x0b\x87\x71\xc3\x8a\xfe\xf1\x13\x71\x9e\xa0\x78\x7c\x36\x04\x61\x7d\xce\x7c\x64\x82\x11\xed\xf1\xf7\x06\x12\x68\x67\x7c\xd1\xe5\x33\x24\x56\x16\x6f\x11\xa9\xd4\x6d\x2e\x30\xd9\x39\x82\xa2\x37\x23\x30\x92\xe7\x08\xc2\xdb\x5b\xf3\xd9\x83\x76\x67\xef\x8d\xcc\x08\xf9\x94\x19\x31\xdd\xcd\xac\xe3\x07\xb6\xc3\x39\xaa\x57\xb6\x3b\x91\x9a\x9f\x23\x0d\x68\x08\x21\xb7\x6d\x66\x29\xbe\xc8\x3f\x16\x43\x70\x4b\x7f\x4c\xc1\x54\xce\xfa\xa1\xd2\x0d\xc7\xe6\xfd\xd8\x3b\x9e\xbc\x32\xc2\x4d\xee\x62\xb6\x3f\x96\x27\x73\x3a\x47\x34\xdb\x4d\xf2\x8f\xda\x3f\xa9\xe1\x53\x5d\x47\xb4\xbd\x53\x9f\x67\x30\xbb\x20\xdc\x79\xc7\x8c\x35\x52\x66\x8f\xe5\xf0\x86\xef\x7b\xe0\x57\xfa\x29\x1c\x1a\x00\x59\x15\xfb\x0d\x33\x1e\x8c\x4e\x74\x83\x03\x67\xd4\x07\xea\xfd\x43\x7d\xd4\xd4\xf1\x6d\x55\x20\x6a\xe0\xba\xd6\xb9\xad\xff\x8e\x7d\xf0\x0b\x8d\x61\x27\x70\xc4\xe3\x14\xf6\xf7\x3e\x7f\x29\x69\x74\x8b\x57\x4a\x8a\xeb\xd7\xf6\xb0\x4c\xa1\x41\x4a\xe4\xce\x47\xb6\xf4\x37\xd0\x5c\x9d\x70\xf6\x33\xf2\xd1\x9d\x49\xc9\x79\xf6\x39\x7c\xd6\xc8\x73\x9e\x03\xfb\x11\x19\x80\xe6\xb1\xff\x81\x51\xee\x63\x4e\x18\xfd\x70\x9c\x77\x81\xc3\xc7\x42\x6b\xf5\xc1\x34\x75\xaf\x4f\x28\xad\xf5\xd1\x93\xc7\xb4\xb4\x7c\xb5\x72\xf8\xe2\x71\xb7\xcd\x9e\x3b\xef\x1f\x6f\xcf\xc8\x3e\x01\xbf\xd0\x72\x56\x88\xf4\xe0\xf1\x37\xb4\xa2\x90\x2f\xb4\xa2\x83\xf5\xdb\x5a\x51\xd6\x0d\xad\xac\x4f\x87\x5e\x84\x9d\x10\x97\xb7\x31\xbf\xcd\x01\x75\xce\x4e\x77\x95\x44\x9c\x5a\xf4\x12\xff\xba\x92\x9e\xfc\x3e\xcd\xbf\xa7\x6a\xf3\x3b\xbc\xd4\x70\xc5\x4b\xcb\x1b\xbc\x18\xe0\x3d\x5e\x5e\x75\xe8\xb9\x96\xff\x97\x2d\x63\x5e\x6c\xb5\xb2\xc5\x56\x86\x6a\xd2\xe9\x87\xb1\x65\xa9\x5d\xb0\x65\x85\x76\xd8\xaa\x7e\xff\x2d\xba\x60\x26\x00\x4c\x66\x42\x8e\x3b\xcc\x78\xf3\x02\x9d\xdb\x0f\x63\x26\x84\xab\xfa\x16\x7c\xa7\xbe\x85\xb4\x51\xdf\x3e\x32\x73\x17\xff\x12\xb3\x2b\x81\x7e\xfb\x74\xe1\x24\x17\x88\x3a\xfb\x06\xa2\x2e\xed\x66\x65\x7a\x97\xfd\xd7\x26\x8d\x9a\x14\xb5\xc9\xf7\x4f\x6d\x5e\xe1\x0a\xd7\x26\x3b\xb8\xf6\xf4\x2f\xa7\x36\xf6\xce\x01\x3d\x7f\x3b\x96\x31\xd8\x05\x96\xd1\xd3\x06\x96\x31\xc1\x57\xb0\x9c\x95\x78\x0c\x86\xd3\xd7\xfc\xfe\x87\x90\xc2\xde\x4c\x13\x24\x49\x28\xe1\x87\xd5\xe2\x24\x78\xc1\x4a\x52\xdd\x60\x25\x59\xfe\xf7\xb5\x18\x7b\x24\x36\xc6\x6f\xd7\x79\x6a\xe9\x0a\xd1\xde\x36\x10\xcd\x28\x7b\x3a\x07\x48\x68\x6a\x14\x52\x48\x81\x18\xd4\x09\x84\x63\x76\x21\xe9\x8d\x91\x84\x84\x43\x11\x90\xec\xde\xbb\xb4\x98\x6a\x35\x11\x8c\x4c\x45\xb5\x35\x49\xa9\xa4\xe1\x25\x9a\x51\xad\x56\xb4\x03\x50\xfc\x2f\x00\x00\xff\xff\xde\xfc\x26\xa5\xac\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x4f\x4b\xf3\x40\x10\xc6\xbf\xcb\x9c\xf7\x94\xf7\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x65\x92\x4c\x64\xc9\x66\x76\xd9\x9d\x8d\x0d\xa5\xdf\x5d\x12\xaa\x45\x09\x36\x08\xa6\xb9\xed\x61\xfe\xfc\xe6\xe1\x79\x76\xb3\x87\xc2\x72\x10\x64\x81\x54\x7c\x24\x05\x9a\x5d\x94\x00\xe9\x26\x53\xc0\xd8\x10\xa4\xc0\x28\xba\xa5\xad\xec\x6e\x8c\x2d\xea\x27\xaa\x40\x81\x8d\x72\xac\xdb\x7f\x94\x81\x02\xe9\x5c\xff\xca\x3b\xa1\x70\x0d\x87\x4c\x81\xc3\x0e\x73\x43\x90\x56\x68\x02\x29\x08\x82\x42\x0f\x51\x30\xd7\x46\x4b\x07\x29\xb4\x9a\xde\x4e\xad\x55\xe4\x42\xb4\x65\x38\xa8\x1f\xd8\x3e\x77\x72\x6c\x4e\xbd\x51\xb3\xfc\x4b\x86\xb5\x5f\xc9\xf3\x9e\xfb\x59\x37\x74\x0e\xbc\x9f\xb0\xfa\xbf\x30\xf0\xfb\xdb\x49\x7a\x1f\x07\x2c\x87\x7b\xad\x5f\x99\xfc\x39\x76\x2c\x4b\x4f\x21\xfc\x21\xfb\x88\x91\x1f\xbd\x6d\xa9\x7c\xb1\xbe\x9e\xe2\x88\xe4\x6a\x35\x2b\x9e\x15\x34\xeb\xe8\x9c\xe9\x2e\x4f\xf7\xab\xa4\x0d\x07\x14\xd6\x2f\x28\x6f\xdb\x16\x4d\xa4\x6f\x91\x19\x3d\x00\x6b\x4a\xf2\x5e\xd4\x8b\x87\x6e\xc4\xb8\x77\x3b\xa7\x3d\x0e\xad\x13\xa4\x9d\x9b\x6e\xae\x9f\x2a\x7b\x0f\x00\x00\xff\xff\x18\xbe\xf7\x1a\xb8\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\xd1\x71\xc5\x20\x0c\x5b\x49\xc6\x58\x36\xe3\x40\x30\xfb\x8f\xd0\x23\xe4\xf5\xb5\xfd\xe9\x5d\x2b\x7f\x24\xc8\x3a\x90\x44\x04\x88\x0a\x2b\x04\xaa\x52\xf6\xa9\x99\x13\x80\x9a\x5f\x10\xfc\x11\x0d\xa8\xd4\xf5\x40\x18\xa0\xd6\x3e\x87\x7b\x69\x52\x89\x9a\xe6\x9b\x0b\xbf\x74\x8e\xc1\xcd\xb1\x98\xdb\xd8\x6f\x07\xd6\xb4\xa1\x35\x20\x46\xd8\xe3\xe8\xb0\x06\xde\xe3\x34\xda\x00\xde\x3a\xce\x9f\x3a\xaf\x84\xc7\x4b\xb7\xbf\x0a\xff\x74\xf5\x1b\x84\x6f\xcf\x77\x4b\x12\xf2\x35\xd3\x7f\xfa\x41\x09\x39\xad\x43\xb6\xe7\xe7\x7e\x84\x42\xe3\x66\xc2\x03\x3a\xc4\x4e\xb6\x39\xbe\x67\xb3\xbe\xe4\xb5\xcb\x34\xd7\x79\xb6\x9a\xe7\xef\x51\x9d\x21\xd0\x85\xc6\xe2\xdd\xbb\x17\x85\x45\x01\x33\x73\x4e\x40\xa4\x65\x5b\xcb\xda\x48\x5e\x0d\xb9\x04\xac\x6b\xad\xd9\xfb\x88\x71\xc1\x6c\xe4\x5c\xdd\x5a\x89\x64\x9f\x97\x69\x83\xf1\xda\x11\xda\x47\x00\x00\x00\xff\xff\x37\x3e\x41\xaa\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x69\x9a\xeb\x38\x08\xbc\x52\x01\x62\x3b\x8e\xd6\xfb\x1f\x61\x3e\xd9\xce\xf2\xde\xf4\xa4\x3b\x99\xaf\xe5\x1f\x56\x80\xb0\x54\x01\x36\x04\x0c\x05\xca\x06\x14\x31\x82\x11\xa0\xae\x6e\x00\x44\xbd\x83\xf0\xe1\x49\xa0\x98\xac\xeb\x90\x05\x4c\xd8\x65\x95\x2c\xa0\x72\xc4\xe9\xea\x5b\x1a\xb3\x56\xab\xfd\x92\xa6\x9f\xd2\x2e\xa5\x23\xa6\x9e\xd2\xd1\xd5\xb5\xed\xac\x02\x6b\x68\x93\x12\x20\xdd\x1a\x8b\x33\xdb\x53\xae\x47\x05\xa9\xbb\x9e\x80\x18\x24\x08\x94\x08\x04\x64\x4b\x41\x49\x96\x30\xf0\xbe\x22\x39\x0f\xad\xe8\xdf\x32\x3d\x1e\x23\x90\x88\x9a\x36\xe0\x39\x6a\x95\x7f\x47\xed\xf6\x5e\xd4\x7b\x04\x6e\x65\x47\x38\x98\xa0\x40\x70\xd0\x66\xe4\xb0\xa5\xc3\xe6\xd2\x24\x41\x12\x4b\x9e\x33\x99\x5f\xd4\xbf\xc8\x08\x62\xeb\x4f\xaf\x7e\x67\xe3\xbb\x43\xf6\x8e\xed\xf7\xd9\x1e\x28\xb6\x47\x4e\xef\x78\x17\x79\xc7\x9a\x0a\xe9\x81\x0b\x8d\xb1\x71\xd9\x99\xf8\x42\x74\xf1\xac\x9f\xb6\x32\xce\x0a\x51\xb0\x71\xbc\x58\xdc\x2c\x41\x82\xb7\x86\xea\x03\x83\x80\x2f\x63\x57\x4b\xeb\x5e\x2c\x6d\x4a\x65\x98\x7a\x98\x9a\xb8\x7a\xb1\xe5\xcc\x70\x36\x75\xda\x76\xfb\x66\xe5\xef\x78\x8a\x17\x98\xee\x09\xc0\x3b\xb8\x98\x70\x49\xab\x29\x35\x24\xe4\xf2\x26\xcf\xf3\xf9\x7f\x66\x1d\xfc\x07\x42\x72\xeb\xf8\xdb\xfb\x09\x9d\xe7\xde\xe6\x6b\x02\x80\x7b\x7d\x21\x7b\x76\x8e\x7e\xf6\x80\x34\xd2\xab\xcf\x79\x6f\x8b\xe7\x3e\xd7\xba\xe8\xa1\x75\xa8\xcb\x38\xf5\x32\xcf\xdb\x65\x77\x3c\xa7\xcf\x9d\x8b\x2f\x8e\x29\x5c\x6c\x05\x94\x74\x69\xa7\x39\x32\xbc\x91\xc8\x5c\xbc\x28\xa5\x48\x36\xd6\xda\x5b\xb5\xaa\xd3\x72\x31\xe5\x8c\xb4\xd5\x73\x90\x67\xf0\x4f\x27\xb5\x9e\x15\xda\xb9\xb9\xde\x65\xac\x0d\x52\xcc\x59\xef\x7c\xf1\x2f\xf1\xc5\xff\xcd\xd7\xad\x2a\xfe\x9e\x21\xe1\xf1\x82\x21\x29\xf4\x9a\xa1\xd3\xff\x96\x33\x82\xe8\xfa\xd7\xed\x5b\x74\xfa\x7c\x6c\x55\xa5\xaf\xb7\xe9\x7e\x5f\xbf\x3e\x44\x3d\xb9\x92\xad\x51\xaf\x7a\xe9\x37\x30\xff\x19\x9e\x43\x5f\xe1\x39\xf3\x13\x3c\xd7\xfa\x00\x4f\xec\x4f\x58\x25\x53\x63\xaf\x5e\x9d\x05\x1a\x0c\x48\xef\x9e\xde\xca\xf4\xac\x6d\x25\x79\x0a\x97\x3e\x65\xd1\xea\x8d\xc7\x9c\x90\x61\xd1\x74\xe5\x30\xa3\xea\x6a\xdd\x94\xa3\x69\xca\x58\xd9\x00\xce\x7f\x02\x00\x00\xff\xff\x01\x28\xae\xea\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\xb1\x6e\xc2\x30\x10\xfd\x17\xcf\x99\xa8\xda\x81\xad\x42\xea\x06\xad\x5a\x31\x21\x86\x8b\x73\x50\x0b\xc7\x8e\x7c\x67\x90\x85\xfa\xef\x55\x28\x24\xa1\x44\x4d\x89\x48\x13\x75\x44\xdc\xd9\xef\xf9\xde\x7b\xb9\xc5\x5e\x48\x6b\x88\xc1\xb0\x18\xaf\x40\x13\x46\x42\x99\xcc\x33\x89\xf1\x62\x2f\x0c\xa4\x28\xc6\x82\x50\xaf\x44\x24\x38\x64\xf9\x2f\x48\x12\x87\x44\xe2\x23\x2a\x0a\x0c\xee\xa6\x40\x8c\xae\xa6\x6a\x19\x95\xc7\x70\x51\x65\x3d\x1f\x6f\x59\x46\x22\x83\x00\xb1\xc6\x02\x01\x31\x30\x4e\x3d\x43\xac\xb4\xe2\x90\x5f\x60\xcd\xa9\xa8\xb8\x61\xe5\x8d\x64\x65\xcd\x01\x48\xc9\x82\x9d\x6f\x47\xc2\x53\x03\x7e\x45\x73\xfa\x06\xbe\x68\x2e\x1b\x63\x6b\xf5\xa1\xab\x99\xd5\x56\xe1\xae\x3b\x3e\x1b\x0c\x15\x54\x81\x91\xee\x46\x67\xe3\x60\xeb\x60\x8d\x4f\xb6\x99\x52\xa5\xb9\x6f\x56\xb1\xb6\x72\x33\xf3\x69\x5c\x1d\x96\x57\x86\x47\xf7\x0f\x55\x76\x68\xd0\xad\x43\x13\xb3\x6a\xe3\x8d\x98\xb5\x77\x51\xa3\x00\x1d\xa6\x76\x8b\x17\x22\xec\xd9\x41\x25\x3e\xe9\x9d\x43\xc3\x6f\x99\x35\xd4\xac\xaa\xea\x01\xbd\xbf\x3d\x7d\x61\x7e\x3c\xfe\xf3\x73\x8c\x69\x94\xb5\x24\x07\x33\x88\x5c\x49\x2f\x1a\x4c\xfd\x08\xa4\xc3\x44\x71\x8d\x09\xca\xe7\x70\x28\xed\x16\x5d\x78\x05\xc6\x4e\xdd\xd2\x79\x0e\xc4\xa0\xc1\x48\xfc\x5f\x41\x00\x49\xd2\x79\x0a\xb4\x87\x7f\x13\x7d\x95\x3b\xc3\xbc\x4e\xcc\x83\xb1\xda\x3b\xd0\xc4\x26\x8d\xfa\xea\x79\x2b\x28\xf1\xa6\x97\x1b\xd8\xd0\xb3\x39\x20\x3d\xbb\x99\xad\x79\xcc\xf3\xf0\x1e\x92\x40\xae\x30\x73\x5e\x30\x39\x59\xe6\xaf\x43\xaa\x35\xad\x2b\x3e\x98\x8a\x7e\xb9\x11\xdc\xc0\x24\xcb\xcf\x00\x00\x00\xff\xff\xb6\x83\x83\x7a\xd2\x0c\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x0b\x72\xe3\x2c\x0c\xbe\x92\xde\xc0\x71\x78\xde\xff\x08\xff\xf8\xb1\x4d\xf3\x7b\x4b\x02\x69\x3c\x9d\xae\x93\xd9\x69\xa3\x62\x83\xd0\x27\xe9\x13\x72\xd6\xc0\x83\x81\x80\x92\x01\x08\x1b\x82\x21\x40\x35\x75\x06\x00\xac\x2e\x03\xc2\xe4\x2b\x00\x88\x71\xdb\x5f\x68\x1e\x8c\x01\xd9\xf9\xa4\x1e\x65\x9d\x27\xa9\x5b\xa5\x54\x84\x4b\xde\xa4\x28\x75\x97\x4a\x75\x51\xd4\x6d\xd2\x1c\x36\x29\xd6\xa0\xa9\x8a\xae\x52\x62\xdb\xa4\x44\x81\x7c\xb1\xb4\x49\x83\xdb\xa5\x5c\x7c\x76\x65\x97\xb6\xb8\x49\xd9\x3b\x8c\xa1\x6d\x52\x76\x65\x93\x2a\x54\xc8\xa5\xc9\x26\xad\xb0\x49\xad\xf8\xec\x35\xc4\x55\x2a\xbc\xaf\xcc\xe7\xc8\x49\x64\x5b\xaf\x84\xb6\x49\x03\x55\x80\x92\xea\x2a\x55\xa0\x5d\xaa\xec\xb3\x24\xde\xa4\xba\x6b\x11\x6a\x41\xe5\x0c\x9b\x34\xc9\x26\x4d\xc4\x9e\x89\x68\x95\x1a\xef\x5a\xe4\x90\xa5\x65\xc1\x4d\xea\x77\x8d\x8b\x77\xcc\x1c\xf3\x26\x6d\x45\x9d\xa6\xc5\x66\x1e\x5a\xd1\xc4\xe2\x01\x75\xd9\xe3\xe6\x36\x5b\x6e\x72\x85\x75\x87\xf3\x62\x6d\x0f\x6c\xc0\x1e\x01\x03\x78\xf0\x8b\xb5\x3f\xac\xf5\xe8\x85\x16\xc0\x80\x60\xb9\x36\x50\x58\xef\xf0\xda\xf5\xba\xbe\x0d\xc1\x39\xaf\xa6\x09\xe0\x93\x16\xa8\xf1\xa8\x45\x6c\x3f\x58\x8b\x88\xb8\x68\xb1\xfa\x16\x7a\xf0\x84\xba\xbd\x3d\x2e\xbe\xb6\x5e\x83\xeb\xd8\x7d\x44\x40\xe0\x00\x8d\x3f\x6b\x5d\xf4\xa0\x35\xa1\x7f\x8f\xd6\xcb\x3c\x18\x3a\x1a\x25\xd2\x7b\x8d\xfe\x5c\xf1\xe7\xe7\x80\x66\x24\x74\xd4\xcc\xe3\x7b\x34\xfb\x52\xa3\x8c\xff\xd3\x68\x44\x83\xc8\x47\x0d\xda\x9b\x6c\xf3\x2d\x88\x2c\xe8\x0e\x7e\xc5\x60\x07\x2d\x98\xd3\xf7\x6b\xf1\x67\x15\x88\x54\xef\xf7\x7c\xe4\xae\x23\x63\x07\x6c\xc9\x3e\x1c\x77\xa1\xd4\x9f\x6b\x4b\x24\x28\x47\x5b\xd6\x7c\xd0\x42\xe8\x0d\x3e\xf5\xb1\x0a\x23\xb9\xb3\x25\xdf\xf6\xfc\xce\x97\x68\xbf\xe2\x6b\x0b\x88\x1c\xe3\xbb\xf8\x70\x6e\x3c\x40\x07\x6d\x3a\x1e\x48\x4c\x07\x0d\x14\xe0\x07\x63\xc8\x6f\x19\xea\x0e\x43\x0a\xf5\xa8\xc5\x2a\x39\xc1\x0e\x5d\xdb\x64\x0a\xc7\xd5\xda\x31\x3f\x6a\x88\x6f\x44\x7c\x0d\xed\xe5\xac\xae\x19\x8e\xab\x6e\xfa\xc6\x55\x37\xf7\xf3\x62\xae\xc9\x31\x7f\x9a\x97\xf7\x20\x6d\xb1\xd0\x57\xbb\x43\xa0\xc7\x58\x6a\xe1\xc8\x4f\xac\xbe\xc9\x0f\xbe\xc3\xc6\x24\x9b\x16\x53\xb1\xcb\xc1\x31\xff\x39\xfd\xc1\xf9\x8f\xd4\xcd\xb3\x6b\x1e\x42\xf4\x90\xaf\xa0\xf8\x65\xef\x7c\x22\x75\x0a\x63\x33\x31\x8c\x8c\x36\x06\x0d\x41\xa1\x86\xc5\x67\x56\x1d\xe9\x73\xad\xfd\x4a\xdd\x0e\x3b\x76\x40\xe0\xe4\x68\x41\x70\xe3\x12\x0b\xea\x56\x4c\x3a\x0f\x9c\x50\x77\xac\x7a\x6d\xf7\x58\xd5\xd8\xf0\xf6\x57\xb7\x00\xac\x6c\x7f\xe7\xba\xfd\xb6\x8f\xfb\xc4\x41\x16\x39\x81\x47\xdc\xaf\xba\xe7\x7f\x37\xb4\x2b\xfe\x1d\x81\x63\x98\xd0\xb4\x20\xd3\x10\x02\xad\x6c\x7b\x59\x81\x6b\xe0\x33\xbb\x10\xa7\x8d\x74\x67\x23\xb8\xb1\x2e\x60\x4f\xdb\xbe\x7e\x62\x63\xe0\x9a\x91\x53\x0b\x96\x9d\x58\xb0\xca\x91\xc0\xb1\xa9\x65\x33\x02\x6b\x8e\x08\xac\x18\x3a\x76\x62\xba\x7c\x72\xcb\x62\x97\x92\x21\x2c\xbf\x99\x2c\x77\x53\xe8\xf8\x56\xd1\x34\x8a\x61\x8c\x3e\x51\x74\xe4\xd9\xf3\x7e\x37\x7e\x13\x8a\x87\x7c\x71\x0e\xc5\xa7\x78\xca\x07\x97\x86\xc7\xbe\x12\x9a\x76\x7c\x25\x2e\x51\xbf\xe7\x2b\xeb\xdb\xb6\x53\xa5\x51\xcb\x32\x1a\x23\x84\xe2\xe5\x23\x3e\x5d\x96\xed\xce\x71\xb3\xec\x13\x51\x30\x56\xea\x59\xb6\xd9\x44\x14\x4c\x90\xc7\xa2\xe0\xf2\x73\xf9\xfc\x0a\x4e\x28\x54\xae\xad\xd1\x6f\xc1\x49\xe7\x4c\x6c\xc4\xbe\xa9\xf4\xec\x9b\xea\x94\x7d\xdb\x37\xd8\x57\xd8\x13\xe2\x7a\xbf\x4c\xa2\x6e\x3d\x57\x5a\xb9\xd8\x70\xec\xa7\xa2\x40\xed\xd7\x44\x88\xcf\x6b\xbf\xeb\x7a\xcc\x21\x20\x17\xee\x20\x20\x57\x37\x81\x80\xdc\xca\x38\x02\x34\x7d\xc6\xc0\x09\xec\xb9\x2a\x5e\xec\xf9\xf1\xd8\x29\xf6\x5c\x5a\xed\xa0\xaa\x2e\x85\xd5\x30\xaa\x2a\xf9\x53\xd8\x73\xcd\x7a\xb1\xe7\xdb\xce\x7c\xe2\x58\x17\x7b\x7e\x72\x8e\xa1\x08\xdc\x82\x74\x7c\xa5\x45\x3f\xe1\x2b\x2d\xd5\x31\x5f\xd9\xb0\x8f\xb0\x9d\x96\x9d\x83\x7d\xe4\x47\xd8\xb7\x6a\xcd\x09\xad\xa7\x67\x4b\x22\x5a\x30\xdf\x9f\xef\xbb\xb1\x1f\x92\x97\x96\x43\xba\xb0\xff\xec\x1c\x23\x95\x23\x22\x76\xf8\x27\x22\x3d\xe0\x9f\xaf\x54\x04\x5a\x29\x8a\x8b\x37\xbb\xfe\x13\x99\x19\x31\xa7\xde\x8e\x97\x36\x1e\x6d\x10\xef\xeb\xff\x27\x19\xff\xf6\xe9\x14\xae\x87\x2c\xee\xe2\x7a\x8f\xc7\x4e\x21\x8a\x5a\x27\x7f\x21\xc3\x44\xfe\x42\xc6\xc1\xfc\x35\xc7\xf5\x90\x53\xba\xb8\xde\x6d\x67\x96\xa8\xe8\x0d\x09\xaf\x7c\xf7\xf4\x1c\x23\x5c\x0f\xc5\xc7\x8e\xaf\x48\xa8\x13\xbe\x22\x49\xa6\xb8\x9e\x72\x38\x91\xeb\xd9\x10\xd7\x63\x07\xd6\xac\x3a\x5e\xfc\xe0\xab\xf9\xbe\x1b\xfb\xa6\xd1\x52\xb1\xab\x4b\xf0\xf4\x1c\x43\x5c\xcf\xc0\x77\xb0\x6f\x98\x9f\xe7\x7a\x7e\x98\xed\x95\x28\x09\x63\xfc\x55\xb9\x59\x56\x1f\xef\xed\x78\xc6\xde\x8e\x17\x7d\x36\xda\xc8\x2d\xda\x58\x4d\xcf\x46\x9b\x0e\xff\xc3\xbb\x7f\x87\x33\x5f\x74\x6b\xfe\x47\xf4\x90\x66\xce\x7c\x13\x54\xf4\x5e\xe2\x75\xe6\xfb\x57\x5c\xb8\x5c\x3a\xb8\x70\x15\x27\xb2\x90\xbb\x7f\xfe\xfb\x67\x9e\xf9\x62\x90\x74\xd5\x01\x8f\xc7\x4e\xd5\x01\xbe\xf5\xe2\x7b\x80\x07\xf1\xfd\xaf\xa8\x0a\x44\xa7\xd4\x01\x21\xb5\xab\x0e\xb8\xed\xcc\x75\xe6\x3b\x3e\xc7\x50\x04\x8e\xbe\xd3\x1f\xc1\x18\x27\xfa\x23\x18\xd3\x60\x7f\x64\x7b\x92\xcd\x10\x13\xd7\x1f\x55\x09\xa0\xe5\x15\xd9\x68\xe2\xc2\xfa\x59\x4c\x16\xa4\x7f\x35\xdf\x77\xa3\xdf\x07\x2c\xd7\xf3\x42\x23\x73\x0c\x55\x02\x19\x7a\xfc\x23\xd3\x03\xfe\x31\xc9\x17\x86\x46\xef\x7c\xa1\x18\x9f\xc8\x17\xf4\x9f\xe2\x0b\x05\xa1\x83\x82\x42\x32\x11\x03\x0b\xc7\x53\xf8\x42\x29\xee\xe2\x0b\xb7\x9d\x31\x26\x21\x5f\x83\xb3\xa5\xe2\xfa\xe0\xbd\xf2\x26\x1c\xcb\x09\x31\xf3\xab\xef\x18\xf1\x0d\x7f\x4f\x44\xba\xea\x7b\xfd\xad\x1a\x9e\xe9\x6f\xcd\x77\xb8\x82\xc5\xd6\x92\xfe\x63\x1d\xae\xc6\xb9\xb3\xe7\x4d\x61\x22\xae\x34\xb3\x57\x3a\x5c\x33\xd6\xfb\xc8\x0a\xff\x94\xf5\x08\xb0\xd3\x9f\x24\xa0\x89\xfe\x24\x81\xbc\xd4\x9f\xdc\xe7\xc6\xf5\x59\xb8\xe9\x7e\x0a\x5f\x4c\xf2\xa9\x39\x46\xea\x28\x42\xee\xc4\x57\x42\x99\x78\x7e\x95\x50\x07\x9f\x5f\xfd\x53\x47\x11\x6e\x4f\x4b\x9f\x54\x47\xc5\xd1\x3a\xea\xbe\xab\xf2\xff\x7a\xea\x19\x56\x60\x48\x6c\x36\x73\x22\x7b\xf9\xc1\xe8\x1c\x43\x7e\x40\xc9\x3a\x7e\x40\x39\x4e\xf8\x01\x55\x98\xe9\x2b\x12\xdb\x89\xcf\x4f\x3e\xdf\x57\xec\xa3\x7f\xc4\x0b\xc6\xd1\x0f\xea\x03\xf9\xba\xa2\xff\x77\xb0\xe3\x33\x7c\xec\x2f\xdf\xb5\x1c\x62\xdf\x24\xd2\xe9\x7f\x91\xe8\x83\xfe\xd7\x2b\xdc\x3b\x17\x69\x44\xe0\x7f\x4b\x07\xea\x87\xc5\x3b\xa5\xce\xf9\x29\xa9\x4c\x9c\x9f\x92\xea\xe0\xf9\xe9\x77\x7c\x2f\xe9\x23\x2f\x5e\x38\x79\x72\x8e\x21\x9c\xd8\xff\xff\xff\x9f\x3b\x9c\x2c\x4c\x66\x1c\x27\x66\x2f\x7d\xbf\x09\x20\xa2\xa9\x91\x8b\x2e\x3a\x5a\x52\x03\x81\xcf\xd4\x08\x53\x13\x07\xad\xd5\x1c\x5a\x40\x08\x88\x68\x2e\x18\x06\xc7\x89\x73\x24\xef\x52\x86\x12\x0d\x39\x14\x6c\xae\x90\xe5\x6a\xc5\x27\xb2\x0a\x40\xe1\xbf\x00\x00\x00\xff\xff\x13\xca\x62\xda\x62\x4d\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x41\x6f\xdb\x30\x0c\x85\xff\x8b\xce\x3e\x75\xd8\x0e\xb9\x6d\x01\x76\x4b\x37\x6c\xe8\xa9\x08\x06\xda\x7e\xe9\x84\xca\x54\x20\x52\x2e\x84\xa2\xff\x7d\xf0\xb0\xd8\xed\xac\x74\x69\xe6\x36\xce\xd1\x30\x45\xbf\xcf\x24\x9f\x78\x7d\x6f\x2a\xcf\xa2\xc4\x6a\x16\x1b\x72\x82\xc2\x58\xde\x46\x15\xb3\xb8\xbe\x37\x4c\x0d\xcc\xc2\x08\xdc\xc6\x14\x46\xd3\xb6\x7b\xa2\xba\x0e\x10\x31\x0f\x45\x1f\x50\x91\x73\x08\xcf\x86\x24\xc8\x97\x70\xe9\x87\x98\xd2\x7b\x67\x1e\xd6\xc5\x2e\x80\x49\x6d\x8b\x1f\xb2\xf5\x2c\xbe\xcb\xe5\xa3\xfe\x11\xb2\x2e\xcc\x96\x12\x95\x0e\xbd\x48\x51\x52\xac\xa2\x52\x69\x9d\xd5\xd4\x9d\xf7\xbc\x0b\xea\xbf\xb1\x89\x5c\xa9\xf5\xfc\x5b\xc8\x00\xaa\x21\xbe\x84\x73\xa4\xb1\x21\x51\x3c\x95\xd8\xe7\xe8\xdf\x65\xb2\xfc\x1b\xa2\xb5\xb8\x9b\x5a\xfe\x50\x83\xd2\xf9\xea\xf6\x32\x36\xe5\x63\x81\xd1\xb2\xbe\xbb\xc8\x50\x82\x11\x6e\xd2\x47\xfd\xd4\x9d\xca\xc3\x52\xe3\x23\xeb\xd3\x5c\x17\xef\x3f\x4c\x09\x7b\x7c\x53\x32\xee\x56\xcf\x14\xe3\xaf\xb6\x83\xae\xc6\x55\x9d\xba\xf1\xfe\x63\xc2\x02\x6a\x9b\xfb\xd3\x43\x48\x40\xe5\x5b\x84\xf4\x8d\x14\xf9\x92\x8c\x90\xaf\x04\xe1\xab\x23\x9e\xd3\xb4\x0d\x40\xb7\x48\x8f\xec\x22\x29\x24\xdb\xa7\xa2\x3e\xd0\x0d\x3e\xfb\x3d\x13\xd9\x92\x8b\xc8\x27\x3a\xf5\x40\x46\x39\xac\x3b\xad\x5c\xc9\x3e\xc3\xc9\x38\xea\x69\xb0\x46\xaa\x7f\x92\x2c\x7d\x8d\x73\x93\x5d\xc5\x10\xc0\xfa\x3d\x73\x11\x65\xd4\xcf\xc9\xdf\x87\xbb\xf3\x80\x8e\x3a\x90\x6f\xea\xea\x1c\x6f\x81\x2f\xa0\x13\x38\x54\xd9\x0a\xce\xc7\xd1\x0f\x9d\x7d\xaa\xeb\xd1\xf0\x9f\x1f\x45\x40\xe3\x5b\xbc\x3a\xc8\x1b\xad\x46\x25\x39\xe2\x0a\xa7\xde\x8d\x5e\xfd\xde\xe9\xe2\x96\xbb\xcd\x23\xc3\x18\xd0\x90\x65\xd4\xcb\x7d\xdb\xc9\x7c\x5c\x3d\xe6\x56\x9d\x69\xd7\xab\xe3\x49\xd7\xbf\x02\x00\x00\xff\xff\xb3\xf3\xeb\x3d\x88\x0d\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

