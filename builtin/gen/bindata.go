// Code generated by go-bindata.
// sources:
// compiled/Authority.abi
// compiled/Authority.bin-runtime
// compiled/AuthorityNative.abi
// compiled/AuthorityNative.bin-runtime
// compiled/Energy.abi
// compiled/Energy.bin-runtime
// compiled/EnergyNative.abi
// compiled/EnergyNative.bin-runtime
// compiled/Executor.abi
// compiled/Executor.bin-runtime
// compiled/Extension.abi
// compiled/Extension.bin-runtime
// compiled/ExtensionNative.abi
// compiled/ExtensionNative.bin-runtime
// compiled/Measure.abi
// compiled/Measure.bin-runtime
// compiled/Params.abi
// compiled/Params.bin-runtime
// compiled/ParamsNative.abi
// compiled/ParamsNative.bin-runtime
// compiled/Prototype.abi
// compiled/Prototype.bin-runtime
// compiled/PrototypeEvent.abi
// compiled/PrototypeEvent.bin-runtime
// compiled/PrototypeNative.abi
// compiled/PrototypeNative.bin-runtime
// compiled/Token.abi
// compiled/Token.bin-runtime
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _compiledAuthorityAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xc1\x6e\xf2\x40\x0c\x84\xdf\xc5\xe7\x3d\xfd\xff\x2d\xd7\x9e\x79\x02\x84\x90\xc9\x0e\xd5\xaa\xc1\x46\xb1\x37\x25\x42\xbc\x7b\x05\x4a\xd8\x14\x51\xa0\xaa\x50\xd5\x5b\x24\x7b\xec\x6f\x66\xe3\xf9\x9e\x6a\x15\x73\x16\xa7\xca\xdb\x8c\x40\x49\xb6\xd9\x8d\xaa\xf9\x22\x90\xf0\x06\x54\xd1\x3a\xb5\xe6\x14\x48\xb3\x0f\xb5\xfd\x58\xa2\x40\xde\x6f\x8f\x5f\x1c\x63\x0b\x33\x3a\x2c\x02\x6d\xb9\xe7\x55\x03\xaa\xd6\xdc\x18\x02\x99\xb3\x63\x96\x9d\x57\xa9\x49\xde\x53\x45\x5d\xc2\x7b\xd1\xae\xb3\xd4\x9e\x54\xe8\x10\xa6\x40\x83\xfa\x4c\x74\xde\xba\x14\x8d\x98\xb1\x39\xda\xeb\x00\x43\x5f\x8b\x4e\xdf\xf0\x89\xfc\x21\x3a\x51\x19\x9b\xee\x31\x5e\x84\xf6\x6d\x44\xc1\xee\x37\xa2\xfd\x29\xf6\x2b\xbe\xa0\x6e\x92\x39\x62\xd1\xae\x54\x9b\xd3\xee\xa1\x0e\x89\xda\x9a\x5e\x9b\x5e\x9a\x52\x84\xf8\xd1\x4d\x19\xd3\x3b\xec\xff\xbf\x69\x13\xd7\x9e\x3a\x5c\x6e\x7a\x5a\x44\xc5\x3b\x76\xa8\xb3\x9f\x2c\xfc\x91\x8b\x28\xa1\x2d\x1f\xca\x7f\x79\xe3\x01\x4a\x0e\x1c\xe3\x13\x4e\x8b\x45\xa5\xdf\x68\xb6\x6b\x6e\x93\x44\xec\x10\xc7\xc7\x19\x6f\xe8\x8e\xf7\xb3\x6a\x18\x38\xf9\x81\x54\x6e\x5a\x7c\x61\x89\x29\xb2\x4f\x60\xd1\x41\x9c\x0e\x8b\x8f\x00\x00\x00\xff\xff\x80\x9f\x89\xb4\x3b\x05\x00\x00")

func compiledAuthorityAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityAbi,
		"compiled/Authority.abi",
	)
}

func compiledAuthorityAbi() (*asset, error) {
	bytes, err := compiledAuthorityAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthorityBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x76\xea\xbc\x0e\xde\x92\x24\x6b\x5c\x8e\xc7\xfd\x2f\xe1\x1d\x27\xa1\xd0\xd2\x12\x92\x7b\xe1\xf5\xfc\x97\x1c\x0a\x55\x62\x5b\xfa\xf4\x69\x42\xc1\x41\x81\x41\x48\x01\x38\x29\x82\x22\x80\xb9\x98\x02\x40\x12\xab\x80\x70\xf2\x15\x00\xac\x69\x6c\x2f\x54\x07\x4d\xa9\x0d\x6e\x6d\x30\xf2\x72\x4e\x13\x9b\x52\xe3\xec\x03\x21\xad\xd2\xc6\xab\x34\x17\x4b\x3d\xa1\x2e\x52\x44\x5b\xa5\x95\x4a\xa5\x3e\xea\x2a\x8d\xbc\x49\x13\x57\xf0\x2e\x8b\x94\x98\x56\x69\xab\x00\xc1\xc5\x57\x69\x84\x98\x94\x69\x97\xc3\x68\x52\x12\x3b\xa0\xcc\x13\x3d\x56\x7b\x57\xb9\x2c\x18\x04\x29\x42\x82\x2c\x3a\xd7\x30\x08\x3a\x38\xd9\x87\x3d\x7b\x2f\xd4\x23\xcf\x3a\x4e\x0f\x10\x00\x06\x0a\x08\x5c\x4e\x0c\x84\x14\x30\xd2\xad\xb6\x1d\xee\xb4\x45\x94\xe9\x3f\x87\xa4\x90\x7c\xe2\x02\x0e\x3e\xfd\x77\x40\x87\x80\x4d\x03\x08\x0a\x0c\x90\xe5\x9a\x28\x14\x98\x28\x00\xdc\x68\x81\x94\xee\xb5\x10\x7f\xa1\x16\x86\xf1\xeb\x7c\x81\x59\xef\x51\x68\xe5\x95\x28\x0c\xff\x84\x82\xe0\x76\x5d\xb5\x76\x7e\x3d\x32\x9e\xa6\xd5\x18\xa8\x97\xcf\x9b\x7b\x74\xaf\x53\xb0\xc0\xe5\x7a\x80\x27\x71\xbf\xc3\x93\xc4\x14\x21\xe6\x03\xbf\xcc\xfb\x94\xe5\x4e\xdb\x04\x2f\x88\x81\xbf\xb1\xfe\xe2\xa7\x1f\x99\x15\xd9\x2e\x51\xbe\xe4\x7e\x38\x72\xa2\xa6\x81\x60\xd0\x6b\xdf\xf0\xc2\xdb\xcc\xff\x27\x55\x04\x68\xf5\x08\x30\xe0\xd4\xfc\x83\x01\x69\xe2\xbb\xa0\x6f\x0e\xa9\xa0\x6c\x5e\x49\xf6\x25\x3f\x4a\x1e\x78\xbd\xeb\x2c\x96\xda\x7a\x3f\xf5\xf5\xdb\xf6\xdc\x0d\x3b\xa7\x9c\xc0\x11\xb7\x55\xb3\xce\x5c\xf7\xbc\xfa\x55\xf0\x7b\x3c\x63\x7d\x4f\xc6\xce\xfc\xe9\x57\x06\x1f\x41\x35\xa5\x23\x4f\x23\xfb\xf4\x23\x57\x16\x93\xc3\xfe\x03\x6a\xce\x0a\xc5\x69\x43\x98\x5e\xe1\xc1\xf7\x46\xee\x13\x6c\x61\xb7\x07\x6c\xe1\x28\x27\xd8\xc2\x05\x8f\xb1\x05\x45\xca\xcc\x97\x8a\x20\xb2\x64\xc0\xb9\xab\x0d\xf0\x9a\x2c\xf2\x69\xe0\x3f\xe1\x0e\x97\xec\xec\x33\x0a\x68\xde\x49\xf9\x26\x6b\x83\x0d\x25\x13\x0d\xad\xc6\x1a\xda\x53\x26\x30\x52\x31\x9c\xd2\xe5\x5b\x22\x50\x31\x57\xd1\x64\x62\xac\xc3\x88\x2a\xc1\xf2\x09\xda\xaf\xbb\xd9\xd0\xa1\xac\x42\xa0\x4d\xd1\x92\xb1\xca\xf2\xcc\x98\xeb\xe6\xa7\xea\xdc\x4b\xbb\x2e\xbb\x58\x52\x51\xfe\xaa\xfb\x8a\xef\x0f\x99\x78\x76\x70\x07\x39\xde\x43\x11\x0a\xd4\x7f\x8c\xe3\x32\xe2\x01\xc7\x15\xda\x09\x8e\xeb\xe7\xfe\xef\x19\x8e\xaf\xeb\xb2\xbf\x8f\xdf\x98\xf6\xf8\xad\x5d\xc7\xc2\xc7\xaa\xb1\xb2\xf4\x33\x0b\xef\xcf\x13\x78\xd0\x1d\x4c\x24\x0e\x71\xd2\x46\x8f\x4e\xb9\xb1\x73\xee\xb9\x9b\x94\x6c\xc2\x16\x15\xa3\x51\x2d\xc5\x9c\x4b\x78\xa1\xd1\xb9\x10\xb7\xea\x90\xb9\x7a\x1d\xc8\xd4\xb8\x06\x05\x7f\x78\x1f\x6c\x2c\x31\xaa\x3a\xb4\x3c\xb6\xe3\x29\xfb\xee\xac\xcb\x24\x6b\x45\x3b\xd1\x1d\xe4\x96\x72\xd3\xde\x66\xdf\xf8\x0f\x45\x9e\x15\x7d\x10\x79\x56\xf3\x89\xc8\xb3\xcf\xf3\xdf\x93\xbd\xc8\xfa\x9f\x5e\xe6\xdf\xed\xcc\xa3\xf9\xb3\xab\xce\xde\xd6\xf5\xbf\xe3\x45\xdf\xf7\xa2\xc7\xa3\xfc\xe9\xf9\xe9\xfc\xe9\x57\x2f\x7a\x7d\x3a\x7f\xfe\x89\x6c\x63\x40\xfa\xf2\xc6\x8f\xbf\x27\xe3\x39\x28\xa3\x8e\x96\xff\xef\xdd\x7e\xe8\xa3\xfe\x2d\xec\x4c\xff\x16\x71\xb0\x7f\xbb\xe9\xf6\xe7\xaa\x83\x5d\xfb\x3a\x2b\x2b\x42\x4e\xfa\xc6\xda\x58\x77\x6b\x63\x68\x37\x55\x9c\xb5\x51\x79\xad\x95\xf7\x3d\xdd\xed\x79\x7b\xb5\x71\x41\xe7\x50\x6c\xdf\xa2\x53\xe5\x8d\xe8\xc4\x61\x74\x6e\x7b\xd9\x71\xc5\xe5\x18\x3a\x0a\x80\x33\x06\x2e\xd3\xfa\x8d\xfd\x85\x7f\xb7\xfd\x31\xb9\xa1\x7d\x3e\x61\x6c\x71\xc2\xfe\x69\x63\x7b\xcf\xa4\x7c\xc1\xb4\x8f\x37\x62\xba\x3b\x6d\xdd\xcd\x56\x5f\xe6\xaf\xef\x27\xa4\x47\x98\x1e\xff\x15\xa0\xa8\x56\x45\xe7\x79\x6d\xfb\xf1\x8b\xaa\xfc\x5b\x7e\xa7\x7c\xc3\x19\xf4\xf3\x6f\xa1\xb3\xce\x5e\x2a\xcd\x13\xd5\xac\xd6\xfe\xa0\x9a\xd5\x4e\x27\xaa\x59\x1d\x7e\x6a\x52\x6b\xd6\xde\x18\x1b\xb6\x1b\x1b\xa8\x75\x89\x01\x54\xb6\xd8\x62\x65\x99\xd9\x2c\x7d\x7f\xde\xee\xa4\x76\xac\xcb\xfc\xab\x93\xda\xb4\x42\x77\xa6\xcd\x3d\x3c\x77\x26\xb5\xa5\xdf\x07\xc8\xa8\xa2\x64\xd9\xb2\x51\x02\xf1\xb9\xa2\x42\x03\x0c\xed\xa3\x8f\x41\xde\x99\xc0\xaa\xa6\xc1\x3a\xb2\x36\x1f\x65\xf4\x84\xe2\x55\x73\x01\x2e\x4d\x28\x43\xa0\x02\x0a\xab\x7b\x11\x00\x8a\xff\x05\x00\x00\xff\xff\xd0\x5a\xa2\x44\x38\x1c\x00\x00")

func compiledAuthorityBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthorityBinRuntime,
		"compiled/Authority.bin-runtime",
	)
}

func compiledAuthorityBinRuntime() (*asset, error) {
	bytes, err := compiledAuthorityBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Authority.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x6a\xf3\x40\x0c\x84\xdf\x45\xe7\x3d\xfd\xff\xcd\xf7\x1e\xf3\x04\x21\x14\xd9\x3b\x2e\x4b\x5d\xad\x59\x69\xdd\x98\x90\x77\x2f\x76\xe9\x26\xd4\xc1\x25\xa1\x4d\xe9\xd5\x3b\x42\xdf\x8c\x24\x6f\x0f\xd4\x44\x51\x63\x31\xaa\x5a\xee\x14\x8e\x82\xf4\xd9\x94\xaa\xed\x81\x84\x5f\x40\x15\x49\xf4\xd8\xb0\x1a\x12\x39\xb2\xb1\x9f\xbe\xb1\xf7\x09\xaa\x74\x74\x45\x06\xf1\x31\x69\x5c\x17\x05\x0f\xb1\x60\xe3\x49\x54\x8f\x06\xfd\xff\x8f\x8e\x3b\x57\x1a\xb2\x85\x01\x8f\xec\x3d\x39\x8a\xd9\x3e\x03\x9d\x15\xc7\xd8\xcd\x95\x3d\x8f\x5c\x77\x28\x2e\xd4\xd8\xb0\xc9\xc6\x75\xe8\xa6\x76\x93\x0b\xf9\x10\x95\xf2\x36\x4b\x63\x21\xca\x4c\x78\x4a\xc2\x52\xbe\x3e\x88\x05\x7e\xd0\x87\x39\x11\x7c\xa7\x8b\x21\xe0\xf5\x5a\xfe\x05\x19\xf6\x68\xb2\xcd\x93\x5a\xe5\x3a\xf7\xf6\x33\x68\x37\x46\x2b\xd8\xdb\x2f\xc0\xdf\x76\x21\x0b\xfa\x84\x21\x3e\xe3\x2f\xaf\xf6\x13\xbe\x8c\xff\x1d\xdf\xad\x0d\xe6\xd2\x63\xf9\x1b\x5c\x7c\xbc\xf3\x9d\xb4\x21\xe9\x9d\xf6\x6c\xf7\x16\x00\x00\xff\xff\x59\xe7\x7c\x26\x8b\x05\x00\x00")

func compiledAuthoritynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeAbi,
		"compiled/AuthorityNative.abi",
	)
}

func compiledAuthoritynativeAbi() (*asset, error) {
	bytes, err := compiledAuthoritynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledAuthoritynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledAuthoritynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledAuthoritynativeBinRuntime,
		"compiled/AuthorityNative.bin-runtime",
	)
}

func compiledAuthoritynativeBinRuntime() (*asset, error) {
	bytes, err := compiledAuthoritynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/AuthorityNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcb\xaa\x14\x31\x10\xfd\x97\x5a\x67\x25\x28\xd2\x3b\x5d\xb8\x13\x17\xba\xbb\x0c\x52\xdd\x5d\x2d\x81\xa4\x2a\x24\x95\x19\x9b\xcb\xfd\x77\x99\xb9\xfd\x42\xfb\xe5\x38\x32\xb3\xea\x86\x7a\x9e\x53\x75\x92\x3c\x3d\x43\x25\x9c\x14\x59\xa1\xd0\x98\xc9\x80\xe5\x90\x35\x41\xf1\x74\x30\xc0\xe8\x09\x8a\xd7\x8f\x01\xc9\xda\x99\x9e\x7b\x0b\x18\xd0\x36\x9c\xff\x92\x46\xcb\x3f\xe0\xe5\x60\x20\x60\x8b\xa5\x23\x28\x1a\x74\x89\x0c\x24\x45\xa5\xcf\x59\xb1\xb4\xce\x6a\x0b\x05\x84\x1c\x69\x0c\x6d\x32\x57\x6a\x85\xe1\xc5\x4c\xdb\xe9\xa2\x87\x7e\x86\xa2\xdf\x53\x20\xae\x29\x8e\x19\xb0\xae\x23\xa5\x74\x49\xd0\x3b\x1d\xd1\xe5\x49\x91\x6c\x59\xdf\xbc\x7d\x77\x69\xb0\x73\xc1\x10\xa2\x1c\x17\x90\xa5\x5c\x55\xe7\x94\x43\x82\x52\xc4\xed\x84\xc7\xc2\xbd\xd3\x16\xc8\x45\xce\x55\x14\xdd\xd7\x1c\x82\x6b\xb7\xa8\x9f\x42\xdb\x6e\xee\x68\xe9\xf4\x0f\xdc\x37\x51\xfc\x3a\xf1\x2a\xeb\x76\xf4\x92\x59\x57\x27\xa3\x11\x39\x35\x14\x3f\xbd\x16\x7b\xc0\xf1\xd4\x54\x59\x8f\x2e\xed\x99\xcd\xfb\x5b\xaa\xe2\xb7\x8e\x46\x5a\xe5\xc4\xb3\x92\x18\x7b\x2e\xd1\x21\x57\xf4\xa5\x99\x6f\xba\x33\xff\xd7\xbd\x5a\xe4\x33\xb5\xbe\x14\xf7\x48\x87\xcc\x0d\xd7\xf8\xae\x2b\x7c\x67\x29\xfb\xc7\x3e\x61\x3f\xe6\xc8\x54\xdf\xe1\x84\xfd\x6b\x1d\x9b\x3d\xf7\xdf\xe4\x72\x73\x4e\x4e\x9d\x9e\x67\xb0\x45\xf2\x68\xf9\x2c\xa6\xdb\x83\x44\x16\x6e\xbd\xe4\x34\xb7\x7c\x96\x6b\xfa\x49\x75\x4f\xc0\xf6\x2e\x2e\x04\x2c\xad\xe6\xe0\xde\x95\xde\xff\x1c\xf8\x36\xaa\xb5\x73\xa2\x23\xb1\x5e\x0d\x69\x65\x90\x0b\x11\xab\xef\x9a\xeb\x81\x7d\xb8\xbc\x73\xd0\xfd\x01\xec\xf0\x2b\x00\x00\xff\xff\x66\xc7\x72\x63\xff\x09\x00\x00")

func compiledEnergyAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyAbi,
		"compiled/Energy.abi",
	)
}

func compiledEnergyAbi() (*asset, error) {
	bytes, err := compiledEnergyAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergyBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x09\x7a\xf2\x38\x0c\xbd\x92\x16\x6b\x3b\x8e\xd7\xfb\x1f\x61\x3e\xc7\x81\x42\xe9\x4f\x09\x74\x99\x99\x3f\xf9\xda\x52\xe1\xc8\xf2\xf3\xd3\x93\x1c\x05\x07\x85\x04\x42\x0a\x90\x58\x11\x14\x01\xf2\x10\x53\x00\x60\xb1\x0a\x08\x4f\x5e\x01\x90\x94\xc7\x7e\xa1\x3a\x28\x83\x8e\xd6\x3a\x30\xa6\x39\x4f\x49\x62\x9b\x35\xa4\x67\x2b\xcb\x8a\x69\xb7\xa2\xa3\x42\x6b\x6d\x59\x73\x2c\x2b\x71\x71\xa3\x93\xb5\xed\x63\x19\xb9\x76\x51\xdb\xac\x24\xfb\x58\x83\x0c\x4e\x8c\xcb\xea\x79\x59\x43\x9a\x47\x49\xbb\xb5\xe3\xb2\xe6\x00\x89\x5a\xca\x66\x65\xdb\xad\xa5\xb0\x98\xf3\x6e\x6d\xba\xac\xcd\x03\x59\xea\x8a\x21\x49\xd9\xad\x4d\xa9\x37\xee\xcb\xea\x2a\x26\x65\xa2\xe8\x30\x9a\x14\x4e\x0e\x28\x73\xd5\x15\x16\xba\xcb\x2e\x1b\xe2\x35\xe6\x33\xa3\x89\xce\x67\x12\x08\xfa\xb6\x33\x04\x80\x4e\x8e\xc0\x4e\x42\xce\x8e\x8e\x32\x7f\x68\x7d\x17\x28\xe0\x20\x18\xfb\xd8\x00\x07\x67\xe7\xe9\x5f\xca\x1c\x8f\x6b\x56\x84\x0d\x13\x27\xd8\x9e\xf7\x04\xbb\x0f\xc7\xf9\xd4\x8a\xa2\xf7\x39\xbf\xc0\xba\x63\xfb\x59\xdf\x2b\xe0\xb6\x83\xcb\x17\xeb\xee\x8b\xe7\xdc\x3a\x63\xe4\x6d\x7e\xde\x66\x02\xc8\xc0\x18\xa8\xd7\x71\x4e\xcf\x41\xcb\xf7\x69\x8d\x81\xc0\x01\x83\x2f\xf0\x99\x23\xdf\xe3\x83\x3e\x26\x3f\x1d\x58\x81\x57\x44\x13\x1f\x16\x3b\xf3\xeb\xb3\x0b\xf5\x0d\xa3\xa0\xd8\x3c\xb0\xbc\xb7\xed\xd1\x21\x08\xe7\xab\xbd\x20\x94\x75\xbf\x5b\xd3\xdd\x95\x14\xb9\x5d\x49\xe9\x33\xc9\xa8\x5c\x7b\x3f\xe2\xb5\xdf\xe2\x43\xfc\x4d\xf8\x7c\x1b\xbe\xda\xf0\x65\x7c\x49\x6f\xf1\x25\x9d\xf8\xba\xca\xb5\x77\x85\x19\xe1\xfa\x7d\x64\x86\xd0\xdb\x19\x6a\xf9\x7a\xac\xcf\xb8\xb8\xf6\xa7\x99\x41\xbd\xdd\x46\x3b\x54\x11\x22\x7d\x9f\xb2\xf0\x59\x0d\xfe\xac\x2c\x8c\xe5\x21\x65\x61\xe5\x6f\x54\x16\xb6\x5b\x7c\xb8\xd4\x1f\x56\x96\xf0\xd7\x95\x85\x3b\xdd\xac\x24\x25\xfc\x8f\x69\x40\xe4\xd7\x35\x20\xa9\xdd\x22\x61\xf3\x77\x51\x7b\x3a\x93\x52\x7c\x80\x6f\xb7\x7f\x1f\xbe\x67\x2c\x2b\xb4\xa3\xab\x55\xd0\xcd\xba\xb2\x7c\xae\x68\x75\x82\x53\x1d\xe0\x22\xc3\x6c\x88\xaa\x48\x52\xd7\x61\xf4\x4c\x27\x38\x7d\x9d\xb2\x7e\x45\x39\x6d\x0b\x5f\xe6\x23\xeb\x3f\x32\xf6\x02\x01\x78\xfb\x3c\x67\x25\xd8\xe6\x3e\x84\xfc\x57\xcd\xec\x73\xd7\x44\xc0\xe9\x88\xc7\x83\x28\x0d\xaf\x52\x3a\x76\xe9\xa5\x57\x6b\x52\x1a\xa6\x61\x98\xc8\x1a\x76\x4f\x83\x5b\x9b\x3d\x78\x85\x61\x85\x28\xb0\x4b\x21\x80\x5c\xbd\x5a\xe5\x12\x24\x9e\x1e\x65\x52\x9e\x15\x61\x63\xe2\x64\xe4\xc6\xc7\x7d\x87\x19\x8e\xc4\xac\x2c\x41\x85\x3d\xea\xee\x1f\x2f\xcf\x0e\xaf\x9c\x43\x60\x5f\x01\xa4\xb9\x07\x74\x8e\xdf\x79\xe6\xf1\xc6\x04\x73\xe0\x82\xb2\x67\xbf\x06\x5e\x67\xbf\xe4\x81\x6f\xdf\x66\x11\xe3\xb6\xb3\xb7\xaf\x4f\xfb\xb8\x8b\x0a\x34\xed\x73\xb7\xf7\x2a\xa9\xa5\x5c\xfa\x7c\xd3\x8f\xcb\x0a\x7b\x99\xd3\x1f\x67\x8b\x1f\xe2\xe1\x57\x66\xcb\xef\xe4\xa9\xa4\x89\xdf\xbc\x15\xc1\xea\xd6\x8d\x4d\x74\x6d\x80\x57\xb6\xc8\x4f\x93\xe2\x8d\x13\x1f\xf5\x43\xb3\x2b\x79\x8b\xc5\xc1\x86\x92\x89\x86\x56\x4b\x1a\xda\x39\x13\xcc\xbf\xc6\x26\x3a\xaf\x50\xd6\x50\xd1\x6e\x89\x40\x51\xab\x56\x1d\x66\x8a\xda\x95\x55\x4e\x1a\x78\x47\x91\x37\x56\xfc\x9d\xbb\xbc\xad\x9a\x9c\x24\x01\xaf\x3e\xee\xa4\x92\xb3\x23\x96\xec\x69\xde\xb3\xca\x05\xef\x19\xb1\x14\x87\x4f\x5d\xdf\x29\x4f\x14\x90\xae\x33\xe7\xa8\x0a\xf5\xae\x3a\xab\xfc\xec\x3b\xb7\xfd\xa1\xef\xd0\x21\x3f\xa8\xff\x4f\x22\xbd\xf3\xec\x01\xcd\x0b\x28\x77\x34\x2f\x70\x3c\xa1\x79\xc1\xf2\x84\xe6\xad\xff\xf4\x93\xfe\x24\x5d\xf7\x27\x92\x92\xa7\xf1\x8a\x16\xbc\x57\xdc\x19\x7f\x18\xf3\x1f\x98\xf7\xbe\xd6\x1d\xca\x1b\x4f\x47\x46\x63\xf2\x19\x4d\x6e\x4d\x4c\x0e\xce\x74\x94\xfd\x20\x11\x02\x3d\x5c\xff\x2a\xf6\x67\xcf\x77\xd8\x9f\xa3\x3f\xc1\xfe\x5c\xd2\x31\xf6\x1f\xe3\x84\x94\xbd\x2a\x16\xc1\x9f\xab\x8a\x04\x9f\x55\x45\x63\x15\xad\xaa\x04\xf3\xb4\x40\xa0\x4d\xd1\xd8\x92\xca\xfc\xcf\x48\xc5\x70\x3e\x33\x3f\x69\x7a\xa4\x2a\x6e\x6b\xac\x8f\xd7\x80\xa3\x9c\x47\xf6\x96\x1a\xfc\x7e\xdf\x59\x6a\xbb\xc3\xc2\xd2\xf1\x09\x16\x96\x61\x2f\xf5\x9d\xab\x36\x1f\xd2\xab\x2f\xed\x0a\x7e\xa9\xeb\xfc\x48\xe3\x1d\x11\x37\x4c\x7b\xce\x62\x47\x59\xc6\xd1\x1b\x78\x13\x4f\xe7\xce\x82\xbf\x49\x5b\x7f\x00\xb3\xab\x53\xe1\xf9\xcd\xdb\x03\x1c\x6f\x3c\xee\x70\xbc\x09\x3f\xc1\xf1\xa6\x71\x8c\xe3\xbb\x72\xb6\xde\x7f\xf0\x3c\xd1\x5e\x38\x4f\xd0\x76\xa2\x38\x9f\x25\x00\x1e\x3b\x4f\x1c\x56\xc2\xda\xdb\xc8\x15\xd7\x7b\xde\xff\x27\x47\xe1\x73\x8e\xf6\xbb\xe7\xff\xfe\xd9\xf9\x7f\x32\xf0\x50\xc4\x07\xdf\xed\xb4\x36\x48\x28\x37\x2c\x9d\xaa\x47\xd1\xa8\x54\x40\x7d\x54\x36\x6f\x39\x87\x50\xc9\x36\x9b\xbf\x9a\x32\xa2\x92\x0f\x91\x9c\xda\x10\xe2\xc2\x7d\x9c\xf7\xf6\x81\x77\x3b\xa7\xca\x0a\x90\x51\x45\xc9\xb2\x65\x23\x06\x71\x82\xec\x2d\xa2\x52\xcd\x4d\x12\x68\xee\x64\x99\x7a\xef\xb5\x43\x49\xb9\x59\x63\x0e\x52\xac\xae\xa3\x0a\x5b\x1a\x1c\x19\xd9\x02\x4b\x36\x91\x14\x1d\x80\xe2\x9f\x00\x00\x00\xff\xff\x7b\x7c\x16\xb6\x80\x1e\x00\x00")

func compiledEnergyBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergyBinRuntime,
		"compiled/Energy.bin-runtime",
	)
}

func compiledEnergyBinRuntime() (*asset, error) {
	bytes, err := compiledEnergyBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Energy.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x41\x4b\x03\x31\x10\x85\xff\xcb\x9c\x73\x12\xf4\x90\xa3\x77\x4f\x1e\x4b\x91\xd9\xee\x54\x02\xd9\x99\xb0\xf3\xa6\xb2\x94\xfe\x77\x11\x5c\x4a\xb5\xd8\x15\x45\x7b\x0c\xbc\x17\xbe\x2f\x33\x59\xed\x69\x63\xea\x60\x05\x65\x8c\x21\x89\x8a\xb6\x80\x53\x5e\xed\x49\x79\x10\xca\xc4\x7d\x3f\x52\x22\x4c\x6d\x3e\x89\x3b\x1d\xd6\x69\x0e\x28\xa3\xec\xe4\x69\x60\x87\xbc\x25\x2d\xf0\xf1\x8e\xf3\xfd\xc6\x13\x77\x55\x28\x6f\xb9\xba\x24\x72\x30\xe4\x21\xc0\x5d\xa9\x05\x13\x65\xda\x15\x79\x39\x76\xb7\xa1\x1b\x14\x53\x3a\xa4\x2f\xc0\x3f\x81\xc1\xc0\xf5\x3e\x46\x95\xfe\x12\x5d\x14\xc5\xcd\xed\xdd\x6f\xd2\xbd\xb7\x17\xbf\x6b\x3a\x06\x06\x0b\xc5\x79\xb8\x53\x43\xee\x4f\xcd\x16\xd1\xab\xe9\x1c\xba\x06\x07\x8f\xee\xd2\x74\x3a\xb3\xba\x70\x34\xdf\x90\x5b\xb4\x3e\x8f\xd1\x5a\x9d\xfe\x61\x7d\x7e\xfa\x2b\x9f\x05\x7f\x43\xbd\x7e\x0d\x00\x00\xff\xff\x39\x77\x62\x59\x4d\x04\x00\x00")

func compiledEnergynativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeAbi,
		"compiled/EnergyNative.abi",
	)
}

func compiledEnergynativeAbi() (*asset, error) {
	bytes, err := compiledEnergynativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledEnergynativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledEnergynativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledEnergynativeBinRuntime,
		"compiled/EnergyNative.bin-runtime",
	)
}

func compiledEnergynativeBinRuntime() (*asset, error) {
	bytes, err := compiledEnergynativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/EnergyNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x4d\x6b\xdc\x40\x0c\xfd\x2f\x3a\xfb\xd4\x96\x52\x7c\x0b\xe9\xa5\x87\xc2\x9e\x7a\x09\x61\xd1\x7a\x94\x74\xa8\x57\x72\x67\x34\x4e\x4c\xc8\x7f\x2f\xbb\xb6\x33\xfe\x4e\xda\x9a\x35\xb9\x2d\xec\xd3\xf3\xd3\xd3\x93\xe6\xe6\x09\x32\x61\xaf\xc8\x0a\xa9\xba\x40\x09\x58\x2e\x82\x7a\x48\x6f\x9e\x80\xf1\x48\x90\x02\x24\xa0\x55\x71\xfa\x85\xc6\x38\xf2\x1e\x9e\x6f\x93\xf6\x4f\x2c\x0a\x27\x25\x39\x0f\x09\x48\xd0\x61\xad\x35\xc4\x6a\xb5\x8a\x1c\x87\x4a\xc9\x7f\xfc\x00\xcf\x49\x04\xf1\x4e\x1e\xc8\x75\x30\x22\xf9\xf9\x23\x05\x56\x78\xc8\x09\xd2\x3b\xcc\x3d\x25\xe0\x15\x95\xbe\x07\xc5\x83\xcd\x4f\xac\x29\x94\x96\x1e\x62\xe1\x5d\xe0\x4c\xad\xf0\x99\x7d\xb6\xb3\xb1\xfa\x6b\x09\xac\xd3\x1d\x44\xf2\x60\x59\xbf\xac\x29\xab\xa9\x1e\x3b\xbe\x6f\x75\x2d\x5a\xef\xa8\x94\x5f\x74\x15\xa1\x51\xfd\x9b\x34\xb2\x70\x0b\xfa\x4b\x03\x27\xcc\x79\x19\x6b\xd4\x57\x38\x29\xc4\x63\x3e\x13\x0d\xb5\x47\xda\x9d\x21\x64\xfa\x26\x7f\xfe\xd4\x4d\x47\x4d\x33\xe9\x45\x04\xfd\x0e\xe2\xc2\x71\x34\xab\x08\xa8\x1d\xc5\xbc\x9d\xf4\x1c\x8e\x1e\x29\x0b\xda\x55\x54\x87\x31\x22\x14\xdd\x3d\xe9\xa2\x1a\x83\x8a\x03\x6b\x36\xcf\x4d\x54\xb7\x5f\x58\xca\xce\x6a\x18\x73\x91\x68\xcd\x37\xf3\x06\xa3\xf7\x73\x4e\xf7\xb3\xf3\xda\x66\x77\xdb\xbf\x50\x73\xa7\x66\x96\x0f\xab\x2a\x66\x3f\x7f\x88\x5a\xbe\xbf\x16\x56\x87\x99\x6e\x34\x88\x76\x91\xbf\x7d\x5d\x4e\x4c\x1d\x97\x8d\x44\xbe\x6a\xa8\xa1\xf7\x66\x68\x73\x8b\x36\xbe\xec\x13\x56\x96\x3d\x13\x67\xee\xfb\xda\xcf\x39\xb2\x70\x75\x94\xe0\xa7\x9c\xb5\x6c\xe8\x91\x4c\xdb\xcf\xe0\x79\x9f\xbe\x21\x2f\x35\x0d\x5d\x5b\x54\x7f\x72\x69\x30\x57\x23\x5e\x2a\x89\xf5\x5f\x65\x2e\xc6\xe1\xbf\x84\xee\x1a\xe6\x95\x84\x96\xc3\xe5\x59\xd5\xd5\xd1\x6a\xf6\x25\xdf\xfe\x09\x00\x00\xff\xff\x74\xd4\xe1\xf2\xad\x0a\x00\x00")

func compiledExecutorAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorAbi,
		"compiled/Executor.abi",
	)
}

func compiledExecutorAbi() (*asset, error) {
	bytes, err := compiledExecutorAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExecutorBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x0b\x76\xf3\x2a\x0e\xde\x92\x24\xd0\x83\xe5\xd8\x18\xf6\xbf\x84\x39\x02\x9c\x38\x75\x12\xc7\xe9\x6d\xda\x3b\x33\xed\xf9\xd3\x1c\x6c\x83\xd0\xf3\x93\x84\x7f\x01\x03\x81\x08\x4c\x02\x10\x83\x20\x08\x02\x4c\x95\x55\x00\x20\xb0\x66\x40\x78\xf3\x27\x01\x44\x09\x75\xfc\xa0\x18\x48\x80\x09\x63\x0c\x09\x31\xfa\x3a\x73\x64\xf5\x51\x24\x2b\x69\x2e\xd2\x46\x11\xcb\x18\xb5\x05\x43\xa9\xda\x47\x63\xed\xa3\x81\xca\xc2\x33\x52\x1f\x4d\x34\x46\x4b\x85\x0c\xa9\xb4\x51\x2a\x63\x34\x2d\xd1\xd0\xa2\xb5\xd1\x10\x42\x1f\x9d\xb0\xce\x22\x56\xfb\xe8\x62\x63\x94\xc3\x84\xd3\xd2\x47\x23\xce\x63\xd4\xc2\x1c\xe6\xa5\xcf\x10\x63\xee\xa3\x45\x19\x2b\x69\xdf\x45\xb4\x41\x59\x9d\x40\x34\xd1\xdc\x47\x33\xb0\xf2\xec\x5c\x34\xa8\x0b\xcf\x21\x1a\x20\xfb\xae\xfd\xca\x75\x9c\x1b\xc7\x2b\x3b\xff\x0d\x82\x40\x30\xdf\x17\x18\x98\xf3\xff\xc2\xbf\xa3\x1f\x94\x04\x02\x04\xfe\x6c\xa2\x84\x09\xb8\xfd\x0a\x02\xe3\xcc\xe2\xb4\x44\x60\x34\xb0\xe0\xab\x63\x42\x59\xff\x1a\xba\xfc\xfd\x59\x23\xe4\xfe\x7b\x1d\x4b\x34\x66\x1a\xcf\x27\x84\x90\xa0\x86\xcd\x9e\x90\xa6\xdd\x9e\x30\xb8\x3a\x71\xcc\x37\x6b\x93\x80\xd3\xda\x3f\x37\x6b\xe0\xd1\x0a\x3c\xef\x57\xf0\x1d\xff\x1c\xd7\xb8\x3a\xe5\x00\x5b\x2a\x52\xd9\x53\x91\xf1\x3e\x15\x2b\x77\x1f\xae\xa0\xb1\xdc\xf0\xc6\x44\xf7\xf4\xdd\x1b\xdb\xc8\x4b\xcf\xec\xf5\xcc\xbd\x9b\x35\xe4\xbe\xcc\x8c\x1f\x8c\xc7\xbd\x0e\x59\xf8\x00\x9d\xb0\xea\xb0\x21\x04\x23\x26\x0b\x86\x86\x8c\xb7\x7a\x66\xc0\x78\x95\x89\xdb\x43\xb7\x08\x9e\xfd\x7e\xec\x92\xa6\x09\xdd\xaa\x8d\xa0\x3d\x6f\x11\xc6\x1c\x5d\xc2\x4d\x7e\x64\xe2\xf2\xe3\x21\xd1\xd4\xfe\xd9\xd0\x4b\x6c\x1e\xaf\xcf\x95\xcb\x98\x2b\xf8\xda\xd2\xf8\xd1\xd6\x77\x0b\x71\xff\x3a\x41\xb8\xb5\xc3\x66\x0f\x33\x43\xb2\x75\xf6\xeb\xef\x13\x2b\xa1\xb2\xd7\xcf\x10\x1e\xe8\xe7\x77\xac\xe4\x25\xfd\xb6\x29\xec\x2c\x28\x84\xba\xa7\x70\x9e\x7e\x86\xc2\x8d\x94\xc9\xf5\xe3\x66\xa4\x45\x3e\xac\x80\x4d\xaa\xce\xcd\x08\x83\xfb\x9d\xc3\x5d\x96\x3d\x3a\x1a\xa4\x30\xe6\xc5\xad\x56\x5b\x70\xb9\x5a\x0c\xea\x2b\x74\x2f\x76\xd1\x07\x6c\x4f\xd0\x86\x23\x39\xf0\x57\x6f\xf8\xc8\x13\x1f\x7a\xc4\x50\xe2\x8e\x93\x11\xd3\xcf\x79\x44\x24\xdb\xcb\x33\x92\xee\xa9\x88\x0f\xe4\x79\xa4\x31\x18\x2b\xee\x57\x60\xdb\xaf\x60\xcb\x0f\xee\x33\xe1\xde\xf3\xc7\xb4\x8f\x3f\x71\x2e\x6f\xee\x73\x5a\x74\xbf\x42\xce\xbb\x15\x18\x7e\xc0\x76\x2f\x54\xd4\x45\x6e\xb5\xf1\x4e\xec\x7f\xa0\x85\x4e\xa7\xdf\xe1\x96\xd1\x7c\x27\xf9\x3d\xfe\x8d\xda\xa7\x3f\xe7\x2b\xf5\xab\x80\x1c\x53\xff\xde\x2c\xca\xb1\xa1\x8f\xac\xde\xaf\x21\x45\xe8\xb4\x32\x18\x75\xaa\x9e\xdf\x69\x4d\x53\x9c\x47\xa2\xbe\x97\x3a\xf6\xe2\xfc\x33\xfa\xf9\x68\xe3\x9e\x80\x2f\xfe\x62\xec\xfb\x60\x77\xce\x5b\x87\xd8\xdc\x10\xa0\xf3\x54\x2b\x58\x0e\x9a\xa6\x77\x41\xf6\xa0\x02\xa2\xfb\xb7\x7d\x04\x14\xa0\xb8\x8d\x90\x5a\x85\x94\x25\x49\xd6\x28\x49\x4a\x98\x08\x94\xa5\xc8\x2c\x45\xaa\xaa\x14\x02\xa9\x4a\x04\x4a\xc2\x2a\x52\x65\x16\x96\x48\x20\xa8\xa0\xa0\x74\x9d\x4d\xab\x54\x15\x61\xa5\xef\xd0\xde\xb5\xeb\x81\xa6\x2d\xab\x44\xdb\xe7\x07\x30\xc4\x33\xa9\xae\xf2\x34\xe4\x68\xe8\x12\x05\xea\x56\x6e\xc1\x25\x0b\x84\x9a\x80\x99\x61\xd5\x5d\x8f\x15\x0f\xf5\x77\x58\xa3\xb4\x55\x21\xb4\xef\x4f\x56\xe8\x4f\x5d\xd7\x70\xdb\x3a\xc5\x8f\xaa\x0a\x88\x9c\x97\xa2\x5c\x04\x2a\xea\x4c\xc2\x8b\x16\xc8\x5c\x42\xca\xac\xd3\x5c\x29\x86\x39\x07\x94\xac\x85\x33\x55\x5b\x8c\x51\x15\x97\x49\xa6\x7c\xf1\x13\xa0\xf5\x56\x3b\xde\x97\x7c\xe7\xf9\x57\xb9\x4f\x9e\x71\x74\x6b\x0e\x67\xbc\xcc\x03\xdb\xbb\x83\xa0\xd3\xf6\x19\xdb\x3f\x73\xce\xbf\x5e\xe7\xc2\xfc\xd8\xb3\x6d\xee\x5a\x5e\xba\xab\x1c\xdc\xf5\xd0\xdb\xbc\x41\x7d\xc3\x47\x1c\x1b\x36\x6d\x08\xd5\xbd\xd5\x98\x93\x20\x34\x84\x42\xa9\xc5\xa2\x53\xa8\x69\x8f\x99\xe8\xd5\x75\xda\xb8\xa5\xd4\xb2\x6b\xc7\xd3\x0d\x53\x8a\x23\xdc\x76\xbf\x23\x77\x8e\xbe\xbe\x05\xa6\x84\x6b\xc4\x1a\x4f\x09\xcf\x1d\x93\xa5\x8b\xee\xd0\xd0\x9d\xe4\x58\xbf\xd9\x18\x53\x1a\x9c\x5c\xa3\xa4\xcf\x8a\x6d\x0e\xf5\x6c\xdf\x69\x09\x03\xcd\x77\x84\x37\x6f\x10\x9e\xeb\x9e\x8e\x38\x64\xd3\xfc\x25\x0e\x9d\x8a\x42\x38\xb2\x26\x41\x48\x61\xfa\x5c\x7c\xc0\x74\x14\x1f\xfc\xaf\x8a\xa0\x64\x49\xdb\x48\x70\xdf\xfb\xdf\x58\xf6\x13\x9f\xde\xb8\x4e\x4d\x07\xba\xd0\x36\xfb\x9f\xff\xf6\xfe\x93\x44\x61\x29\x7e\x87\x46\x4d\xdf\xd9\xff\xc0\x2b\xa7\x2c\xf6\x1f\x8c\x6c\x0d\x99\xdd\x4a\x40\x10\x26\xfd\x24\xff\xed\x90\xff\x5f\xf4\x8d\x40\x58\x4d\x92\x06\x8d\x1a\xee\xad\x77\xcc\xff\x5a\x8f\xf0\xe5\x40\x6c\x30\x78\x32\x43\xfc\x20\x4f\xe6\x43\xcc\x16\xa5\x4a\x25\x90\x45\x50\x8a\xa6\x3d\x97\xb6\x9c\x79\x8d\x27\x71\x54\x46\xb6\xfe\xfb\x9a\xa1\xde\x68\x0f\xae\x59\x02\xc3\x6f\x6b\xf0\x5a\xa1\xe9\xda\xdc\x7d\x7d\xc7\x4c\xcc\x2d\x46\x5d\xaf\x9f\xc6\x71\x69\xd4\x5b\xce\xa1\xb9\x11\x73\xce\x61\x39\xfc\x3d\x2c\x27\x28\xb1\x79\xb4\x37\x70\xdc\x4e\xbb\xee\x63\x39\xb8\xe6\x66\xed\xf3\x94\xb6\x6c\x22\x43\xce\xfa\x41\x2b\xd4\xb3\x91\x41\xa3\xa0\x92\xa8\xb0\xde\xe1\xe5\x99\xc8\xf0\x82\x67\xc2\xc1\x93\x85\xf1\x83\x3c\xe1\x43\x9e\x94\xe6\x97\x9e\x78\xa3\x77\x78\x62\x10\x7e\x39\xfb\x7b\x6c\xf9\x2e\x83\x1a\x59\x9b\xa7\x68\xfe\xf2\xd7\x68\x7d\x48\x25\xcf\x43\x5b\x8a\x95\x0f\xd6\x1e\x96\x37\x62\x7b\xaf\x3e\x88\xd4\x7e\x97\x28\x81\x04\xa9\x8e\xb7\xb6\xb5\x07\x25\x41\x09\x1a\x47\xa5\x02\x7d\x66\xff\xf6\xaa\x17\x7b\xa5\xf6\x10\x29\x84\x3e\x7a\xcd\x0d\x5e\xed\xd1\xa8\xbd\xd1\x39\x1d\xd5\x15\x30\xe7\xe3\x4f\xe9\x90\x3c\xeb\xe9\x0e\x0a\x30\x7e\xed\xfb\xf5\xde\x87\x05\x08\x10\xd6\xbc\x29\x8e\x8c\xbc\x57\x0f\xef\xf5\x55\xdc\x7a\xc9\xe3\xea\x8a\xa3\x2a\xb3\xe7\x73\x8c\x43\x43\x60\xad\x9b\xdf\xf4\x56\xda\x33\x10\x9c\x02\x7f\x26\xac\xf1\xe3\x4e\xdf\xc4\x1c\xc1\x13\xa3\xdb\x86\xc5\xf6\x17\x8c\x50\x8d\x99\x6e\xaa\xf1\xc0\x0f\x24\xdd\xf2\x41\x18\x9e\x37\xf4\x4a\xd3\x93\xba\xfc\x03\x1c\xfd\x7a\xed\xe1\xde\xd8\x8a\xbd\xdd\x74\x3e\xe8\xcd\xeb\xa1\x7d\x46\x65\x85\x16\xdf\x82\xa0\xc6\x5e\x0b\x1c\x16\xeb\xb6\x1a\x3c\xfa\xf5\x9c\xe8\x55\x6f\x5e\xe0\x5e\xa5\x20\xd2\xf3\x4e\xe7\x39\x9f\xba\x91\x11\x22\x98\x1d\xc6\x54\x24\x48\xa3\x4b\xfe\xe5\xf9\xa6\x17\xfb\xb1\x2f\xfd\xcd\x53\x15\xf9\x6d\xaf\xf4\x82\xa2\xdf\xd4\xbc\x5b\xfc\x7b\x07\xdf\xee\xb8\xba\xc1\xa1\x77\x38\xbe\xad\x62\xd2\x7e\x76\xbb\x9d\xfd\xf5\x5d\x5f\x57\x3d\xc3\xa9\x2d\x35\x71\x47\x0d\xe6\x33\x28\x5b\x40\xf6\x33\x2c\xe7\x66\xb0\xfd\x0c\xe5\x4c\x5d\x78\x3a\xcc\x47\x3e\xc9\xd1\xbc\xa5\x86\xba\xd7\xde\xfa\x70\x41\x24\x4c\x23\xb3\x41\x82\x79\xea\xfd\xee\x9e\x17\xd9\x25\xd7\xd2\xaa\x4b\x9a\x73\xe5\x2c\x79\x99\x96\x12\x92\x4d\x12\x27\x08\xc0\x61\x4a\x46\xc6\x98\x73\x99\x08\x96\x6c\xa4\xcb\x9c\x31\x80\x72\x9c\x53\x51\xcb\x9a\x03\x4e\x37\xb5\xe5\xad\x77\x79\x23\x2b\x39\xca\x47\x0c\xba\x6f\xf2\x7d\x5d\x72\x13\x44\xb2\xaf\xf5\xbb\x53\x39\xd9\x35\x4b\xc1\x10\x3f\xd9\xdf\xc1\xd3\xf5\xab\x81\xa6\xae\x08\xaa\x67\x80\x0d\x47\x85\x1b\x8c\xf5\x00\xb5\x9f\x95\xc4\x41\x7f\x87\xce\x57\x4b\x3f\x81\x99\x2f\xf2\x8c\xf4\xc1\x98\x4c\x87\xf5\xc8\xfb\xd8\xf8\x46\x9a\xb9\x21\x61\x94\xa8\x69\x2b\xcf\x86\xb7\xa3\x67\xa9\x12\xc4\xce\xdb\xd6\x8b\xf2\xc4\x8b\x4c\x7f\x2d\x0f\x7a\xdd\x27\x9f\xed\xa2\xd5\x98\x67\x8e\x31\xcc\x45\x44\xaa\x29\xcd\xd9\x26\x65\x4a\xa1\xa4\x54\x88\x20\x4e\x6e\x46\x85\xcb\x1c\x16\x5a\xa2\xf1\x62\x22\x95\x0a\x86\xac\x65\x8a\xb7\x95\x97\xef\x48\xe3\x44\x17\xed\x37\x91\xed\xa8\x53\x20\x4f\xfc\xa7\x2a\xa8\x7b\x0c\x5b\xdc\xae\x08\x5c\xae\xad\x27\x1e\x1f\x70\xfa\x5f\x59\xa7\x18\x52\x10\xf9\x64\x7e\x31\x9d\xcf\xff\x9f\x65\xf3\x2f\x49\x81\x20\x85\xc9\x7e\x51\xe3\x23\xc1\x25\xdf\x45\xa5\x0f\x62\x81\xe3\x5e\xd6\x1d\xad\x67\x35\x85\xfb\xb5\x93\x17\xb5\xbe\xf3\xf9\xd9\x59\xb6\x7b\x7c\x0e\xfd\xfb\xdf\xab\x95\x5d\xe2\xbe\xd6\x0f\xd6\xca\x8e\x6d\xe5\x8e\xec\x6e\xac\xe7\x0d\x5b\xe9\xfc\x78\xcf\x4e\x7e\x5d\x7e\xa7\xce\xe3\xbc\xa7\xa3\x23\x47\xfc\xd1\xce\xcf\x0f\x65\x51\xcf\x74\xe3\x55\x7d\x7d\x01\x5b\x20\x26\xba\x3d\x7f\xf7\x87\xd1\xbc\x20\x4e\xf0\xc9\xfa\xf7\x61\xb7\xe4\x10\xcb\xaf\x98\xa4\x21\xc5\x9b\xb3\x77\x6f\xa3\xc6\x5b\xf9\x1e\x9d\xbd\xfb\x3f\x96\x7f\x11\xcb\x47\xe1\xff\x19\x2c\x3f\xdb\xfc\x5f\x8f\xe5\xbf\x13\x31\x1e\x9e\xdc\xbb\x60\x8b\x4c\xf9\x8f\x63\x0b\x56\xd7\xe3\xa0\xac\xbb\xb3\x01\xff\x42\x1c\x9e\xcb\x27\xcf\xef\xfc\x9b\x70\xf8\xc1\xb9\xd5\xf5\xf3\x3b\x52\x7c\x7c\xde\x75\x7b\xca\xaa\xc9\x69\x99\x3f\x99\x9f\x1e\x7b\x16\xcf\x44\xab\xfa\xf8\xd2\x4f\xca\x6b\xef\x83\x25\x0d\x22\x92\x6e\x65\xf5\xe3\x98\xfb\x8d\x8e\xc3\x9b\x5a\xf1\x8f\x9c\x2d\x3e\xd5\x95\x7e\x97\x27\xb4\x9e\x3c\x1e\x3d\xe8\x97\xcf\x16\x63\xc9\xba\x3d\x5b\x8c\x25\xe5\xe3\xb3\xc5\xed\xa9\x6f\x9e\x2d\xc6\x32\x4d\x8f\xcf\x16\xaf\x9a\x03\x70\x7d\x63\x17\x42\xef\x38\x99\xf0\x54\x87\x6e\x0d\x8b\xa9\xfa\xc1\x33\x51\x2f\xbc\x4d\xf2\x3c\x92\x24\x47\xb8\x97\xb7\x4b\xf8\xf6\x44\xc7\x3e\xd2\x9c\xa5\xfd\x08\xd1\xfe\x58\xb6\xf5\x24\x5a\x9e\xa1\xfd\x10\xfd\x35\x6e\x3d\x7b\x1f\xe2\xd9\xdb\x52\xe1\x14\x3e\x3e\x97\xd9\xaf\x27\x18\x08\x52\xfa\x4b\xc8\xe6\x46\x32\xf5\x9f\xa8\x30\x7e\xc1\xe1\xd4\xfc\xcd\xe0\x73\x3f\xd3\xbe\x72\x62\x26\xd6\x5a\x78\x86\x98\xfa\xfb\xa0\xa3\xdb\xf8\xaa\x9f\xba\xe7\x5d\xae\x6f\x5f\x34\x4f\xd6\xfe\x0f\x04\xa3\xd5\x87\x11\xd4\xb9\x9f\xaf\x69\xf4\xb8\xf7\x0c\xe6\x2b\xa8\x31\x3b\x4d\x48\x69\xa5\x00\x46\x0f\xda\xaf\x18\xe1\x7a\x55\x13\xb6\xae\xb0\xdf\x83\x8e\xf8\xdb\xb8\xb9\xbf\x6a\xa7\x76\xf8\xea\x0d\x37\xfe\x0d\x09\x61\x69\xdd\xe1\xd1\x1f\xf6\x91\x20\xa3\x73\x8c\xe1\xda\x39\x6e\x55\x03\x42\xce\x8d\x1f\x73\x3b\xad\x33\x56\xb9\xbc\xe9\xb9\xc6\x9e\xf1\x2e\x15\xa0\x5f\x8d\xb0\x9d\xc3\x3f\x01\x26\x14\x16\xd2\x49\x27\xa5\x00\x6c\x04\xd3\xa2\x69\x49\xcb\xb4\x2c\x55\x6b\xc8\x35\x6a\x84\x18\x70\x5e\x44\x63\x0d\x00\x18\x6b\x0c\x29\x56\x8e\x16\xc1\x74\x89\x11\xe6\x25\xd7\x45\x42\x48\x29\x08\x3b\xeb\xff\x13\x00\x00\xff\xff\x0f\x32\x83\x75\x16\x43\x00\x00")

func compiledExecutorBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExecutorBinRuntime,
		"compiled/Executor.bin-runtime",
	)
}

func compiledExecutorBinRuntime() (*asset, error) {
	bytes, err := compiledExecutorBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Executor.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\xd3\x41\x4b\xc3\x30\x14\x07\xf0\xef\xf2\xce\x39\x4d\x1d\x92\xa3\xe8\xc1\x83\x20\x6e\xe0\x61\xf4\xf0\xd2\xbe\x4a\x68\x9a\x84\xe4\x65\x2e\x8c\x7d\x77\x69\x99\x5b\x0f\xe2\x2a\xa2\xed\xad\xd0\xfc\x79\x3f\xfe\xbc\xb7\xd9\x43\xe9\x6c\x64\xb4\x0c\x92\x43\x22\x01\xda\xfa\xc4\x11\xe4\xa6\x10\x60\xb1\x25\x90\xc0\x8e\xd1\xac\x92\xf7\x26\x83\x00\x97\xf8\xf8\x62\xff\xf9\x00\x04\x70\xf6\xdd\x57\xd2\x96\x17\x37\x4b\x38\x14\x02\x3c\x66\x54\x86\x40\xd6\x68\x22\x09\x88\x8c\x4c\x4f\x89\x51\x69\xa3\x39\x83\x84\xad\xa6\xf7\x73\xb6\x4e\xb6\x64\xed\x2c\x1c\xc4\x37\xac\xd3\xd0\x0a\x19\xcf\x61\x95\x99\x62\x3f\xf6\xf8\x5b\x19\x6c\x68\xa1\x3a\xcc\x05\x73\x1f\xbd\x5a\xfc\x87\xd9\xa6\xf6\xeb\xae\x4e\x68\x57\x36\x6b\xdd\xd2\x8c\x7a\x1e\x65\x5e\xe9\x37\x4b\xe1\x92\x1a\xab\x2a\x50\x8c\xb3\x51\xaf\xfb\xc5\x2e\x5d\x18\xd5\xf7\xf2\xfa\x0f\xe1\x83\x6b\xdb\x3d\xec\xbc\x0e\xd8\x67\x26\x5f\x83\xa1\xeb\xf1\x7e\xfa\x53\x1a\x7a\x9e\x83\xdb\x52\xf5\xea\x42\x33\x7d\x4f\x3f\x5b\xbc\xb9\x35\x79\xd7\xa1\x5e\xa8\x1e\xa5\xba\xfd\x25\xaa\xf8\x08\x00\x00\xff\xff\x20\x8c\x4d\x0b\x76\x06\x00\x00")

func compiledExtensionAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionAbi,
		"compiled/Extension.abi",
	)
}

func compiledExtensionAbi() (*asset, error) {
	bytes, err := compiledExtensionAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x0b\x52\xe4\x3a\x0c\xbc\x52\x4b\xb2\x64\xf9\x38\xfe\xde\xff\x08\xaf\x1c\x67\x80\x99\xf0\x86\x4d\x96\x1d\x8a\x50\x14\xa4\x63\xeb\xd3\xea\x48\x8e\xc1\x61\x08\x50\x36\x20\x88\x11\x8c\x80\x1c\x34\x1a\x00\xd1\x58\x41\xb8\x78\x25\x20\x98\x8c\xfd\x22\x73\x98\x90\x93\xa1\xb5\x46\x61\xf3\x93\x34\x4e\x54\x22\x07\x75\x0a\x0b\x6d\x61\x47\x8b\xa3\xf7\xcc\x1b\x4a\xba\xaf\x0d\x18\x69\xe4\xd1\x17\x9a\xf2\x8e\xd2\x48\x88\x4c\x1b\xca\x88\x0b\x35\x68\x1b\x9a\xea\x42\xb5\x2e\x34\xe5\xaa\xd2\x4a\x59\xa8\xef\x6b\x6b\x19\xd6\x5a\x5d\x76\xb9\xec\x76\x9b\x72\xec\x12\x56\x64\xdc\x75\xa1\xdd\xa1\xea\xb2\xbc\x09\x77\x8d\x5a\x26\x5f\x8e\xd1\xb4\x48\x70\x90\xce\x4c\x8a\x2e\x1e\x17\xae\x1b\xb7\xa5\xcf\x3d\x3e\xd4\xe6\x9e\x00\x25\x87\xb3\xd3\xac\x00\x03\x94\x48\xa1\xb8\x3d\x49\x04\x49\x18\xf2\xd1\x6a\xc7\xc1\x2a\xc9\xf4\x1f\x1c\x62\x10\x9f\xbc\xc0\xe1\x10\x4d\xd8\xad\xc2\x19\xf4\x80\x6c\xb5\xa7\x01\x9a\xc8\xe6\x2b\x60\x8f\x62\xf9\x4f\x98\xb6\x96\x3e\x1c\x49\x12\xa7\x0d\x7b\x8f\xd6\xc5\x65\x8b\x3f\x48\x9c\x1e\x56\xf4\xb7\x9f\x44\xdb\x0e\x4e\xfb\xbd\x11\x82\xe8\x7d\xe6\x33\x13\x4a\x64\xb7\xbf\x27\x98\x20\x3b\xf2\x4b\x1e\xbe\x62\x62\x65\xf1\x16\x91\x86\x76\xb9\x16\x94\xed\x18\x41\xd5\x93\x11\x18\xd9\x7d\x04\xf1\xed\xad\xf9\xea\x22\x3b\xb3\xf6\x44\x66\x4c\x72\xc8\x8c\x85\xcf\x66\xd6\x1e\xab\x1d\x8f\x51\x7d\x86\x9d\x89\xd4\xfc\x18\x69\x24\x23\xc4\x14\x2e\x57\x96\xd3\x27\xf9\xa7\x6a\x04\x0f\xf8\x36\x05\x73\x3d\xea\x87\xeb\x98\x5e\xba\x5d\x8f\x7d\xd0\xc1\xaa\x10\x4e\xd6\x2e\x79\xfd\xb6\x3c\x45\xf2\x31\xa2\x6d\xdc\xe4\x50\x1e\xb4\x7f\x50\xc3\x97\xba\x4e\x64\xd7\x76\x7d\x9d\xc1\x36\x05\x71\xe6\x1d\x33\xd1\xc4\x45\x3c\xd5\xdd\x1a\x7d\x9c\x81\x7f\x33\x4f\xb1\x6b\x00\x61\x75\xec\x37\xce\x64\x56\x74\x63\x37\x3a\xa4\x90\xde\x58\x1f\x0f\xfd\x51\xf3\xa0\xb7\xa7\x01\x49\xa3\xb4\xf5\x5c\xfa\xfa\x6f\x5f\x87\x77\x36\x26\xce\x70\xa2\x7d\x17\x8d\x8f\x36\xdf\x95\x34\xa7\xc5\x67\x4a\x4a\xeb\xd7\xae\x71\x99\x63\x47\xce\xec\x2e\x7b\xb6\xfc\x2f\xd8\x5c\x93\x70\x9b\x67\xec\x73\x3a\xb3\xb2\xcb\x36\xe7\xe8\x5e\x23\xf7\x79\x4e\xee\x67\x64\x80\x96\xb9\xfe\xc6\x51\x19\xf3\x9c\x30\xe7\xe1\xdc\xef\x01\xbb\x8d\xc5\xd6\x9a\x83\x79\xeb\x4d\x7a\xc7\xd2\x7a\x3e\x67\xf2\x3c\x2d\x2d\x5b\xbd\xee\xb6\x64\xfa\xb6\x6d\xe6\x6e\xfe\xe7\xdb\x33\xb3\xcf\x90\x4f\xb4\x5c\x14\x89\x6f\x75\xfc\x03\xad\x28\xca\x13\xad\xe8\xac\xfa\x69\xad\xa8\xe8\x05\xad\xac\xbb\x8b\x7a\x61\xc9\x3d\x79\x4d\xff\x5c\x2f\x77\x76\xef\x4e\xb9\x87\x9e\xf2\x27\xec\xd7\xfc\x8c\xfd\xd6\xaf\xb0\x3f\xc2\x39\xf6\x3f\x9b\xc3\xdf\x50\x91\x82\x66\x61\xf0\x2f\xab\x88\x3d\xce\xff\xbb\x8a\x58\x8e\x17\x2a\x62\xa5\xbd\xfa\x7d\xf0\xee\x15\x43\xfa\x2f\x63\x3f\x2a\x3f\x61\x3f\x9a\x5d\x60\x3f\xc6\xfa\x6a\xf6\x6b\x2a\xae\x0c\xfd\xf1\x93\x40\x1c\xcf\xfa\x8b\xe3\x4a\x7f\x71\x3e\xdb\x5f\x3e\x64\xff\x77\xa7\x82\x96\x95\xb4\x87\x9f\x3f\x61\xf9\xe3\xf7\xdf\x3d\xaf\x25\x5f\xe1\xb5\xe1\x95\x27\x2c\xf1\x21\x91\xbc\xfc\x38\x97\x29\xd4\x27\x5c\x26\xc3\x05\x2e\x53\xb4\x57\x72\xc9\x31\xe4\x10\x6b\xfc\x65\xdd\x36\xcf\x2f\x81\xff\x65\x3e\x53\xbb\xc0\x7c\x16\x79\x75\xb7\xa5\x91\x58\x4c\xe8\xc7\x95\x9c\x0b\x3d\xe3\xb3\xea\x15\x3e\x5b\xb9\xa6\x64\x20\x93\xa9\x71\xcc\x31\x47\x16\xa8\xcf\x6f\x87\x62\xa2\xf0\x60\xc8\x89\x8b\x6b\x18\x5e\x80\x90\xbc\x8d\x0a\xee\x9d\x72\xed\x25\x96\x52\x93\xd6\x90\x94\x65\x7e\xf5\xf7\x32\xbc\x10\x47\x6e\x00\xa7\xff\x02\x00\x00\xff\xff\xad\x4e\x44\x75\x3a\x16\x00\x00")

func compiledExtensionBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionBinRuntime,
		"compiled/Extension.bin-runtime",
	)
}

func compiledExtensionBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Extension.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x94\x41\x4b\xc3\x40\x10\x85\xff\xcb\x9c\xf7\x14\xb5\x48\x8e\xa2\x07\x0f\x82\x58\xc1\x43\x09\x32\x49\x26\xb2\x64\x33\xbb\xec\xce\xc6\x86\xd2\xff\x2e\x09\xd5\xa2\x04\x1b\x04\xd3\xdc\x72\x98\x37\xf3\xe5\xf1\xde\x6e\x76\x50\x58\x0e\x82\x2c\x90\x8a\x8f\xa4\x40\xb3\x8b\x12\x20\xdd\x64\x0a\x18\x1b\x82\x14\x18\x45\xb7\xf4\x2a\xdb\x1b\x63\x8b\xfa\x89\x2a\x50\x60\xa3\x1c\xe6\x76\x9f\x63\xa0\x40\x3a\xd7\x7f\xe5\x9d\x50\xb8\x86\x7d\xa6\xc0\x61\x87\xb9\x21\x48\x2b\x34\x81\x14\x04\x41\xa1\x87\x28\x98\x6b\xa3\xa5\x83\x14\x5a\x4d\xef\x47\x69\x15\xb9\x10\x6d\x19\xf6\xea\x17\xb6\xaf\x9b\x1c\x9b\xa3\x36\x6a\x96\x8b\x64\x38\xfb\x9d\x3c\xef\xb9\x9f\x75\x43\xa7\xc0\xfb\x0d\xab\xcb\x85\x81\xdf\xdf\x4e\xf2\xfb\xb0\x60\x39\xdc\x6b\xfd\xc6\xe4\x4f\xb1\x63\x59\x7a\x0a\xe1\x1f\xd9\x47\x82\xfc\xe8\x6d\x4b\xe5\x8b\xf5\xf5\x94\x44\x24\x57\xab\x59\xf1\xac\xa0\x59\x47\xe7\x4c\x77\x7e\xba\x3f\x35\x6d\xf8\x81\xc2\xfa\x05\xf5\xad\x44\xc1\x1f\x85\x19\xc5\xc7\x9a\x92\xbc\xb7\xf4\xec\x95\x1b\x89\xed\xdd\xd6\x69\x8f\x83\x74\x82\xb1\x73\xd3\xcd\xf5\x4e\x65\x1f\x01\x00\x00\xff\xff\x46\xf2\x90\x9d\xb6\x06\x00\x00")

func compiledExtensionnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeAbi,
		"compiled/ExtensionNative.abi",
	)
}

func compiledExtensionnativeAbi() (*asset, error) {
	bytes, err := compiledExtensionnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledExtensionnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledExtensionnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledExtensionnativeBinRuntime,
		"compiled/ExtensionNative.bin-runtime",
	)
}

func compiledExtensionnativeBinRuntime() (*asset, error) {
	bytes, err := compiledExtensionnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ExtensionNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x40\x10\x85\xe1\xbb\xbc\x7a\x4e\xb0\x77\xf0\x04\x21\xc5\x24\x4c\x60\x20\xce\x2e\xbb\x6f\x94\x45\xbc\xbb\x58\xd9\x58\x88\xf5\x0f\xff\xb7\x3c\xb0\xd7\x18\xd4\x20\x0a\x7b\x9a\xc0\xa3\x25\x07\xca\xb2\x0a\x42\xaf\x86\x02\x8f\xb0\x0e\x41\x4d\x7e\x5a\xd3\xa9\xdb\x69\x28\x87\x9e\xc3\x04\x83\x4a\xbb\x24\x75\xf3\xd3\x39\x51\xd0\xb2\x1b\x04\x9c\xed\x3d\x39\x32\x76\x7a\x0d\x3c\xe5\x27\xb4\x26\xff\x41\x6f\x6e\xf7\x6f\xe8\xfa\x0a\x00\x00\xff\xff\x0a\x34\xa0\xdd\xeb\x00\x00\x00")

func compiledMeasureAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureAbi,
		"compiled/Measure.abi",
	)
}

func compiledMeasureAbi() (*asset, error) {
	bytes, err := compiledMeasureAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledMeasureBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x50\xd1\x71\xc5\x20\x0c\x5b\x49\xc6\x58\x36\xe3\x40\x30\xfb\x8f\xd0\x23\xe4\xf5\xb5\xfd\xe9\x5d\x2b\x7f\x24\xc8\x3a\x90\x44\x04\x88\x0a\x2b\x04\xaa\x52\xf6\xa9\x99\x13\x80\x9a\x5f\x10\xfc\x11\x0d\xa8\xd4\xf5\x40\x18\xa0\xd6\x3e\x87\x7b\x69\x52\x89\x9a\xe6\x9b\x0b\xbf\x74\x8e\xc1\xcd\xb1\x98\xdb\xd8\x6f\x07\xd6\xb4\xa1\x35\x20\x46\xd8\xe3\xe8\xb0\x06\xde\xe3\x34\xda\x00\xde\x3a\xce\x9f\x3a\xaf\x84\xc7\x4b\xb7\xbf\x0a\xff\x74\xf5\x1b\x84\x6f\xcf\x77\x4b\x12\xf2\x35\xd3\x7f\xfa\x41\x09\x39\xad\x43\xb6\xe7\xe7\x7e\x84\x42\xe3\x66\xc2\x03\x3a\xc4\x4e\xb6\x39\xbe\x67\xb3\xbe\xe4\xb5\xcb\x34\xd7\x79\xb6\x9a\xe7\xef\x51\x9d\x21\xd0\x85\xc6\xe2\xdd\xbb\x17\x85\x45\x01\x33\x73\x4e\x40\xa4\x65\x5b\xcb\xda\x48\x5e\x0d\xb9\x04\xac\x6b\xad\xd9\xfb\x88\x71\xc1\x6c\xe4\x5c\xdd\x5a\x89\x64\x9f\x97\x69\x83\xf1\xda\x11\xda\x47\x00\x00\x00\xff\xff\x37\x3e\x41\xaa\x40\x02\x00\x00")

func compiledMeasureBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledMeasureBinRuntime,
		"compiled/Measure.bin-runtime",
	)
}

func compiledMeasureBinRuntime() (*asset, error) {
	bytes, err := compiledMeasureBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Measure.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xc1\x6a\xc3\x30\x0c\x86\xdf\xe5\x3f\xfb\xd4\xb1\x1d\xf2\x0e\x3b\xed\x58\xc2\x50\x12\x75\x98\xa5\x72\x88\xa4\xac\xa6\xe4\xdd\xc7\x4a\x12\xc3\xe8\x08\x65\x47\xe3\xcf\xbf\x3e\xa3\xff\x78\x45\x9b\x44\x8d\xc4\x50\x9d\xa8\x57\x0e\x88\x32\xb8\x29\xaa\xe3\x15\x42\x67\x46\x85\xf7\x4f\xce\x08\xb0\x3c\xfc\x9c\x9a\x6c\xac\x4f\x07\xcc\xa1\x00\x13\xf5\xce\x05\xf1\x28\x76\x78\x7e\xc1\x5c\x87\x15\x51\x36\x04\x24\xb7\x25\xbc\x0e\x18\x28\x53\xd3\xf3\x36\x58\x8d\x8c\x5f\xdd\xa8\x89\x7d\xb4\x8c\x0a\x92\x64\x85\xb6\xec\x93\x4b\x6b\x31\xc9\x6d\x7e\x91\xb7\xd1\x1f\x71\x2f\x62\x1f\xbf\xc4\xb6\x97\xf7\xbf\xb3\x2f\x3d\x45\xfe\x7a\x54\xb7\xe8\xf0\x85\x5b\xb7\x34\xee\x39\x51\xd7\x8d\xac\xfa\x7f\x27\x92\x24\xf9\x9c\x5c\xef\x15\x20\x4a\xc7\x17\xee\x56\xdf\xc5\xe2\xcf\x3a\x6c\xf8\x92\xb4\xf0\xfb\xed\x78\xbb\x2d\x61\xb9\xe7\x89\xc5\x30\xd7\xdf\x01\x00\x00\xff\xff\xfb\x8f\x43\xc8\x9d\x02\x00\x00")

func compiledParamsAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsAbi,
		"compiled/Params.abi",
	)
}

func compiledParamsAbi() (*asset, error) {
	bytes, err := compiledParamsAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x69\x9a\xeb\x38\x08\xbc\x52\x01\x62\x3b\x8e\xd6\xfb\x1f\x61\x3e\xd9\xce\xf2\xde\xf4\xa4\x3b\x99\xaf\xe5\x1f\x56\x80\xb0\x54\x01\x36\x04\x0c\x05\xca\x06\x14\x31\x82\x11\xa0\xae\x6e\x00\x44\xbd\x83\xf0\xe1\x49\xa0\x98\xac\xeb\x90\x05\x4c\xd8\x65\x95\x2c\xa0\x72\xc4\xe9\xea\x5b\x1a\xb3\x56\xab\xfd\x92\xa6\x9f\xd2\x2e\xa5\x23\xa6\x9e\xd2\xd1\xd5\xb5\xed\xac\x02\x6b\x68\x93\x12\x20\xdd\x1a\x8b\x33\xdb\x53\xae\x47\x05\xa9\xbb\x9e\x80\x18\x24\x08\x94\x08\x04\x64\x4b\x41\x49\x96\x30\xf0\xbe\x22\x39\x0f\xad\xe8\xdf\x32\x3d\x1e\x23\x90\x88\x9a\x36\xe0\x39\x6a\x95\x7f\x47\xed\xf6\x5e\xd4\x7b\x04\x6e\x65\x47\x38\x98\xa0\x40\x70\xd0\x66\xe4\xb0\xa5\xc3\xe6\xd2\x24\x41\x12\x4b\x9e\x33\x99\x5f\xd4\xbf\xc8\x08\x62\xeb\x4f\xaf\x7e\x67\xe3\xbb\x43\xf6\x8e\xed\xf7\xd9\x1e\x28\xb6\x47\x4e\xef\x78\x17\x79\xc7\x9a\x0a\xe9\x81\x0b\x8d\xb1\x71\xd9\x99\xf8\x42\x74\xf1\xac\x9f\xb6\x32\xce\x0a\x51\xb0\x71\xbc\x58\xdc\x2c\x41\x82\xb7\x86\xea\x03\x83\x80\x2f\x63\x57\x4b\xeb\x5e\x2c\x6d\x4a\x65\x98\x7a\x98\x9a\xb8\x7a\xb1\xe5\xcc\x70\x36\x75\xda\x76\xfb\x66\xe5\xef\x78\x8a\x17\x98\xee\x09\xc0\x3b\xb8\x98\x70\x49\xab\x29\x35\x24\xe4\xf2\x26\xcf\xf3\xf9\x7f\x66\x1d\xfc\x07\x42\x72\xeb\xf8\xdb\xfb\x09\x9d\xe7\xde\xe6\x6b\x02\x80\x7b\x7d\x21\x7b\x76\x8e\x7e\xf6\x80\x34\xd2\xab\xcf\x79\x6f\x8b\xe7\x3e\xd7\xba\xe8\xa1\x75\xa8\xcb\x38\xf5\x32\xcf\xdb\x65\x77\x3c\xa7\xcf\x9d\x8b\x2f\x8e\x29\x5c\x6c\x05\x94\x74\x69\xa7\x39\x32\xbc\x91\xc8\x5c\xbc\x28\xa5\x48\x36\xd6\xda\x5b\xb5\xaa\xd3\x72\x31\xe5\x8c\xb4\xd5\x73\x90\x67\xf0\x4f\x27\xb5\x9e\x15\xda\xb9\xb9\xde\x65\xac\x0d\x52\xcc\x59\xef\x7c\xf1\x2f\xf1\xc5\xff\xcd\xd7\xad\x2a\xfe\x9e\x21\xe1\xf1\x82\x21\x29\xf4\x9a\xa1\xd3\xff\x96\x33\x82\xe8\xfa\xd7\xed\x5b\x74\xfa\x7c\x6c\x55\xa5\xaf\xb7\xe9\x7e\x5f\xbf\x3e\x44\x3d\xb9\x92\xad\x51\xaf\x7a\xe9\x37\x30\xff\x19\x9e\x43\x5f\xe1\x39\xf3\x13\x3c\xd7\xfa\x00\x4f\xec\x4f\x58\x25\x53\x63\xaf\x5e\x9d\x05\x1a\x0c\x48\xef\x9e\xde\xca\xf4\xac\x6d\x25\x79\x0a\x97\x3e\x65\xd1\xea\x8d\xc7\x9c\x90\x61\xd1\x74\xe5\x30\xa3\xea\x6a\xdd\x94\xa3\x69\xca\x58\xd9\x00\xce\x7f\x02\x00\x00\xff\xff\x01\x28\xae\xea\x82\x08\x00\x00")

func compiledParamsBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsBinRuntime,
		"compiled/Params.bin-runtime",
	)
}

func compiledParamsBinRuntime() (*asset, error) {
	bytes, err := compiledParamsBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Params.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4e\xc3\x30\x10\x45\xef\x32\x6b\xaf\x8a\x60\x91\x3b\x70\x82\x2a\x42\x93\x74\x8a\x2c\xcc\x38\xca\xfc\x09\x58\x55\xef\x8e\x5a\x51\x27\x10\xa4\x88\x2e\x2d\x7f\xfb\xbf\xf7\xf7\x27\xea\xb3\x1a\x58\x41\xcd\x91\x93\x49\xa0\xa8\x83\xc3\xa8\xd9\x9f\x48\xf9\x5d\xa8\xa1\x37\x29\x14\x08\x65\xb8\x1c\xba\x02\xb1\x87\x1d\x9d\x43\xbd\x9f\x38\xb9\xcc\x09\x8f\x8a\xdd\xe3\x13\x9d\xdb\x70\x4b\x28\x23\x4e\xf2\x62\x02\x0a\x94\x1d\xdf\x0d\x6d\xa0\x81\x0b\x77\x49\x6a\xbb\x81\x21\xcf\x0e\xee\x62\x8a\x28\x97\xb7\x59\x6f\xa1\x5a\x71\x74\xed\x11\xb3\x5e\x29\x66\x03\x8c\xbe\x14\x58\xf5\xcb\xa7\xf4\x8e\x3c\xfe\x80\xa8\x1a\xf3\xf7\x7c\x38\x8c\x62\x76\x35\xd8\x06\x9c\xa2\x7c\xfc\x17\x6d\x63\xdb\x15\xf9\xeb\xaf\xe5\xfe\x80\x5e\xce\x7e\x3f\x74\xfb\x15\x00\x00\xff\xff\x4b\xb6\x04\x06\x13\x02\x00\x00")

func compiledParamsnativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeAbi,
		"compiled/ParamsNative.abi",
	)
}

func compiledParamsnativeAbi() (*asset, error) {
	bytes, err := compiledParamsnativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledParamsnativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledParamsnativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledParamsnativeBinRuntime,
		"compiled/ParamsNative.bin-runtime",
	)
}

func compiledParamsnativeBinRuntime() (*asset, error) {
	bytes, err := compiledParamsnativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/ParamsNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x8f\xda\x30\x10\xfd\x2f\x3e\xe7\x44\xd5\x1e\x72\x45\xea\x8d\xaa\x6a\xd5\x13\x42\xd5\xc4\x19\xa8\x85\x33\x8e\x3c\x63\x50\x84\xfa\xdf\x57\xa0\x25\x31\x4b\x84\x77\xf9\xd8\x84\x23\xe2\x4d\x3c\xcf\xf3\xde\xf3\xcc\x77\x4a\x3b\x62\x01\x12\x95\x2f\xc1\x32\x66\xca\x50\x1d\x84\x55\x3e\xdf\x29\x82\x0a\x55\xae\xfe\x32\xda\xa5\xca\x94\x34\xf5\xfe\x27\x94\xa5\x47\x66\xf5\x3f\xeb\x10\x84\xdb\x19\xb0\xa0\xef\x81\x2d\xb2\x23\x8c\x51\x5a\x94\x0b\xf2\x7a\xce\x22\x53\x35\x34\x50\x58\x6c\x7b\x60\x01\xc1\x59\x10\x28\x8c\x35\xd2\xa8\x5c\x91\xa3\x23\xa8\x3d\x61\x19\x48\x8b\x71\x74\xe8\xa4\xe3\x21\x3e\x5c\x4b\x23\x70\x82\x81\xe1\x3f\xfc\xa6\xfd\xb6\xba\x2b\x2c\x9c\xb3\x87\xaa\x34\xaf\x8d\xc1\xed\x23\x19\xad\xb1\x89\xfa\x6a\x04\xf9\xcb\xe4\x64\x24\xe2\x3c\xac\xf0\xbb\x4b\x93\x8a\x8a\x87\xe7\x55\x58\xa7\xd7\x3f\x42\x55\xc4\x03\x0b\x86\x64\xf2\xf5\x5b\xcc\x0f\x09\xfd\xaa\x49\x71\x8b\x0b\xef\xc4\xed\x16\x37\x25\x65\xe8\xb1\x72\x1b\x3c\x93\xe2\xd0\x4e\xea\x1a\xd4\xc1\x7b\x24\xf9\x5d\x3b\xe2\xb4\xb4\xe2\x0f\x8c\xe0\xfa\xb5\xc7\xd2\x48\x8f\x3a\x22\x8c\x47\xed\x36\xe8\x9b\x5f\x20\x78\x51\x80\x8c\x32\x3d\x7c\xef\xa7\x05\x7a\xe8\xb4\x6e\xa1\xcc\xed\xa0\x2e\xa5\xb7\x45\xdd\x3b\xd2\xa1\x75\x77\x45\x2e\x14\x60\x81\x34\x3e\x43\x30\x44\x13\x18\xe1\xdd\x47\x9e\xef\x97\xf9\xee\xf4\xff\x8b\xb6\x4a\xbb\x6a\x04\xf1\x90\x4c\x67\x28\xcb\x11\x47\xf3\x3f\xe0\xa9\x2b\x93\xca\x1f\x7a\x87\xe9\x1a\xae\xce\x57\xc6\xcf\x79\x43\x1e\xb9\x48\xee\x01\xd3\xa3\x21\x9e\x28\x82\x02\x8d\x31\x84\x3e\xf8\x92\x19\x7e\xe7\x62\x72\x07\x13\x2c\x5e\x02\x00\x00\xff\xff\xc1\xa7\x82\x58\x64\x0d\x00\x00")

func compiledPrototypeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeAbi,
		"compiled/Prototype.abi",
	)
}

func compiledPrototypeAbi() (*asset, error) {
	bytes, err := compiledPrototypeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x0b\x96\xda\x3c\x0f\xdd\x92\x64\x3d\x2c\x2d\xc7\xcf\xfd\x2f\xe1\x3f\x4e\x32\x30\x33\x99\x66\x70\x28\xfc\x9c\x7e\xc0\xe9\xa1\x88\xf8\x21\xdf\xab\x2b\xcb\x6e\x15\x0c\x14\x18\x24\x28\x00\x93\x22\x28\x02\x74\x94\xa8\x00\x40\x12\x0b\x20\x9c\x7c\x39\x00\x2b\xf5\xed\x85\x6a\xa0\x04\x48\xd1\xb2\x18\xf2\x32\x8e\x4a\x5c\xac\xa1\x32\xd5\xb2\x5a\x51\x7c\xb3\x72\x8b\x89\x25\xae\xd6\xca\xab\x15\x9b\x4b\x6e\x2c\x8b\x35\x30\xae\xd6\x10\x3c\x58\xd5\xbc\x5a\x53\xd8\xac\x54\xad\xc4\xba\x5a\x09\x64\xb5\x92\x8a\x77\x6b\x75\xb5\x9a\x6d\x56\x8b\x98\xbc\x6f\xcf\xd6\xbe\x5a\xb5\x5a\x31\xf1\xb4\x58\x99\xb7\x7e\xa3\x6a\xe1\x4e\xeb\xcc\x38\xd1\x6a\x35\xa8\x9d\x25\xf3\x6a\x6d\x9b\x6f\x56\x12\x65\xe6\xd5\x37\xe1\xcd\x0b\x17\xb2\xc2\x99\x56\x6b\x8a\x9b\xb5\x55\x14\x2a\xb0\x58\x15\xb6\xd1\x8a\x17\xee\x85\x71\xb5\xda\xe6\x45\xa9\x35\x24\xf7\xbe\x5a\x7b\x59\xad\xd5\x22\x11\xa5\xb2\x58\x23\x75\x89\x92\x07\x92\x06\xbd\x4a\x26\x36\x40\x19\xab\x39\xfa\xbe\xda\x05\x96\x75\x1f\x16\x36\x20\x05\x32\x04\x74\x30\xb0\xc1\x81\x0b\x86\xbf\xbd\x50\x7d\x4c\x1b\x46\x5b\x0f\xbe\xf4\x70\x5f\x7b\x59\xde\xc3\x97\x9c\x44\x25\x03\x7c\xf6\x42\x65\xef\x45\x4e\x2f\xec\x85\xa5\x36\xbc\x58\x22\x0e\x0d\x2c\xa0\xac\x6f\xc3\x11\x81\x4b\x1b\x5c\x9e\xdd\x9e\x70\x04\x72\xe8\xf4\xd9\xeb\x06\x3b\xaf\x43\xa0\xc7\x78\x3d\xc6\x41\x3f\xf0\xc8\x4b\xf8\xea\xd1\x47\x8b\x8f\xcf\x09\xcf\x02\xd7\xbd\x67\x56\x1e\xe3\xd9\x1f\x3d\x4a\xf9\x9b\x47\x33\x1e\xa4\xb6\xf3\x80\xe0\x41\xd8\xfc\x15\x46\xe6\xa4\xbb\xb8\x22\xc4\xbd\x17\xac\x7f\xdf\x8b\xcb\x2c\x2a\xe1\xd7\x35\x9f\xe9\x75\xe6\xd9\x09\x2c\xc9\x79\xbf\x0a\xb5\x3e\x87\x8d\x87\x0c\x6d\x08\x7b\xcc\x5a\xde\xcd\x96\x19\x5e\x98\x79\xad\xe1\xce\x0b\xe6\x7d\xfc\xb0\x3d\x69\xcd\x3f\x66\x86\xa0\xe5\xb4\x02\x70\xea\x7b\x0f\x1a\x3f\x2e\x76\x10\x75\xcf\x06\xee\xfb\xfc\x2e\xe1\x01\xf9\xfd\x32\x8b\xd0\xbe\x46\x30\x5d\xd7\xec\xcb\xfa\x85\xad\xc5\x9f\x57\x50\x64\x9f\xdf\x24\xc9\xeb\x32\x19\xa9\x94\x1d\x02\x92\x69\xef\x45\xb3\x07\x22\x20\x4d\xef\xde\x5b\x28\xec\xe3\x4f\xf9\x01\xf9\xeb\x32\x6b\x2d\xf2\x72\xca\xaf\xbe\xcf\x7f\xda\x1e\x90\xff\xfe\xda\x2a\x8e\x3a\xe9\xac\x62\x45\xb0\x9d\xb7\x91\x1e\xa0\xb9\x97\xd9\x5a\xb6\x5d\xbc\x44\xde\xe7\xaf\x98\x5e\x38\x7f\x61\x22\x3f\x1b\x6f\xc3\xb7\x42\x16\x14\x31\x73\x1d\xbd\x10\xcc\xcc\x49\x09\x93\xe5\x90\x62\x30\x32\xda\xfa\xa7\xcf\xb5\xf6\x3d\x75\x3b\x6c\xec\x01\x86\x45\xc9\x1f\x1f\x91\x4f\x89\xfa\x4b\xe6\x01\xb8\x66\xa9\xc1\xab\x85\x75\xd1\x80\x32\xca\xc6\x46\xf3\x6f\xf9\x53\x52\xc7\xeb\xaf\x49\x65\x8d\x90\xc1\xa6\xb6\xfe\x6d\x7b\xee\xfa\xd6\xb5\xf2\x9e\x45\x96\x50\x09\xc1\xab\xb1\xf1\x1b\xd9\x5b\xc6\xb8\x22\x1b\x7e\x47\xd6\x63\x3f\x40\xd6\x9d\x8e\x91\x5d\xfb\x1f\xf6\x00\x86\xb8\xb5\x4a\xfe\xb9\xcf\xab\x52\x09\xfe\xac\x1e\xe3\x73\x7c\xbf\x87\x27\xc1\x1b\xb5\xde\xc3\xbf\xc2\x93\x83\x73\x83\x19\x7c\x93\x1e\xe1\x9b\xec\x0c\xbe\xc9\xff\x0f\xf8\x62\xa8\x02\xa1\xff\x33\x3a\xf0\x79\xee\x5f\x4e\x85\xcf\xe1\x9c\x95\x0e\x70\xce\x31\x9e\xc0\x39\x5b\xbd\x13\x67\x84\x9c\xfa\x3d\x79\xdd\xb3\x71\x2f\x9e\xdf\x79\xfd\xd6\x31\xa6\x58\x53\x62\x3b\x60\x4d\x19\x59\x7f\x9a\x35\x25\xd9\x1c\x6b\xc6\x1e\x51\x11\x6a\x58\xd8\x36\x7a\x8c\x1d\xac\x50\xf4\x74\x1a\xda\x2f\xc8\xc2\xb5\xee\x06\xb2\x30\x7e\xc1\xcf\xf5\x38\xc4\xae\x21\x8a\xba\x96\xc8\xea\xda\x28\x85\x51\xe0\xf4\xc8\x01\x14\x03\x8c\xe0\x51\x89\xe1\x78\x3c\x81\x83\x5d\xee\xc7\xaa\x9d\x54\x3f\x69\x21\x71\x4c\xd7\x28\x08\x0f\x8a\x82\x27\xd6\x9b\x37\xf0\xb3\x96\x23\x7e\xd6\x76\x86\x9f\xb5\x4f\xf2\x73\x51\xb5\xf5\xdb\xaa\x69\x0d\xdd\xe8\xbc\xa6\x69\xe6\x5a\x20\x97\x91\xc9\x2e\xb9\x8c\x1f\x84\x27\x3f\x41\xd5\xfe\x74\xb6\x45\x57\x1c\x6e\xa8\x31\x5a\xe1\x03\xac\x5b\xb5\x1b\x6a\x8c\x0b\x42\x2d\xdd\x93\x75\x54\x92\xe6\xaa\xef\x6a\xf2\xe6\x31\xa6\xb2\x4e\xcf\x7e\x80\x74\x2f\xf5\x44\x54\xf7\x46\x67\xb2\xce\x72\x81\xfc\xbc\xac\xa3\x53\x59\x87\x22\x68\xd7\x16\x49\xfb\xcf\xb9\xe7\xd1\x59\x27\x43\x43\x33\x4e\xef\x3d\xf7\x4f\x3c\x46\xc4\xfa\x67\x1e\x23\x12\xce\xf3\x18\x91\xe3\x7d\x7b\xee\x59\x8c\x9b\x5b\xa6\x6e\x6c\x81\xde\x5a\x77\xd3\x18\x53\x1c\x09\xe1\xa0\xfe\xc6\xc0\x27\xea\x6f\x0c\x32\x59\x7f\x6f\x5a\x17\x6a\x7b\xa2\xd6\xa5\x5f\xb5\x0e\xb5\xc4\xa0\xa2\xa8\x1c\xfd\xbb\xde\xa9\x28\x7f\x1f\xef\x06\xad\xd3\x8f\x7f\xdf\x33\xaf\x75\x85\x73\xa8\x76\x51\xba\x7f\x60\x87\xcd\x0b\x27\x0e\xd8\x49\x47\xf5\x1f\xd2\xed\xf5\x1f\x5f\xd9\x49\xb7\xd7\x7f\x07\xaa\x86\x5f\xfe\x7c\xa0\x8a\x33\xeb\x81\xbc\xde\x3f\x28\x22\x4b\x7e\x22\xf3\xe5\x57\xe6\xbb\xb6\xa8\x83\xff\xea\xca\xbf\xd5\x97\xb7\x30\x7f\xf8\xa8\x7c\xcf\x9e\xd7\x1c\xeb\xfb\x06\x65\x66\x8c\xa9\x3c\x20\x74\x70\x3e\x87\xc2\x27\xce\xe7\x50\x64\xf2\x7c\x6e\x8b\x06\x69\xe1\xa5\xf6\xbc\xdf\xf2\xc0\xf8\x54\xfe\xae\xff\x33\xd1\x70\xd7\x49\x8b\x6b\xea\x3d\xcb\x7f\xeb\xa4\x05\xd5\x8e\xf8\xa9\x7e\x86\x9f\x9a\xce\x9c\x1f\x5f\x4f\x5a\x4e\xa0\x07\xe2\x2e\xd0\xfc\x3f\x86\x5e\xd4\x83\xfb\x59\x8c\xf1\x97\xfb\xd9\x1f\xd1\x8b\x56\x9e\x8d\x5e\xa9\xdc\x43\x00\xfb\x57\xea\xcd\x17\xcb\x41\x16\xe5\x80\x25\x66\x7e\x82\x25\xe6\xfd\xb9\xf5\x2a\x70\x8a\xad\x46\x7b\xd7\xab\xb7\x8e\x31\xc5\x11\xb7\x78\xc0\x11\xf7\x7c\x82\x23\x9e\xf1\xd4\x3e\x25\x8d\x4d\xf1\x0b\xed\x53\xb6\xb3\xb9\xe3\x3a\xf5\xf3\x78\xb7\xd7\xab\xf3\xf7\x41\xa6\x18\x30\xbf\x95\xf2\xd6\x31\xa6\xa2\x20\x43\x3a\x88\x82\x8c\xed\x44\x14\x64\xe2\x3b\x95\x72\x0a\x89\xd9\x5a\xd9\x40\x11\xcb\x88\x7e\x81\xb9\x91\xde\x7b\xb4\x9b\x38\x55\xe8\xe0\x7e\x0b\x0b\xff\x72\xbf\xf5\x23\xa7\x8a\xb4\x39\x4e\xcd\x71\x42\xf2\xa6\xc4\xa5\x3f\xf1\xfc\x24\xc0\x6f\x4a\x1c\x49\x45\x8b\x6a\x80\xa1\xc0\x01\xb4\x2a\x46\x8a\xac\x32\xbe\x0d\x4d\x8e\x38\xda\xac\xea\x7c\xab\x12\x03\x24\x54\xd1\x10\x53\x4c\x31\x10\x88\x05\x88\x2c\x41\x9a\x94\xd0\x3c\x49\xf1\xe2\xa9\x80\x5b\xc5\x90\x08\xc5\xdd\xa3\x83\xe7\x98\x86\x1e\x18\x9b\x83\x59\x80\xc4\xc2\xea\xa4\xba\xfc\xe7\x98\xe0\xff\x0b\x00\x00\xff\xff\xfd\xff\x06\x0c\x54\x3a\x00\x00")

func compiledPrototypeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeBinRuntime,
		"compiled/Prototype.bin-runtime",
	)
}

func compiledPrototypeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Prototype.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x41\x6b\x84\x30\x10\x85\xff\xcb\xd0\x63\x4e\x96\xf6\x90\x6b\xcf\x85\xd2\xd2\x93\x78\x98\x9a\x29\x04\x74\x22\x99\x89\x6d\x10\xff\x7b\xa9\xc8\xae\x8a\xc2\xb2\xbb\xd7\x64\xde\xf7\x3e\x5e\x39\x00\x72\xe0\xdc\x86\x24\x60\xbf\xb1\x11\x32\xe0\xb9\x4b\x2a\x60\xcb\x01\x3c\x3b\xfa\x25\x07\x56\x63\x22\x03\x8c\x2d\x81\x05\xa6\x9f\x57\x14\xa5\x08\x06\x34\x77\xff\x4f\xe8\x5c\x24\x11\x18\xab\xd3\xd5\xc3\xf6\x86\x7a\x62\x85\xd1\x5c\xda\x39\x7f\xcd\xb8\x3a\x92\xf3\x7a\xa6\x25\xcf\x5a\x3c\x3d\x4f\xbc\x83\x48\xa4\x3a\xf4\x14\xf3\x3b\x2a\xed\x04\x17\xaa\x2f\x13\xfc\xad\x41\xbe\x5e\x77\x35\x51\x92\xdd\x75\x8e\x5d\xb1\x56\x1f\x16\xed\x5f\x59\x49\x1e\x8b\x95\xe5\xa7\xdc\x32\xe7\xca\x4f\xba\xc0\x12\xee\xaf\xf8\xb1\xe5\xce\x96\xd5\x5f\x00\x00\x00\xff\xff\x76\x2a\x30\xb8\x6a\x02\x00\x00")

func compiledPrototypeeventAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventAbi,
		"compiled/PrototypeEvent.abi",
	)
}

func compiledPrototypeeventAbi() (*asset, error) {
	bytes, err := compiledPrototypeeventAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypeeventBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xc0\x09\x01\x43\x31\x08\x03\x50\x4b\xe1\xa6\x72\x52\x58\xfd\x4b\x98\x85\xff\xca\xf0\x91\x41\x3c\xd1\x48\x38\x42\x13\x40\xe3\x2d\x40\xc9\x48\x2d\x16\x4b\x0d\xd1\x8a\xaa\xbb\xf6\x84\x57\xb6\x66\x8b\x57\x9c\x32\x4f\x5a\xe8\xe7\xe2\x67\x1e\xea\x84\x86\x53\x17\x77\xdb\x87\xd3\x3e\x27\xac\x7d\x24\x01\x3d\xff\x00\x00\x00\xff\xff\xf7\xe1\xad\x7c\x98\x00\x00\x00")

func compiledPrototypeeventBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypeeventBinRuntime,
		"compiled/PrototypeEvent.bin-runtime",
	)
}

func compiledPrototypeeventBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypeeventBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeEvent.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4f\xeb\x9b\x40\x10\xfd\x2e\x7b\xf6\xf4\x2b\xed\x21\xb7\x36\xd0\x5b\x4a\x69\xe9\x29\x84\x32\xae\x93\x74\xc9\x3a\x2b\x3b\xb3\x06\x09\xfd\xee\xc5\x80\x51\xaa\x54\x4d\xfd\x93\x1c\x85\x99\xf1\x3d\xde\xec\x7b\xb3\xbf\x2a\xed\x88\x05\x48\xd4\xe6\x08\x96\x31\x52\x86\xb2\x20\xac\x36\xfb\xab\x22\x48\x51\x6d\x14\xa3\x3d\xaa\x48\x49\x91\x95\x5f\x90\x24\x1e\x99\xd5\xef\xa8\x2e\xc8\x1c\xb1\xf3\x1d\x35\x87\xa8\xaa\x21\x10\x93\xe3\xcf\x40\x75\xb1\x0b\xf2\xf7\xaf\xea\x11\xb1\x73\xf6\xd6\x9f\x41\x01\xb1\xc5\x3b\x3e\x16\x10\xdc\x05\x81\xd8\x58\x23\x45\x39\xda\x51\x55\x74\x6f\x3f\x06\xd2\x62\x1c\xdd\x60\xd6\x1c\xc5\x87\x31\x14\x5b\xf0\x53\x60\xc1\x5e\xec\xcd\xfe\x7e\xf8\xb9\xc1\xcb\xd4\xc0\x6b\x6d\x62\xeb\xf4\xf9\x4b\x48\x63\x6c\xe8\x13\x0c\xc9\xbb\xb7\x0e\x7e\x48\xe8\x4f\xc5\x47\xf9\x54\x76\xf5\xd1\x2c\xa7\xbc\xbd\xff\x30\x25\xcd\xc7\x77\x90\xf0\xb2\xab\xc4\xe9\x95\x91\x51\x76\x6d\x25\x57\x5e\xb6\x9a\xcb\x19\x8b\xc6\x43\x28\x04\xb9\x53\x2c\x16\xe7\xe1\x84\x9f\x07\x3c\xa6\xc6\x8c\xb5\x17\x32\xf0\x30\x8d\x0c\xff\xe0\xfe\xa7\x36\xc2\x26\xe6\xa0\xd5\x42\xfd\x0b\x78\xeb\x12\x7c\x35\xd8\x3a\x78\x8f\x24\xdf\x87\x79\xf3\x33\xf9\xdb\x88\xec\x31\x3c\x90\xdf\xd4\xea\x2c\x92\xac\x8c\x16\xf5\x50\x05\xe7\x49\xd7\xc7\x79\x6a\x8f\x89\x91\x8e\x68\xa9\x4b\x3c\x6a\x97\xa3\x2f\xbe\x81\x60\x77\x06\xb5\x3c\x7e\x7b\x9b\xfa\xd5\x02\xcd\xea\xf3\x8f\xd3\x1e\xea\x85\x90\x24\x13\x9b\xe1\x53\xd1\xf3\x98\xba\x1c\xd7\x63\xf8\xdf\xee\xd9\xbd\x67\xff\x3a\x99\xa2\x65\xee\xa9\x85\xce\xc6\x18\x2c\x90\xc6\xf5\xee\xc6\xd9\xaf\x91\xb2\x6e\x5b\x99\xd4\xeb\x5c\xc5\x63\xf2\x63\xe1\xe4\x38\xfc\x09\x00\x00\xff\xff\xb1\x59\x01\xf8\x7d\x0e\x00\x00")

func compiledPrototypenativeAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeAbi,
		"compiled/PrototypeNative.abi",
	)
}

func compiledPrototypenativeAbi() (*asset, error) {
	bytes, err := compiledPrototypenativeAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledPrototypenativeBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledPrototypenativeBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledPrototypenativeBinRuntime,
		"compiled/PrototypeNative.bin-runtime",
	)
}

func compiledPrototypenativeBinRuntime() (*asset, error) {
	bytes, err := compiledPrototypenativeBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/PrototypeNative.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenAbi = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\x3f\x4f\xc3\x30\x10\xc5\xbf\xcb\xcd\x99\x90\x60\xc8\xc6\xc2\x86\x18\x60\xab\x2a\x74\x49\x2e\xc8\x92\x73\x67\xd9\xe7\x94\xa8\xea\x77\x47\x2d\x69\x5c\x41\xfe\x54\x05\x04\xac\xf1\x3b\xdf\x7b\xfe\x5d\xec\xd5\x16\x4a\xe1\xa0\xc8\x0a\x79\x8d\x36\x50\x06\x86\x5d\xd4\x00\xf9\x6a\x0b\x8c\x0d\x41\x0e\xcf\xc1\x11\x57\xe4\x21\x03\xed\xdc\xfe\x0b\x56\x95\xa7\x10\x60\x97\x25\x51\x8b\x36\x52\x92\x44\xc3\x7a\x75\x7d\x03\xbb\x75\x76\x94\xa0\x73\x5e\xda\xbd\x46\xa2\x7e\x6c\x12\x62\x59\xee\xb7\x1c\x36\x28\x44\xec\xa1\xda\x61\x87\x85\xa5\xc1\x60\x50\x54\xba\x8f\x8a\x85\xb1\x46\x3b\xc8\x81\x85\x8f\xa2\xa1\xbc\x8e\x5c\xaa\x11\x3e\x78\x4c\x21\xd5\xc7\xd3\x8c\xc9\x9c\x8a\xa2\x7d\x8c\xce\xd9\x6e\xca\x60\xbf\x36\x12\x70\xd9\x62\x6b\x68\xb3\x68\x6e\x9a\x40\xed\xa5\x99\x3f\x7e\x95\xaf\xe2\x51\x8f\x1c\x6a\xf2\x77\xef\xbd\xfe\x0c\xa3\x94\x41\x36\x3c\x3a\x85\x29\x43\x81\x16\xb9\xa4\x87\x7a\x3c\x40\xbf\xfc\x4b\x10\xbf\x0f\xd1\xff\xc2\x93\x9d\x73\x93\x9c\x5c\x13\xd6\xca\xa6\xc7\x34\x92\xd2\x53\x83\x86\x0d\xbf\xfc\x00\x45\x64\xe1\xae\x91\x18\xc6\x30\x1a\xae\xe8\x95\xaa\xe3\x01\x2c\xff\x9a\x13\x05\x53\x63\x30\xc8\xfb\xd6\xe7\x8f\xc5\x53\x1a\x8b\x5e\x44\x2d\xb1\x5e\x1c\x69\x06\xe4\x44\xc5\xec\x0b\x71\x79\xb0\xdb\xc3\x8b\x81\xf6\x53\xb0\xf5\x5b\x00\x00\x00\xff\xff\x73\x6f\x06\xdc\xba\x06\x00\x00")

func compiledTokenAbiBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenAbi,
		"compiled/Token.abi",
	)
}

func compiledTokenAbi() (*asset, error) {
	bytes, err := compiledTokenAbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.abi", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _compiledTokenBinRuntime = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func compiledTokenBinRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_compiledTokenBinRuntime,
		"compiled/Token.bin-runtime",
	)
}

func compiledTokenBinRuntime() (*asset, error) {
	bytes, err := compiledTokenBinRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "compiled/Token.bin-runtime", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"compiled/Authority.abi": compiledAuthorityAbi,
	"compiled/Authority.bin-runtime": compiledAuthorityBinRuntime,
	"compiled/AuthorityNative.abi": compiledAuthoritynativeAbi,
	"compiled/AuthorityNative.bin-runtime": compiledAuthoritynativeBinRuntime,
	"compiled/Energy.abi": compiledEnergyAbi,
	"compiled/Energy.bin-runtime": compiledEnergyBinRuntime,
	"compiled/EnergyNative.abi": compiledEnergynativeAbi,
	"compiled/EnergyNative.bin-runtime": compiledEnergynativeBinRuntime,
	"compiled/Executor.abi": compiledExecutorAbi,
	"compiled/Executor.bin-runtime": compiledExecutorBinRuntime,
	"compiled/Extension.abi": compiledExtensionAbi,
	"compiled/Extension.bin-runtime": compiledExtensionBinRuntime,
	"compiled/ExtensionNative.abi": compiledExtensionnativeAbi,
	"compiled/ExtensionNative.bin-runtime": compiledExtensionnativeBinRuntime,
	"compiled/Measure.abi": compiledMeasureAbi,
	"compiled/Measure.bin-runtime": compiledMeasureBinRuntime,
	"compiled/Params.abi": compiledParamsAbi,
	"compiled/Params.bin-runtime": compiledParamsBinRuntime,
	"compiled/ParamsNative.abi": compiledParamsnativeAbi,
	"compiled/ParamsNative.bin-runtime": compiledParamsnativeBinRuntime,
	"compiled/Prototype.abi": compiledPrototypeAbi,
	"compiled/Prototype.bin-runtime": compiledPrototypeBinRuntime,
	"compiled/PrototypeEvent.abi": compiledPrototypeeventAbi,
	"compiled/PrototypeEvent.bin-runtime": compiledPrototypeeventBinRuntime,
	"compiled/PrototypeNative.abi": compiledPrototypenativeAbi,
	"compiled/PrototypeNative.bin-runtime": compiledPrototypenativeBinRuntime,
	"compiled/Token.abi": compiledTokenAbi,
	"compiled/Token.bin-runtime": compiledTokenBinRuntime,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"compiled": &bintree{nil, map[string]*bintree{
		"Authority.abi": &bintree{compiledAuthorityAbi, map[string]*bintree{}},
		"Authority.bin-runtime": &bintree{compiledAuthorityBinRuntime, map[string]*bintree{}},
		"AuthorityNative.abi": &bintree{compiledAuthoritynativeAbi, map[string]*bintree{}},
		"AuthorityNative.bin-runtime": &bintree{compiledAuthoritynativeBinRuntime, map[string]*bintree{}},
		"Energy.abi": &bintree{compiledEnergyAbi, map[string]*bintree{}},
		"Energy.bin-runtime": &bintree{compiledEnergyBinRuntime, map[string]*bintree{}},
		"EnergyNative.abi": &bintree{compiledEnergynativeAbi, map[string]*bintree{}},
		"EnergyNative.bin-runtime": &bintree{compiledEnergynativeBinRuntime, map[string]*bintree{}},
		"Executor.abi": &bintree{compiledExecutorAbi, map[string]*bintree{}},
		"Executor.bin-runtime": &bintree{compiledExecutorBinRuntime, map[string]*bintree{}},
		"Extension.abi": &bintree{compiledExtensionAbi, map[string]*bintree{}},
		"Extension.bin-runtime": &bintree{compiledExtensionBinRuntime, map[string]*bintree{}},
		"ExtensionNative.abi": &bintree{compiledExtensionnativeAbi, map[string]*bintree{}},
		"ExtensionNative.bin-runtime": &bintree{compiledExtensionnativeBinRuntime, map[string]*bintree{}},
		"Measure.abi": &bintree{compiledMeasureAbi, map[string]*bintree{}},
		"Measure.bin-runtime": &bintree{compiledMeasureBinRuntime, map[string]*bintree{}},
		"Params.abi": &bintree{compiledParamsAbi, map[string]*bintree{}},
		"Params.bin-runtime": &bintree{compiledParamsBinRuntime, map[string]*bintree{}},
		"ParamsNative.abi": &bintree{compiledParamsnativeAbi, map[string]*bintree{}},
		"ParamsNative.bin-runtime": &bintree{compiledParamsnativeBinRuntime, map[string]*bintree{}},
		"Prototype.abi": &bintree{compiledPrototypeAbi, map[string]*bintree{}},
		"Prototype.bin-runtime": &bintree{compiledPrototypeBinRuntime, map[string]*bintree{}},
		"PrototypeEvent.abi": &bintree{compiledPrototypeeventAbi, map[string]*bintree{}},
		"PrototypeEvent.bin-runtime": &bintree{compiledPrototypeeventBinRuntime, map[string]*bintree{}},
		"PrototypeNative.abi": &bintree{compiledPrototypenativeAbi, map[string]*bintree{}},
		"PrototypeNative.bin-runtime": &bintree{compiledPrototypenativeBinRuntime, map[string]*bintree{}},
		"Token.abi": &bintree{compiledTokenAbi, map[string]*bintree{}},
		"Token.bin-runtime": &bintree{compiledTokenBinRuntime, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

